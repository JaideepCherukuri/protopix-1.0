{
    "sourceFile": "src/page/Portfolio.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733941466518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734082362027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,118 +1,790 @@\n-import React from 'react';\r\n-import { useAccount } from 'wagmi';\r\n-import { Bell, Home, ShoppingBag, LineChart, MessageCircle, Plus, ArrowUp, Building2, Wine, Paintbrush, Ship } from 'lucide-react';\r\n-import ConnectButton from '../ConnectButton';\r\n-import BottomNavigation from '../components/BottomNavigation';\r\n-\r\n-const AssetCard = ({ icon: Icon, label, value, change, changeType }) => (\r\n-  <div className={`p-4 rounded-2xl ${changeType === 'up' ? 'bg-green-50' : 'bg-red-50'}`}>\r\n-    <div className=\"flex items-center gap-2 mb-4\">\r\n-      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white ${changeType === 'up' ? 'bg-green-600' : 'bg-red-600'}`}>\r\n-        <Icon size={16} />\r\n-      </div>\r\n-      <div>\r\n-        <div className=\"font-semibold\">{label}</div>\r\n-        <div className=\"text-gray-500 text-sm\">${value}</div>\r\n-      </div>\r\n-    </div>\r\n-    <div className=\"font-bold text-lg\">${value}</div>\r\n-    <div className={`flex items-center text-sm ${changeType === 'up' ? 'text-green-500' : 'text-red-500'}`}>\r\n-      <ArrowUp size={12} />\r\n-      <span>{change}%</span>\r\n-    </div>\r\n-  </div>\r\n-);\r\n-\r\n-export default function Portfolio() {\r\n-  const { isConnected } = useAccount();\r\n-  \r\n-  const portfolioValue = 125000;\r\n-  const totalReturn = 12.5;\r\n-  \r\n-  const assets = [\r\n-    {\r\n-      icon: Building2,\r\n-      label: \"Dubai Real Estate\",\r\n-      value: \"75,000\",\r\n-      change: \"8.2\",\r\n-      changeType: \"up\"\r\n-    },\r\n-    {\r\n-      icon: Wine,\r\n-      label: \"Fine Wine & Whiskey\",\r\n-      value: \"25,000\",\r\n-      change: \"5.4\",\r\n-      changeType: \"up\"\r\n-    },\r\n-    {\r\n-      icon: Paintbrush,\r\n-      label: \"Art Collection\",\r\n-      value: \"15,000\",\r\n-      change: \"2.1\",\r\n-      changeType: \"down\"\r\n-    },\r\n-    {\r\n-      icon: Ship,\r\n-      label: \"Marine Finance\",\r\n-      value: \"10,000\",\r\n-      change: \"6.8\",\r\n-      changeType: \"up\"\r\n-    }\r\n-  ];\r\n-\r\n-  return (\r\n-    <div className=\"min-h-screen\">\r\n-      <div className=\"bg-black p-6 pb-16 max-w-md mx-auto text-white\">\r\n-        <div className=\"flex justify-between items-center mb-6\">\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <div className=\"w-10 h-10 rounded-full bg-gray-800\" />\r\n-            <span className=\"text-lg\">Andrew G.</span>\r\n-          </div>\r\n-          <Bell className=\"text-gray-400\" size={24} />\r\n-        </div>\r\n-\r\n-        <div className=\"mb-8\">\r\n-          <div className=\"text-4xl font-semibold mb-2\">\r\n-            <span>${portfolioValue.toLocaleString()}.</span>\r\n-            <span className=\"text-gray-500\">00</span>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <div className=\"flex items-center text-green-500\">\r\n-              <ArrowUp size={16} />\r\n-              <span>${(portfolioValue * totalReturn / 100).toFixed(2)}</span>\r\n-            </div>\r\n-            <span className=\"bg-gray-800 px-3 py-1 rounded-full text-sm\">Today</span>\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <div className=\"flex gap-4 mb-8\">\r\n-          <button className=\"flex-1 bg-blue-600 py-3 rounded-full flex items-center justify-center gap-2\">\r\n-            <Plus size={20} />\r\n-            <span>Invest</span>\r\n-          </button>\r\n-          <button className=\"flex-1 bg-gray-800 py-3 rounded-full flex items-center justify-center gap-2\">\r\n-            <ArrowUp size={20} />\r\n-            <span>Sell</span>\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div className=\"bg-white -mt-8 rounded-t-3xl p-6 max-w-md mx-auto\">\r\n-        <div className=\"mb-8\">\r\n-          <div className=\"flex justify-between items-center mb-4\">\r\n-            <h2 className=\"text-2xl font-bold\">Portfolio</h2>\r\n-            <a href=\"#\" className=\"text-blue-600\">View all</a>\r\n-          </div>\r\n-\r\n-          <div className=\"grid grid-cols-2 gap-4\">\r\n-            {assets.map((asset, index) => (\r\n-              <AssetCard key={index} {...asset} />\r\n-            ))}\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <BottomNavigation />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n+import React, { useState, useEffect } from 'react';\n+import { useAccount } from 'wagmi';\n+import { useNavigate } from 'react-router-dom';\n+import { motion, AnimatePresence } from 'framer-motion';\n+import { \n+  Bell, \n+  ArrowUp, \n+  ArrowDown,\n+  Building2, \n+  Wine, \n+  Paintbrush, \n+  Ship,\n+  Plus,\n+  ChevronRight,\n+  Clock,\n+  AlertCircle,\n+  Loader,\n+  Search,\n+  Filter,\n+  TrendingUp,\n+  ChevronDown,\n+  BadgeCheck,\n+  Star,\n+  FileText\n+} from 'lucide-react';\n+import ConnectButton from '../ConnectButton';\n+import BottomNavigation from '../components/BottomNavigation';\n+import toast from 'react-hot-toast';\n+import { getPortfolioAssets, getPortfolioHistory, initializePortfolioData } from '../utils/portfolioStorage';\n+import InvestmentReceipt from '../components/InvestmentReceipt';\n+import backgroundImage1 from '../assets/images/grow-card-dubai.png';\n+import backgroundImage2 from '../assets/images/grow-card-uk.png';\n+import backgroundImage3 from '../assets/images/grow-card-gold.png';\n+import backgroundImage4 from '../assets/images/grow-card-secure.png';\n+import backgroundImage5 from '../assets/images/grow-card-art.png';\n+import backgroundImage6 from '../assets/images/grow-card-wiskey.png';\n+import backgroundImage7 from '../assets/images/grow-card-marine.png';\n+import backgroundImage8 from '../assets/images/grow-card-ind.png';\n+\n+const getCategoryGradient = (category) => {\n+  switch (category?.toLowerCase()) {\n+    case 'real estate':\n+      return 'linear-gradient(to bottom, rgba(0, 0, 0, 0.8), rgba(37, 99, 235, 0.9))';\n+    case 'wine':\n+    case 'whiskey':\n+      return 'linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(185, 28, 28, 0.9))';\n+    case 'art':\n+      return 'linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(126, 34, 206, 0.9))';\n+    case 'marine':\n+      return 'linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(3, 105, 161, 0.9))';\n+    case 'gold':\n+      return 'linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(161, 98, 7, 0.9))';\n+    case 'secure yield':\n+      return 'linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(21, 128, 61, 0.9))';\n+    default:\n+      return 'linear-gradient(to bottom, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.9))';\n+  }\n+};\n+\n+const getMaturityStatus = (lockInPeriod, investmentDate) => {\n+  if (!lockInPeriod || !investmentDate) return null;\n+\n+  const now = new Date();\n+  const investDate = new Date(investmentDate);\n+  const lockInMonths = parseInt(lockInPeriod);\n+  const maturityDate = new Date(investDate);\n+  maturityDate.setMonth(maturityDate.getMonth() + lockInMonths);\n+  \n+  const timeLeft = maturityDate - now;\n+  const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));\n+  const monthsLeft = Math.ceil(daysLeft / 30);\n+  const weeksLeft = Math.ceil(daysLeft / 7);\n+\n+  if (timeLeft <= 0) {\n+    const monthsPast = Math.abs(Math.floor((now - maturityDate) / (1000 * 60 * 60 * 24 * 30)));\n+    return { \n+      type: 'matured', \n+      text: `Matured ${monthsPast} ${monthsPast === 1 ? 'month' : 'months'} ago` \n+    };\n+  } else if (daysLeft <= 7) {\n+    return { \n+      type: 'soon', \n+      text: daysLeft <= 1 ? 'Matures tomorrow' : `${daysLeft}` \n+    };\n+  } else if (daysLeft <= 30) {\n+    return { \n+      type: 'upcoming', \n+      text: `${weeksLeft} ${weeksLeft === 1 ? 'week' : 'weeks'}` \n+    };\n+  } else {\n+    return { \n+      type: 'pending', \n+      text: `${monthsLeft} ${monthsLeft === 1 ? 'month' : 'months'}` \n+    };\n+  }\n+};\n+\n+const MaturityBadge = ({ status }) => {\n+  if (!status) return null;\n+\n+  const getBadgeColor = () => {\n+    switch (status.type) {\n+      case 'matured':\n+        return 'text-green-100';\n+      case 'soon':\n+        return 'text-yellow-100';\n+      default:\n+        return 'text-red-100 ';\n+    }\n+  };\n+\n+  return (\n+    <div className={`absolute top-4 right-4 px-3 py-1 rounded-full text-xs font-medium border ${getBadgeColor()}`}>\n+      <div className=\"flex items-center gap-1\">\n+        <Clock className=\"w-3 h-3\" />\n+        <span>{status.text}</span>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+const ProviderBadge = ({ provider, verified = true }) => (\n+  <div className=\"absolute top-4 left-4 px-3 py-1 rounded-full text-xs font-medium bg-white/10 text-white border border-white/20\">\n+    <div className=\"flex items-center gap-1\">\n+      {provider}\n+      {verified && <BadgeCheck className=\"w-3 h-3 text-blue-100\" />}\n+    </div>\n+  </div>\n+);\n+\n+const CategoryTag = ({ category }) => (\n+  <div className=\"absolute bottom-4 right-4 px-3 py-1 rounded-full text-xs font-medium bg-white/10 text-white border border-white/20\">\n+    {category}\n+  </div>\n+);\n+\n+const TopPerformerBadge = () => (\n+  <motion.div\n+    initial={{ scale: 0.8, opacity: 0 }}\n+    animate={{ scale: 1, opacity: 1 }}\n+    className=\"absolute -top-2 -right-2 w-12 h-12\"\n+  >\n+    <motion.div\n+      animate={{ rotate: 360 }}\n+      transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n+      className=\"w-full h-full\"\n+    >\n+      <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-400 via-yellow-300 to-yellow-500 rounded-full opacity-20\"></div>\n+    </motion.div>\n+    <motion.div\n+      animate={{ scale: [1, 1.1, 1] }}\n+      transition={{ duration: 2, repeat: Infinity }}\n+      className=\"absolute inset-0 flex items-center justify-center\"\n+    >\n+      <Star className=\"w-6 h-6 text-yellow-400\" fill=\"currentColor\" />\n+    </motion.div>\n+  </motion.div>\n+);\n+\n+const AssetCard = ({ \n+  icon: Icon, \n+  label, \n+  value, \n+  change, \n+  changeType, \n+  apy, \n+  onClick, \n+  backgroundImage,\n+  provider,\n+  assetType,\n+  maturityStatus,\n+  isTopPerformer,\n+  investmentDate,\n+  lockInPeriod\n+}) => (\n+  <motion.div\n+    whileHover={{ scale: 1.02 }}\n+    whileTap={{ scale: 0.98 }}\n+    onClick={onClick}\n+    className=\"bg-white rounded-2xl p-4 shadow-sm hover:shadow-md transition-all cursor-pointer relative overflow-hidden\"\n+    style={{\n+      backgroundImage: `${getCategoryGradient(assetType)}, url(${backgroundImage})`,\n+      backgroundSize: 'cover',\n+      backgroundPosition: 'center'\n+    }}\n+  >\n+    {isTopPerformer && <TopPerformerBadge />}\n+    <ProviderBadge provider={provider} />\n+    <MaturityBadge status={maturityStatus} />\n+    <CategoryTag category={assetType} />\n+    \n+    <div className=\"flex items-center gap-3 mb-4 mt-8\">\n+      <div className=\"w-10 h-10 rounded-xl flex items-center justify-center text-white bg-white/20\">\n+        <Icon size={20} />\n+      </div>\n+      <div className=\"flex-1\">\n+        <div className=\"font-medium text-white\">{label}</div>\n+        <div className=\"text-sm text-gray-300\">APY: {typeof apy === 'string' ? apy : `${apy.toFixed(1)}%`}</div>\n+      </div>\n+      <ChevronRight size={20} className=\"text-gray-300\" />\n+    </div>\n+    <div className=\"flex items-end justify-between\">\n+      <div>\n+        <div className=\"text-2xl font-semibold text-white\">${value}</div>\n+        <div className={`flex items-center text-sm ${\n+          changeType === 'up' ? 'text-green-400' : 'text-red-400'\n+        }`}>\n+          {changeType === 'up' ? <ArrowUp size={16} /> : <ArrowDown size={16} />}\n+          <span>{change}%</span>\n+        </div>\n+      </div>\n+      <motion.div \n+        className=\"w-20 h-12\"\n+        style={{\n+          background: `linear-gradient(to right, ${\n+            changeType === 'up' ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)'\n+          }, transparent)`\n+        }}\n+      />\n+    </div>\n+  </motion.div>\n+);\n+\n+const TransactionItem = ({ type, amount, date, status, hash, onClick, hasReceipt }) => (\n+  <motion.div\n+    initial={{ opacity: 0, y: 20 }}\n+    animate={{ opacity: 1, y: 0 }}\n+    onClick={onClick}\n+    className=\"p-4 bg-white rounded-xl shadow-sm mb-3 cursor-pointer hover:shadow-md transition-all relative overflow-hidden\"\n+  >\n+    {hasReceipt && (\n+      <motion.div\n+        initial={{ opacity: 0 }}\n+        animate={{ opacity: [0.5, 1, 0.5] }}\n+        transition={{ duration: 2, repeat: Infinity }}\n+        className=\"absolute right-0 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-500 via-purple-500 to-pink-500\"\n+      />\n+    )}\n+    <div className=\"flex items-center justify-between mb-2\">\n+      <div className=\"flex items-center gap-3\">\n+        <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n+          type === 'investment' ? 'bg-blue-100 text-blue-600' : \n+          type === 'withdrawal' ? 'bg-orange-100 text-orange-600' : \n+          'bg-green-100 text-green-600'\n+        }`}>\n+          {type === 'investment' ? <Plus size={20} /> : \n+           type === 'withdrawal' ? <ArrowUp size={20} /> : \n+           <TrendingUp size={20} />}\n+        </div>\n+        <div>\n+          <div className=\"font-medium text-gray-900\">\n+            {type === 'investment' ? 'New Investment' :\n+             type === 'withdrawal' ? 'Withdrawal' :\n+             'Yield Payment'}\n+          </div>\n+          <div className=\"text-sm text-gray-500\">{new Date(date).toLocaleDateString()}</div>\n+        </div>\n+      </div>\n+      <div className=\"text-right\">\n+        <div className=\"font-semibold\">${amount}</div>\n+        <div className={`text-sm ${\n+          status === 'completed' ? 'text-green-500' :\n+          status === 'pending' ? 'text-orange-500' :\n+          'text-red-500'\n+        }`}>\n+          {status.charAt(0).toUpperCase() + status.slice(1)}\n+        </div>\n+      </div>\n+    </div>\n+    <div className=\"text-xs text-gray-500 font-mono flex items-center gap-2\">\n+      <span>TX: {hash ? `${hash.slice(0, 6)}...${hash.slice(-4)}` : 'N/A'}</span>\n+      {hasReceipt && (\n+        <motion.div\n+          animate={{ scale: [1, 1.2, 1] }}\n+          transition={{ duration: 2, repeat: Infinity }}\n+          className=\"flex items-center gap-1 text-blue-500\"\n+        >\n+          <FileText className=\"w-3 h-3\" />\n+          <span>View Receipt</span>\n+        </motion.div>\n+      )}\n+    </div>\n+  </motion.div>\n+);\n+\n+const EmptyState = ({ type, message, actionLabel, onAction }) => (\n+  <motion.div\n+    initial={{ opacity: 0, scale: 0.9 }}\n+    animate={{ opacity: 1, scale: 1 }}\n+    className=\"flex flex-col items-center justify-center py-12 px-4\"\n+  >\n+    <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n+      {type === 'loading' ? (\n+        <Loader className=\"w-8 h-8 text-gray-400 animate-spin\" />\n+      ) : type === 'error' ? (\n+        <AlertCircle className=\"w-8 h-8 text-red-400\" />\n+      ) : (\n+        <Search className=\"w-8 h-8 text-gray-400\" />\n+      )}\n+    </div>\n+    <p className=\"text-gray-500 text-center mb-4\">{message}</p>\n+    {actionLabel && (\n+      <motion.button\n+        whileHover={{ scale: 1.05 }}\n+        whileTap={{ scale: 0.95 }}\n+        onClick={onAction}\n+        className=\"px-4 py-2 bg-blue-600 text-white rounded-lg font-medium\"\n+      >\n+        {actionLabel}\n+      </motion.button>\n+    )}\n+  </motion.div>\n+);\n+\n+export default function Portfolio() {\n+  const { isConnected, address } = useAccount();\n+  const navigate = useNavigate();\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState(null);\n+  const [portfolioData, setPortfolioData] = useState(null);\n+  const [transactions, setTransactions] = useState([]);\n+  const [activeTab, setActiveTab] = useState('assets');\n+  const [timeRange, setTimeRange] = useState('1M');\n+  const [selectedTransaction, setSelectedTransaction] = useState(null);\n+  const [showReceipt, setShowReceipt] = useState(false);\n+  \n+  useEffect(() => {\n+    const loadPortfolioData = async () => {\n+      if (!isConnected || !address) return;\n+      \n+      setIsLoading(true);\n+      setError(null);\n+      \n+      try {\n+        // Initialize storage if needed\n+        initializePortfolioData();\n+        \n+        // Get stored assets and history\n+        const storedAssets = getPortfolioAssets();\n+        const storedHistory = getPortfolioHistory();\n+        \n+        // Original placeholder assets with backgrounds\n+        const placeholderAssets = [\n+          {\n+            icon: Building2,\n+            label: \"Dubai Real Estate\",\n+            value: \"75,000\",\n+            change: \"8.2\",\n+            changeType: \"up\",\n+            apy: 9.5,\n+            assetType: \"real estate\",\n+            backgroundImage: backgroundImage1\n+          },\n+          {\n+            icon: Wine,\n+            label: \"Fine Wine & Whiskey\",\n+            value: \"25,000\",\n+            change: \"5.4\",\n+            changeType: \"up\",\n+            apy: 12.3,\n+            assetType: \"wine\",\n+            backgroundImage: backgroundImage6\n+          },\n+          {\n+            icon: Paintbrush,\n+            label: \"Art Collection\",\n+            value: \"15,000\",\n+            change: \"2.1\",\n+            changeType: \"down\",\n+            apy: 7.8,\n+            assetType: \"art\",\n+            backgroundImage: backgroundImage5\n+          },\n+          {\n+            icon: Ship,\n+            label: \"Marine Finance\",\n+            value: \"10,000\",\n+            change: \"6.8\",\n+            changeType: \"up\",\n+            apy: 15.2,\n+            assetType: \"marine\",\n+            backgroundImage: backgroundImage7\n+          }\n+        ];\n+\n+        // Transform stored assets to match placeholder format\n+        const realAssets = storedAssets\n+          .filter(asset => !asset.isPlaceholder)\n+          .map(asset => {\n+            const maturityStatus = getMaturityStatus(asset.lockin, asset.investmentDate);\n+            // Remove % sign if present and parse as float\n+            const apyValue = parseFloat(asset.apy.toString().replace('%', ''));\n+            \n+            return {\n+              icon: getAssetIcon(asset.assetType),\n+              label: asset.title,\n+              value: asset.amount.toLocaleString(),\n+              change: (apyValue / 2).toFixed(1), // Half of APY as current change\n+              changeType: 'up',\n+              apy: apyValue,\n+              assetType: asset.assetType,\n+              backgroundImage: asset.backgroundImageUrl || getAssetBackground(asset.assetType),\n+              provider: asset.provider || \"Pixx Finance\",\n+              maturityStatus,\n+              investmentDate: asset.investmentDate,\n+              lockInPeriod: asset.lockin,\n+              originalData: asset\n+            };\n+          });\n+\n+        // Sort assets by APY to determine top performer\n+        const sortedAssets = [...realAssets].sort((a, b) => parseFloat(b.apy) - parseFloat(a.apy));\n+        if (sortedAssets.length > 0) {\n+          sortedAssets[0].isTopPerformer = true;\n+        }\n+\n+        // Combine real assets first, then placeholders\n+        const combinedAssets = [...realAssets, ...placeholderAssets];\n+        \n+        // Calculate total value and return from all assets\n+        const totalValue = combinedAssets.reduce((sum, asset) => {\n+          return sum + parseFloat(asset.value.replace(/,/g, ''));\n+        }, 0);\n+\n+        const totalReturn = combinedAssets.reduce((sum, asset) => {\n+          const assetValue = parseFloat(asset.value.replace(/,/g, ''));\n+          const returnValue = assetValue * (asset.apy / 100);\n+          return sum + returnValue;\n+        }, 0);\n+\n+        const returnPercentage = (totalReturn / totalValue) * 100;\n+\n+        setPortfolioData({\n+          totalValue,\n+          totalReturn: returnPercentage,\n+          assets: combinedAssets\n+        });\n+\n+        // Original placeholder transactions\n+        const placeholderTransactions = [\n+          {\n+            type: 'investment',\n+            amount: '25,000',\n+            date: '2024-02-15',\n+            status: 'completed',\n+            hash: '0x1234567890abcdef1234567890abcdef12345678'\n+          },\n+          {\n+            type: 'yield',\n+            amount: '1,250',\n+            date: '2024-02-01',\n+            status: 'completed',\n+            hash: '0xabcdef1234567890abcdef1234567890abcdef12'\n+          },\n+          {\n+            type: 'withdrawal',\n+            amount: '5,000',\n+            date: '2024-01-15',\n+            status: 'pending',\n+            hash: '0x7890abcdef1234567890abcdef1234567890abcd'\n+          }\n+        ];\n+\n+        // Transform stored transactions\n+        const realTransactions = storedHistory\n+          .filter(item => !item.isPlaceholder)\n+          .map(item => ({\n+            type: 'investment',\n+            amount: item.amount.toLocaleString(),\n+            date: item.date,\n+            status: item.status,\n+            hash: item.hash,\n+            hasReceipt: !!item.transactionDetails,\n+            originalData: item\n+          }));\n+\n+        // Put real transactions first, then placeholders\n+        setTransactions([...realTransactions, ...placeholderTransactions]);\n+        \n+      } catch (err) {\n+        console.error('Error loading portfolio data:', err);\n+        setError('Failed to load portfolio data. Please try again later.');\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    loadPortfolioData();\n+\n+    // Listen for new transactions\n+    window.addEventListener('newTransaction', loadPortfolioData);\n+    return () => window.removeEventListener('newTransaction', loadPortfolioData);\n+  }, [isConnected, address]);\n+\n+  const getAssetIcon = (assetType) => {\n+    switch (assetType?.toLowerCase()) {\n+      case 'real estate':\n+        return Building2;\n+      case 'wine':\n+        return Wine;\n+      case 'art':\n+        return Paintbrush;\n+      case 'marine':\n+        return Ship;\n+      default:\n+        return Building2;\n+    }\n+  };\n+\n+  const getAssetBackground = (assetType) => {\n+    switch (assetType?.toLowerCase()) {\n+      case 'real estate':\n+        return backgroundImage1;\n+      case 'uk property':\n+        return backgroundImage2;\n+      case 'gold':\n+        return backgroundImage3;\n+      case 'secure yield':\n+        return backgroundImage4;\n+      case 'art':\n+        return backgroundImage5;\n+      case 'wine':\n+      case 'whiskey':\n+        return backgroundImage6;\n+      case 'marine':\n+        return backgroundImage7;\n+      case 'india property':\n+        return backgroundImage8;\n+      default:\n+        return backgroundImage1; // Default background\n+    }\n+  };\n+\n+  const handleAssetClick = (asset) => {\n+    navigate('/asset-detail', { \n+      state: { \n+        asset: {\n+          id: asset.originalData?.id || `portfolio-${Date.now()}`,\n+          name: asset.label,\n+          icon: asset.backgroundImage,\n+          currentValue: parseFloat(asset.value.replace(/,/g, '')),\n+          currentApy: asset.apy,\n+          targetApy: asset.apy, // Using same APY as target for now\n+          accumulatedYield: (parseFloat(asset.value.replace(/,/g, '')) * parseFloat(asset.change) / 100).toFixed(2),\n+          nextDistribution: new Date(Date.now() + 30*24*60*60*1000), // 30 days from now\n+          maturityDate: asset.originalData?.maturityDate || new Date(Date.now() + 365*24*60*60*1000),\n+          investmentDate: asset.investmentDate || new Date(),\n+          lockinPeriod: asset.lockInPeriod || '12 months',\n+          redemptionFrequency: '30 days', // Default value\n+          assetType: asset.assetType,\n+          status: 'active'\n+        }\n+      }\n+    });\n+  };\n+\n+  const handleTransactionClick = (transaction) => {\n+    if (transaction.originalData?.transactionDetails) {\n+      setSelectedTransaction(transaction.originalData.transactionDetails);\n+      setShowReceipt(true);\n+    }\n+  };\n+\n+  const handleInvestClick = () => {\n+    navigate('/explore-pixx');\n+  };\n+\n+  if (!isConnected) {\n+    return (\n+      <div className=\"min-h-screen bg-gray-50\">\n+        <EmptyState\n+          type=\"error\"\n+          message=\"Please connect your wallet to view your portfolio\"\n+          actionLabel=\"Connect Wallet\"\n+          onAction={() => {}} // This will trigger your ConnectButton\n+        />\n+        <BottomNavigation />\n+      </div>\n+    );\n+  }\n+\n+  if (isLoading) {\n+    return (\n+      <div className=\"min-h-screen bg-gray-50\">\n+        <EmptyState\n+          type=\"loading\"\n+          message=\"Loading your portfolio...\"\n+        />\n+        <BottomNavigation />\n+      </div>\n+    );\n+  }\n+\n+  if (error) {\n+    return (\n+      <div className=\"min-h-screen bg-gray-50\">\n+        <EmptyState\n+          type=\"error\"\n+          message={error}\n+          actionLabel=\"Try Again\"\n+          onAction={() => window.location.reload()}\n+        />\n+        <BottomNavigation />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50\">\n+      {/* Header */}\n+      <motion.div\n+        initial={{ opacity: 0, y: -20 }}\n+        animate={{ opacity: 1, y: 0 }}\n+        className=\"bg-[rgba(18,24,39)] p-6 pb-16\"\n+      >\n+        <div className=\"max-w-xl mx-auto\">\n+          <div className=\"flex justify-between items-center mb-6\">\n+            <div className=\"flex items-center gap-3\">\n+              <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\n+              <div className=\"h-8 w-[1px] bg-gray-700\" />\n+              <motion.button\n+                whileHover={{ scale: 1.05 }}\n+                whileTap={{ scale: 0.95 }}\n+                className=\"relative\"\n+                onClick={() => toast('No new notifications')}\n+              >\n+                <Bell className=\"text-gray-400\" size={24} />\n+                <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\" />\n+              </motion.button>\n+            </div>\n+            <motion.button\n+              whileHover={{ scale: 1.05 }}\n+              whileTap={{ scale: 0.95 }}\n+              onClick={() => toast('Filters coming soon')}\n+              className=\"p-2 rounded-xl bg-gray-800 text-gray-400\"\n+            >\n+              <Filter size={20} />\n+            </motion.button>\n+          </div>\n+\n+          <div className=\"text-white mb-6\">\n+            <div className=\"flex items-baseline gap-1\">\n+              <span className=\"text-4xl font-semibold\">\n+                ${portfolioData.totalValue.toLocaleString()}\n+              </span>\n+              <span className=\"text-gray-400\">.00</span>\n+            </div>\n+            <div className=\"flex items-center gap-2 mt-2\">\n+              <div className={`flex items-center ${\n+                portfolioData.totalReturn >= 0 ? 'text-green-500' : 'text-red-500'\n+              }`}>\n+                {portfolioData.totalReturn >= 0 ? (\n+                  <ArrowUp size={16} />\n+                ) : (\n+                  <ArrowDown size={16} />\n+                )}\n+                <span>${Math.abs((portfolioData.totalValue * portfolioData.totalReturn / 100)).toFixed(2)}</span>\n+              </div>\n+              <div className=\"flex gap-2\">\n+                {['1W', '1M', '3M', '1Y', 'ALL'].map((range) => (\n+                  <motion.button\n+                    key={range}\n+                    whileHover={{ scale: 1.05 }}\n+                    whileTap={{ scale: 0.95 }}\n+                    onClick={() => setTimeRange(range)}\n+                    className={`px-3 py-1 rounded-full text-sm ${\n+                      timeRange === range \n+                        ? 'bg-blue-600 text-white' \n+                        : 'bg-gray-800 text-gray-400'\n+                    }`}\n+                  >\n+                    {range}\n+                  </motion.button>\n+                ))}\n+              </div>\n+            </div>\n+          </div>\n+\n+          <div className=\"flex gap-4\">\n+            <motion.button\n+              whileHover={{ scale: 1.02 }}\n+              whileTap={{ scale: 0.98 }}\n+              onClick={handleInvestClick}\n+              className=\"flex-1 bg-gradient-to-r from-blue-600 to-blue-700 py-3 rounded-xl flex items-center justify-center gap-2 text-white font-medium shadow-lg\"\n+            >\n+              <Plus size={20} />\n+              <span>Invest</span>\n+            </motion.button>\n+            <motion.button\n+              whileHover={{ scale: 1.02 }}\n+              whileTap={{ scale: 0.98 }}\n+              onClick={() => toast('Withdrawal feature coming soon')}\n+              className=\"flex-1 bg-gray-800 py-3 rounded-xl flex items-center justify-center gap-2 text-white font-medium\"\n+            >\n+              <ArrowUp size={20} />\n+              <span>Withdraw</span>\n+            </motion.button>\n+          </div>\n+        </div>\n+      </motion.div>\n+\n+      {/* Main Content */}\n+      <div className=\"max-w-xl mx-auto -mt-8 rounded-t-3xl bg-gray-50 p-6 min-h-screen\">\n+        {/* Tabs */}\n+        <div className=\"flex gap-4 mb-6\">\n+          <button\n+            onClick={() => setActiveTab('assets')}\n+            className={`flex-1 py-2 text-center rounded-xl font-medium transition-all ${\n+              activeTab === 'assets'\n+                ? 'bg-white text-gray-900 shadow-sm'\n+                : 'text-gray-500'\n+            }`}\n+          >\n+            Assets\n+          </button>\n+          <button\n+            onClick={() => setActiveTab('history')}\n+            className={`flex-1 py-2 text-center rounded-xl font-medium transition-all ${\n+              activeTab === 'history'\n+                ? 'bg-white text-gray-900 shadow-sm'\n+                : 'text-gray-500'\n+            }`}\n+          >\n+            History\n+          </button>\n+        </div>\n+\n+        <AnimatePresence mode=\"wait\">\n+          {activeTab === 'assets' ? (\n+            <motion.div\n+              key=\"assets\"\n+              initial={{ opacity: 0, y: 20 }}\n+              animate={{ opacity: 1, y: 0 }}\n+              exit={{ opacity: 0, y: -20 }}\n+              className=\"grid grid-cols-1 gap-4\"\n+            >\n+              {portfolioData.assets.map((asset, index) => (\n+                <AssetCard\n+                  key={index}\n+                  {...asset}\n+                  backgroundImage={asset.backgroundImage}\n+                  onClick={() => handleAssetClick(asset)}\n+                />\n+              ))}\n+            </motion.div>\n+          ) : (\n+            <motion.div\n+              key=\"history\"\n+              initial={{ opacity: 0, y: 20 }}\n+              animate={{ opacity: 1, y: 0 }}\n+              exit={{ opacity: 0, y: -20 }}\n+            >\n+              {transactions.length > 0 ? (\n+                transactions.map((transaction, index) => (\n+                  <TransactionItem \n+                    key={index} \n+                    {...transaction} \n+                    onClick={() => handleTransactionClick(transaction)}\n+                  />\n+                ))\n+              ) : (\n+                <EmptyState\n+                  type=\"empty\"\n+                  message=\"No transactions yet\"\n+                  actionLabel=\"Make Your First Investment\"\n+                  onAction={handleInvestClick}\n+                />\n+              )}\n+            </motion.div>\n+          )}\n+        </AnimatePresence>\n+      </div>\n+\n+      <BottomNavigation />\n+\n+      {/* Transaction Receipt Modal */}\n+      {showReceipt && selectedTransaction && (\n+        <div className=\"fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n+          <InvestmentReceipt\n+            transaction={selectedTransaction}\n+            onClose={() => {\n+              setShowReceipt(false);\n+              setSelectedTransaction(null);\n+            }}\n+          />\n+        </div>\n+      )}\n+    </div>\n+  );\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733941466518,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { useAccount } from 'wagmi';\r\nimport { Bell, Home, ShoppingBag, LineChart, MessageCircle, Plus, ArrowUp, Building2, Wine, Paintbrush, Ship } from 'lucide-react';\r\nimport ConnectButton from '../ConnectButton';\r\nimport BottomNavigation from '../components/BottomNavigation';\r\n\r\nconst AssetCard = ({ icon: Icon, label, value, change, changeType }) => (\r\n  <div className={`p-4 rounded-2xl ${changeType === 'up' ? 'bg-green-50' : 'bg-red-50'}`}>\r\n    <div className=\"flex items-center gap-2 mb-4\">\r\n      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white ${changeType === 'up' ? 'bg-green-600' : 'bg-red-600'}`}>\r\n        <Icon size={16} />\r\n      </div>\r\n      <div>\r\n        <div className=\"font-semibold\">{label}</div>\r\n        <div className=\"text-gray-500 text-sm\">${value}</div>\r\n      </div>\r\n    </div>\r\n    <div className=\"font-bold text-lg\">${value}</div>\r\n    <div className={`flex items-center text-sm ${changeType === 'up' ? 'text-green-500' : 'text-red-500'}`}>\r\n      <ArrowUp size={12} />\r\n      <span>{change}%</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default function Portfolio() {\r\n  const { isConnected } = useAccount();\r\n  \r\n  const portfolioValue = 125000;\r\n  const totalReturn = 12.5;\r\n  \r\n  const assets = [\r\n    {\r\n      icon: Building2,\r\n      label: \"Dubai Real Estate\",\r\n      value: \"75,000\",\r\n      change: \"8.2\",\r\n      changeType: \"up\"\r\n    },\r\n    {\r\n      icon: Wine,\r\n      label: \"Fine Wine & Whiskey\",\r\n      value: \"25,000\",\r\n      change: \"5.4\",\r\n      changeType: \"up\"\r\n    },\r\n    {\r\n      icon: Paintbrush,\r\n      label: \"Art Collection\",\r\n      value: \"15,000\",\r\n      change: \"2.1\",\r\n      changeType: \"down\"\r\n    },\r\n    {\r\n      icon: Ship,\r\n      label: \"Marine Finance\",\r\n      value: \"10,000\",\r\n      change: \"6.8\",\r\n      changeType: \"up\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen\">\r\n      <div className=\"bg-black p-6 pb-16 max-w-md mx-auto text-white\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"w-10 h-10 rounded-full bg-gray-800\" />\r\n            <span className=\"text-lg\">Andrew G.</span>\r\n          </div>\r\n          <Bell className=\"text-gray-400\" size={24} />\r\n        </div>\r\n\r\n        <div className=\"mb-8\">\r\n          <div className=\"text-4xl font-semibold mb-2\">\r\n            <span>${portfolioValue.toLocaleString()}.</span>\r\n            <span className=\"text-gray-500\">00</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"flex items-center text-green-500\">\r\n              <ArrowUp size={16} />\r\n              <span>${(portfolioValue * totalReturn / 100).toFixed(2)}</span>\r\n            </div>\r\n            <span className=\"bg-gray-800 px-3 py-1 rounded-full text-sm\">Today</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex gap-4 mb-8\">\r\n          <button className=\"flex-1 bg-blue-600 py-3 rounded-full flex items-center justify-center gap-2\">\r\n            <Plus size={20} />\r\n            <span>Invest</span>\r\n          </button>\r\n          <button className=\"flex-1 bg-gray-800 py-3 rounded-full flex items-center justify-center gap-2\">\r\n            <ArrowUp size={20} />\r\n            <span>Sell</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bg-white -mt-8 rounded-t-3xl p-6 max-w-md mx-auto\">\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-2xl font-bold\">Portfolio</h2>\r\n            <a href=\"#\" className=\"text-blue-600\">View all</a>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            {assets.map((asset, index) => (\r\n              <AssetCard key={index} {...asset} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <BottomNavigation />\r\n      </div>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}