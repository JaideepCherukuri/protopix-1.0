{
    "sourceFile": "src/page/Investmentdetail.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1733941057320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733941457670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,11 +21,14 @@\n   Download,\r\n   DollarSign,\r\n   Bitcoin\r\n } from 'lucide-react';\r\n-import { parseUnits } from 'ethers/lib/utils';\r\n-import { useContractWrite, usePrepareContractWrite, useWaitForTransaction } from 'wagmi';\r\n-import TransactionReceipt from '../components/TransactionReceipt';\r\n+import { parseUnits } from 'viem';\r\n+import { \r\n+  useWriteContract,\r\n+  useWaitForTransactionReceipt,\r\n+  useSimulateContract\r\n+} from 'wagmi';\r\n \r\n const DetailSection = ({ title, children }) => (\r\n   <div className=\"border-b border-gray-200 py-6\">\r\n     <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\r\n@@ -64,9 +67,9 @@\n       <p className=\"text-gray-300\">{description}</p>\r\n     </div>\r\n   );\r\n \r\n-  \r\n+const USDT_RECIPIENT = process.env.REACT_APP_USDT_RECIPIENT;\r\n \r\n export default function InvestmentDetail() {\r\n   const location = useLocation();\r\n   const [investmentAmount, setInvestmentAmount] = useState('');\r\n@@ -134,47 +137,49 @@\n \r\n   const [showReceipt, setShowReceipt] = useState(false);\r\n   const [transactionDetails, setTransactionDetails] = useState(null);\r\n \r\n-  // Prepare contract write\r\n-  const { config } = usePrepareContractWrite({\r\n+  // Replace the old prepare and write hooks with new wagmi v2 hooks\r\n+  const { data: simulateData } = useSimulateContract({\r\n     address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\r\n     abi: USDT_ABI,\r\n     functionName: 'transfer',\r\n     args: [\r\n       USDT_RECIPIENT,\r\n-      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : '0'\r\n+      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\r\n     ],\r\n     enabled: Boolean(investmentAmount && investmentAmount >= 1),\r\n   });\r\n \r\n-  // Contract write hook\r\n-  const { data: transactionData, write, isLoading: isTransactionLoading } = useContractWrite(config);\r\n+  const { writeContract, isLoading: isTransactionLoading } = useWriteContract();\r\n \r\n-  // Wait for transaction\r\n-  const { isSuccess, isError } = useWaitForTransaction({\r\n-    hash: transactionData?.hash,\r\n-    onSuccess(data) {\r\n+  // Wait for transaction receipt\r\n+  const { isSuccess, isError } = useWaitForTransactionReceipt({\r\n+    hash: simulateData?.hash,\r\n+  });\r\n+\r\n+  // Update transaction success handler\r\n+  useEffect(() => {\r\n+    if (isSuccess && simulateData?.hash) {\r\n       const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\r\n       const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\r\n       \r\n       setTransactionDetails({\r\n-        hash: data.transactionHash,\r\n+        hash: simulateData.hash,\r\n         from: address,\r\n         to: USDT_RECIPIENT,\r\n         network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\r\n         explorer: explorerUrl,\r\n-        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\r\n       });\r\n       \r\n       setShowReceipt(true);\r\n       setIsModalOpen(false);\r\n     }\r\n-  });\r\n+  }, [isSuccess, simulateData?.hash, address]);\r\n \r\n   const handleConfirmInvestment = () => {\r\n-    if (write) {\r\n-      write();\r\n+    if (simulateData?.request) {\r\n+      writeContract(simulateData.request);\r\n     }\r\n   };\r\n \r\n   const handleCloseModal = () => {\r\n"
                },
                {
                    "date": 1733941825311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n   useWriteContract,\r\n   useWaitForTransactionReceipt,\r\n   useSimulateContract\r\n } from 'wagmi';\r\n+import TransactionReceipt from '../components/TransactionReceipt';\r\n \r\n const DetailSection = ({ title, children }) => (\r\n   <div className=\"border-b border-gray-200 py-6\">\r\n     <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\r\n"
                },
                {
                    "date": 1733942375715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n   useWaitForTransactionReceipt,\r\n   useSimulateContract\r\n } from 'wagmi';\r\n import TransactionReceipt from '../components/TransactionReceipt';\r\n+import toast from 'react-hot-toast';\r\n \r\n const DetailSection = ({ title, children }) => (\r\n   <div className=\"border-b border-gray-200 py-6\">\r\n     <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\r\n@@ -138,52 +139,112 @@\n \r\n   const [showReceipt, setShowReceipt] = useState(false);\r\n   const [transactionDetails, setTransactionDetails] = useState(null);\r\n \r\n-  // Replace the old prepare and write hooks with new wagmi v2 hooks\r\n-  const { data: simulateData } = useSimulateContract({\r\n+  // Add error state\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  // Update simulate contract with error handling\r\n+  const { data: simulateData, error: simulateError } = useSimulateContract({\r\n     address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\r\n     abi: USDT_ABI,\r\n     functionName: 'transfer',\r\n     args: [\r\n       USDT_RECIPIENT,\r\n       investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\r\n     ],\r\n     enabled: Boolean(investmentAmount && investmentAmount >= 1),\r\n+    onError(err) {\r\n+      console.error('Simulation error:', err);\r\n+      setError(err);\r\n+    }\r\n   });\r\n \r\n-  const { writeContract, isLoading: isTransactionLoading } = useWriteContract();\r\n+  // Update contract write with loading and error states\r\n+  const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\r\n+    onError(err) {\r\n+      console.error('Write contract error:', err);\r\n+      toast.error('Transaction failed. Please try again.');\r\n+      setError(err);\r\n+    }\r\n+  });\r\n \r\n-  // Wait for transaction receipt\r\n-  const { isSuccess, isError } = useWaitForTransactionReceipt({\r\n+  // Enhanced transaction receipt handling\r\n+  const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\r\n     hash: simulateData?.hash,\r\n-  });\r\n-\r\n-  // Update transaction success handler\r\n-  useEffect(() => {\r\n-    if (isSuccess && simulateData?.hash) {\r\n+    onSuccess(data) {\r\n+      console.log('Transaction successful:', data);\r\n       const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\r\n       const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\r\n       \r\n-      setTransactionDetails({\r\n-        hash: simulateData.hash,\r\n+      const txDetails = {\r\n+        hash: data.transactionHash,\r\n         from: address,\r\n         to: USDT_RECIPIENT,\r\n         network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\r\n         explorer: explorerUrl,\r\n-      });\r\n+        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\r\n+      };\r\n+\r\n+      console.log('Transaction details:', txDetails);\r\n+      setTransactionDetails(txDetails);\r\n       \r\n       setShowReceipt(true);\r\n       setIsModalOpen(false);\r\n+      toast.success('Investment successful!');\r\n+    },\r\n+    onError(err) {\r\n+      console.error('Transaction wait error:', err);\r\n+      toast.error('Transaction failed while processing');\r\n+      setError(err);\r\n     }\r\n-  }, [isSuccess, simulateData?.hash, address]);\r\n+  });\r\n \r\n-  const handleConfirmInvestment = () => {\r\n-    if (simulateData?.request) {\r\n-      writeContract(simulateData.request);\r\n+  // Enhanced investment handler with proper error handling\r\n+  const handleConfirmInvestment = async () => {\r\n+    try {\r\n+      setError(null);\r\n+      \r\n+      if (!simulateData?.request) {\r\n+        console.error('Simulation data not available');\r\n+        toast.error('Unable to process transaction. Please try again.');\r\n+        return;\r\n+      }\r\n+\r\n+      console.log('Starting transaction with data:', {\r\n+        amount: investmentAmount,\r\n+        recipient: USDT_RECIPIENT,\r\n+        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'\r\n+      });\r\n+\r\n+      toast.loading('Processing your investment...', {\r\n+        id: 'transaction',\r\n+      });\r\n+\r\n+      await writeContract(simulateData.request);\r\n+\r\n+    } catch (err) {\r\n+      console.error('Transaction error:', err);\r\n+      toast.error('Transaction failed. Please try again.', {\r\n+        id: 'transaction',\r\n+      });\r\n+      setError(err);\r\n     }\r\n   };\r\n \r\n+  // Effect to handle errors\r\n+  useEffect(() => {\r\n+    if (simulateError || writeError || waitError) {\r\n+      const errorMessage = (simulateError || writeError || waitError)?.message || 'Transaction failed';\r\n+      console.error('Transaction error:', {\r\n+        simulateError,\r\n+        writeError,\r\n+        waitError\r\n+      });\r\n+      toast.error(errorMessage);\r\n+    }\r\n+  }, [simulateError, writeError, waitError]);\r\n+\r\n   const handleCloseModal = () => {\r\n     setIsModalOpen(false);\r\n   };\r\n   return (\r\n@@ -532,27 +593,36 @@\n         disabled={\r\n           !investmentAmount ||\r\n           investmentAmount < 1 ||\r\n           Number(investmentAmount) > Number(usdtBalance) ||\r\n-          isTransactionLoading\r\n+          isTransactionLoading ||\r\n+          Boolean(error)\r\n         }\r\n-        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 ${\r\n+        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\r\n           investmentAmount >= 1 &&\r\n           Number(investmentAmount) <= Number(usdtBalance) &&\r\n-          !isTransactionLoading\r\n+          !isTransactionLoading &&\r\n+          !error\r\n             ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\r\n             : 'bg-gray-100 text-gray-400 cursor-not-allowed'\r\n         }`}\r\n       >\r\n-        {isTransactionLoading\r\n-          ? 'Processing Transaction...'\r\n-          : !investmentAmount\r\n-          ? 'Enter Investment Amount'\r\n-          : Number(investmentAmount) < 1\r\n-          ? 'Minimum $1 Required'\r\n-          : Number(investmentAmount) > Number(usdtBalance)\r\n-          ? 'Insufficient Balance'\r\n-          : 'Confirm Investment'}\r\n+        {isTransactionLoading ? (\r\n+          <div className=\"flex items-center justify-center space-x-2\">\r\n+            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n+            <span>Processing Transaction...</span>\r\n+          </div>\r\n+        ) : error ? (\r\n+          'Transaction Failed - Try Again'\r\n+        ) : !investmentAmount ? (\r\n+          'Enter Investment Amount'\r\n+        ) : Number(investmentAmount) < 1 ? (\r\n+          'Minimum $1 Required'\r\n+        ) : Number(investmentAmount) > Number(usdtBalance) ? (\r\n+          'Insufficient Balance'\r\n+        ) : (\r\n+          'Confirm Investment'\r\n+        )}\r\n       </button>\r\n     </>\r\n   ) : (\r\n     <div className=\"py-12 px-4 text-center\">\r\n"
                },
                {
                    "date": 1733942705074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,655 +1,655 @@\n-import React, { useState, useEffect, useCallback } from 'react';\r\n-import Modal from '../components/Modal';\r\n-import ConnectButton from '../ConnectButton';\r\n-import { useAppKit } from '@reown/appkit/react';\r\n-import BottomNavigation from '../components/BottomNavigation';\r\n-import { useAccount } from 'wagmi';\r\n-import { useLocation } from 'react-router-dom';\r\n-import { ethers } from 'ethers';\r\n-import axios from 'axios';\r\n-import { \r\n-  ChevronDown, \r\n-  ArrowUpRight, \r\n-  FileText, \r\n-  Shield, \r\n-  Building2, \r\n-  Calendar,\r\n-  TrendingUp,\r\n-  Wallet,\r\n-  Clock,\r\n-  BadgeCheck,\r\n-  Download,\r\n-  DollarSign,\r\n-  Bitcoin\r\n-} from 'lucide-react';\r\n-import { parseUnits } from 'viem';\r\n-import { \r\n-  useWriteContract,\r\n-  useWaitForTransactionReceipt,\r\n-  useSimulateContract\r\n-} from 'wagmi';\r\n-import TransactionReceipt from '../components/TransactionReceipt';\r\n-import toast from 'react-hot-toast';\r\n-\r\n-const DetailSection = ({ title, children }) => (\r\n-  <div className=\"border-b border-gray-200 py-6\">\r\n-    <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\r\n-    {children}\r\n-  </div>\r\n-);\r\n-const BSC_SCAN_API_KEY = 'GH8RED93CMI9YPHPW9WDJFKJ27G3EU475T';\r\n-const USDT_CONTRACT_ADDRESSES = {\r\n-  mainnet: '0x55d398326f99059fF775485246999027B3197955',\r\n-  testnet: '0x53A5E28C96c5c886A56711021fFCA19650D20bBf'\r\n-};\r\n-\r\n-const BSC_SCAN_ENDPOINTS = {\r\n-  mainnet: 'https://api.bscscan.com/api',\r\n-  testnet: 'https://api-testnet.bscscan.com/api'\r\n-};\r\n-\r\n-const USDT_ABI = [\r\n-  'function transfer(address to, uint256 value) returns (bool)',\r\n-  'function balanceOf(address) view returns (uint256)',\r\n-  'function decimals() view returns (uint8)',\r\n-  'function approve(address spender, uint256 value) returns (bool)'\r\n-];\r\n-\r\n-const StatCard = ({ label, value, subtext }) => (\r\n-  <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\r\n-    <p className=\"text-sm text-white-900 mb-1\">{label}</p>\r\n-    <p className=\"text-l font-semibold mb-1\">{value}</p>\r\n-    \r\n-  </div>\r\n-);\r\n-\r\n-const HighlightCard = ({ title, description, fullWidth }) => (\r\n-    <div className={`bg-gray-900 text-white p-8 rounded-2xl ${fullWidth ? 'col-span-full' : ''}`}>\r\n-      <h3 className=\"text-xl font-serif mb-4 text-cream\">{title}</h3>\r\n-      <p className=\"text-gray-300\">{description}</p>\r\n-    </div>\r\n-  );\r\n-\r\n-const USDT_RECIPIENT = process.env.REACT_APP_USDT_RECIPIENT;\r\n-\r\n-export default function InvestmentDetail() {\r\n-  const location = useLocation();\r\n-  const [investmentAmount, setInvestmentAmount] = useState('');\r\n-  const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\r\n-  const [expanded, setExpanded] = useState(false);\r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const { connectStatus, walletBalances } = useAppKit();\r\n-  const { address, isConnected } = useAccount();\r\n-  const [showAccountDetails, setShowAccountDetails] = useState(false);\r\n-  const [usdtBalance, setUsdtBalance] = useState('0.00');\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n-  const [investmentType, setInvestmentType] = useState('crypto'); // 'crypto' or 'fiat'\r\n-  // Add these near the top of InvestmentDetail component\r\n-const [selectedTenure, setSelectedTenure] = useState(24);\r\n-const MIN_TENURE = 3;\r\n-const MAX_TENURE = 24;\r\n-const RECOMMENDED_TENURE = 14;\r\n-const ANNUAL_RATE = parseFloat(floatingapy.replace('%', '')) / 100;// 9% APY\r\n-\r\n-// Add this helper function\r\n-const calculateExpectedReturn = (amount, tenure) => {\r\n-  if (!amount) return 0;\r\n-  const monthlyRate = ANNUAL_RATE / 12;\r\n-  return (amount * (1 + monthlyRate * tenure)).toFixed(2);\r\n-};\r\n-\r\n-  \r\n-  useEffect(() => {\r\n-    if (isConnected) {\r\n-      setShowAccountDetails(true);\r\n-    }\r\n-  }, [isConnected]);\r\n-\r\n-  const handleInvestNowClick = () => {\r\n-    setIsModalOpen(true);\r\n-  };\r\n-  // Add this useEffect to fetch balance when address changes\r\n-  useEffect(() => {\r\n-    const fetchUSDTBalance = async () => {\r\n-      if (!address || !isConnected) return;\r\n-\r\n-      setIsLoading(true);\r\n-      try {\r\n-        const networkType = window.ethereum.networkVersion === '97' ? 'testnet' : 'mainnet';\r\n-        const response = await axios.get(\r\n-          `${BSC_SCAN_ENDPOINTS[networkType]}?module=account&action=tokenbalance&contractaddress=${USDT_CONTRACT_ADDRESSES[networkType]}&address=${address}&tag=latest&apikey=${BSC_SCAN_API_KEY}`\r\n-        );\r\n-\r\n-        const balance = response.data.result;\r\n-        if (balance) {\r\n-          // Convert balance to human-readable format (USDT has 18 decimals)\r\n-          setUsdtBalance((parseFloat(balance) / 10 ** 18).toFixed(2));\r\n-        } else {\r\n-          console.error('Failed to fetch balance:', response.data.message);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error fetching USDT balance:', error);\r\n-      } finally {\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchUSDTBalance();\r\n-  }, [address, isConnected]);\r\n-\r\n-  const [showReceipt, setShowReceipt] = useState(false);\r\n-  const [transactionDetails, setTransactionDetails] = useState(null);\r\n-\r\n-  // Add error state\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  // Update simulate contract with error handling\r\n-  const { data: simulateData, error: simulateError } = useSimulateContract({\r\n-    address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\r\n-    abi: USDT_ABI,\r\n-    functionName: 'transfer',\r\n-    args: [\r\n-      USDT_RECIPIENT,\r\n-      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\r\n-    ],\r\n-    enabled: Boolean(investmentAmount && investmentAmount >= 1),\r\n-    onError(err) {\r\n-      console.error('Simulation error:', err);\r\n-      setError(err);\r\n-    }\r\n-  });\r\n-\r\n-  // Update contract write with loading and error states\r\n-  const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\r\n-    onError(err) {\r\n-      console.error('Write contract error:', err);\r\n-      toast.error('Transaction failed. Please try again.');\r\n-      setError(err);\r\n-    }\r\n-  });\r\n-\r\n-  // Enhanced transaction receipt handling\r\n-  const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\r\n-    hash: simulateData?.hash,\r\n-    onSuccess(data) {\r\n-      console.log('Transaction successful:', data);\r\n-      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\r\n-      const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\r\n-      \r\n-      const txDetails = {\r\n-        hash: data.transactionHash,\r\n-        from: address,\r\n-        to: USDT_RECIPIENT,\r\n-        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\r\n-        explorer: explorerUrl,\r\n-        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\r\n-      };\r\n-\r\n-      console.log('Transaction details:', txDetails);\r\n-      setTransactionDetails(txDetails);\r\n-      \r\n-      setShowReceipt(true);\r\n-      setIsModalOpen(false);\r\n-      toast.success('Investment successful!');\r\n-    },\r\n-    onError(err) {\r\n-      console.error('Transaction wait error:', err);\r\n-      toast.error('Transaction failed while processing');\r\n-      setError(err);\r\n-    }\r\n-  });\r\n-\r\n-  // Enhanced investment handler with proper error handling\r\n-  const handleConfirmInvestment = async () => {\r\n-    try {\r\n-      setError(null);\r\n-      \r\n-      if (!simulateData?.request) {\r\n-        console.error('Simulation data not available');\r\n-        toast.error('Unable to process transaction. Please try again.');\r\n-        return;\r\n-      }\r\n-\r\n-      console.log('Starting transaction with data:', {\r\n-        amount: investmentAmount,\r\n-        recipient: USDT_RECIPIENT,\r\n-        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'\r\n-      });\r\n-\r\n-      toast.loading('Processing your investment...', {\r\n-        id: 'transaction',\r\n-      });\r\n-\r\n-      await writeContract(simulateData.request);\r\n-\r\n-    } catch (err) {\r\n-      console.error('Transaction error:', err);\r\n-      toast.error('Transaction failed. Please try again.', {\r\n-        id: 'transaction',\r\n-      });\r\n-      setError(err);\r\n-    }\r\n-  };\r\n-\r\n-  // Effect to handle errors\r\n-  useEffect(() => {\r\n-    if (simulateError || writeError || waitError) {\r\n-      const errorMessage = (simulateError || writeError || waitError)?.message || 'Transaction failed';\r\n-      console.error('Transaction error:', {\r\n-        simulateError,\r\n-        writeError,\r\n-        waitError\r\n-      });\r\n-      toast.error(errorMessage);\r\n-    }\r\n-  }, [simulateError, writeError, waitError]);\r\n-\r\n-  const handleCloseModal = () => {\r\n-    setIsModalOpen(false);\r\n-  };\r\n-  return (\r\n-    \r\n-    <div className=\"min-h-screen bg-white\">\r\n-      {/* Header */}\r\n-      <div className=\"bg-[rgba(18,24,39)] bg-cover bg-no-repeat p-6 text-white\">\r\n-        <div className=\"max-w-3xl mx-auto\">\r\n-          <div className=\"flex items-center space-x-2 text-sm mb-4\">\r\n-            <span className=\"bg-blue-500 px-2 py-1 rounded\">{hashtag}</span>\r\n-            <span className=\"text-gray-400\">•</span>\r\n-            <span className=\"text-gray-400\">Institutional Grade</span>\r\n-            <span className=\"text-gray-400\">•</span>\r\n-            <span className=\"bg-green-500 px-2 py-1 rounded\">Active</span>\r\n-          </div>\r\n-          \r\n-          <h1 className=\"text-xl font-bold mb-6\">{title}</h1>\r\n-          \r\n-          <div className=\"grid grid-cols-3 gap-6\">\r\n-            <StatCard \r\n-              label=\"Variable APY\" \r\n-              value={floatingapy} \r\n-              subtext=\"Bi-annual redemption\"\r\n-            />\r\n-            <StatCard \r\n-              label=\"Minimum Investment\" \r\n-              value=\"$1\"\r\n-              subtext=\"Total capacity: $250,000\"\r\n-            />\r\n-            <StatCard \r\n-              label=\"Lock-in Period\" \r\n-              value=\"24months\"\r\n-              subtext=\"Bi-annual redemption\"\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {/* Main Content */}\r\n-      <div className=\"max-w-3xl mx-auto px-6 pb-24\">\r\n-        {/* Provider Info */}\r\n-        <div className=\"py-6 flex items-center justify-between\">\r\n-          <div className=\"flex items-center space-x-3\">\r\n-            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\r\n-              <Building2 className=\"w-6 h-6 text-gray-600\" />\r\n-            </div>\r\n-            <div>\r\n-              <p className=\"font-semibold\">Pixx Finance</p>\r\n-              <p className=\"text-sm text-gray-600\">Investment Provider</p>\r\n-            </div>\r\n-          </div>\r\n-          <div className=\"flex items-center space-x-2\">\r\n-            <BadgeCheck className=\"w-5 h-5 text-blue-600\" />\r\n-            <span className=\"text-sm text-gray-600\">Verified Provider</span>\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <DetailSection title=\"Investment Overview\">\r\n-          <div className=\"prose text-gray-700\">\r\n-            <p className=\"mb-4\">\r\n-                {description}\r\n-            </p>\r\n-            <div className={`transition-all duration-300 ${expanded ? 'h-auto' : 'h-20 overflow-hidden'}`}>\r\n-              <p className=\"mb-4\">\r\n-                This institutional-grade real estate investment opportunity provides exposure to Dubai's premium property market. The portfolio consists of carefully selected luxury properties in prime locations, managed by experienced real estate professionals.\r\n-              </p>\r\n-              <p>\r\n-                With a focus on both capital appreciation and consistent rental yields, this investment vehicle is structured to provide regular bi-annual returns while benefiting from Dubai's robust real estate market growth.\r\n-              </p>\r\n-            </div>\r\n-            <button \r\n-              onClick={() => setExpanded(!expanded)}\r\n-              className=\"flex items-center text-blue-600 space-x-1 mt-2\"\r\n-            >\r\n-              <span>{expanded ? 'Show less' : 'Read more'}</span>\r\n-              <ChevronDown className={`w-4 h-4 transition-transform ${expanded ? 'rotate-180' : ''}`} />\r\n-            </button>\r\n-          </div>\r\n-        </DetailSection>\r\n-\r\n-        <DetailSection title=\"Key Info \">\r\n-          <div className=\"grid grid-cols-2 gap-4 mb-6\">\r\n-            <StatCard \r\n-              label=\"Total Invested\" \r\n-              value=\"$5,000\"\r\n-              subtext=\"Minimum investment\"\r\n-            />\r\n-            <StatCard \r\n-              label=\"Available Capacity\" \r\n-              value=\"$250,000\"\r\n-              subtext=\"Total pool size\"\r\n-            />\r\n-            <StatCard \r\n-              label=\"Expected Returns\" \r\n-              value=\"9% APY\"\r\n-              subtext=\"Bi-annual distribution\"\r\n-            />\r\n-            <StatCard \r\n-              label=\"Lock-in Period\" \r\n-              value=\"24 months\"\r\n-              subtext=\"Bi-annual redemption available\"\r\n-            />\r\n-          </div>\r\n-        </DetailSection>\r\n-\r\n-        <DetailSection title=\"Highlights\">\r\n-          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n-            <HighlightCard\r\n-              fullWidth\r\n-              title=\"Premium Real Estate Portfolio\"\r\n-              description=\"Access institutional-grade properties in Dubai's most sought-after locations. Our portfolio consists of luxury residential and commercial properties selected for their prime positioning and strong rental demand, offering both capital appreciation and stable rental yields.\"\r\n-            />\r\n-            <HighlightCard\r\n-              title=\"Professional Management\"\r\n-              description=\"Expert property management team handles tenant selection, maintenance, and optimization of rental yields, ensuring hassle-free ownership and maximum returns.\"\r\n-            />\r\n-            <HighlightCard\r\n-              title=\"Flexible Investment\"\r\n-              description=\"Bi-annual redemption windows available after the initial 24-month lock-in period. Invest using either cryptocurrency or traditional fiat currency.\"\r\n-            />\r\n-            <HighlightCard\r\n-              title=\"Market Growth Potential\"\r\n-              description=\"Benefit from Dubai's robust real estate market, supported by strong economic fundamentals, growing population, and status as a global business hub.\"\r\n-            />\r\n-          </div>\r\n-        </DetailSection>\r\n-\r\n-        <DetailSection title=\"Payment Methods\">\r\n-          <div className=\"grid grid-cols-2 gap-6\">\r\n-            <div className=\"flex items-start space-x-3\">\r\n-              <DollarSign className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n-              <div>\r\n-                <h4 className=\"font-medium mb-1\">Fiat Currency</h4>\r\n-                <p className=\"text-sm text-gray-600\">Bank transfer, Card payments</p>\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"flex items-start space-x-3\">\r\n-              <Bitcoin className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n-              <div>\r\n-                <h4 className=\"font-medium mb-1\">Cryptocurrency</h4>\r\n-                <p className=\"text-sm text-gray-600\">BTC, ETH, USDT, USDC</p>\r\n-              </div>\r\n-            </div>\r\n-          </div>\r\n-        </DetailSection>\r\n-\r\n-        <DetailSection title=\"Key Features\">\r\n-          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n-            <div className=\"flex items-start space-x-3\">\r\n-              <Shield className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n-              <div>\r\n-                <h4 className=\"font-medium mb-1\">Institutional Grade</h4>\r\n-                <p className=\"text-sm text-gray-600\">Professional management and security</p>\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"flex items-start space-x-3\">\r\n-              <Calendar className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n-              <div>\r\n-                <h4 className=\"font-medium mb-1\">Bi-annual Redemption</h4>\r\n-                <p className=\"text-sm text-gray-600\">Flexible exit options available</p>\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"flex items-start space-x-3\">\r\n-              <Wallet className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n-              <div>\r\n-                <h4 className=\"font-medium mb-1\">Multiple Payment Options</h4>\r\n-                <p className=\"text-sm text-gray-600\">Choose between crypto and fiat</p>\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"flex items-start space-x-3\">\r\n-              <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n-              <div>\r\n-                <h4 className=\"font-medium mb-1\">Market Growth</h4>\r\n-                <p className=\"text-sm text-gray-600\">Exposure to Dubai's premium market</p>\r\n-              </div>\r\n-            </div>\r\n-          </div>\r\n-        </DetailSection>\r\n-\r\n-        {/* Documents Section */}\r\n-        <DetailSection title=\"Documents\">\r\n-          <div className=\"space-y-4\">\r\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\r\n-              <div className=\"flex items-center space-x-3\">\r\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\r\n-                <span>Investment Memorandum</span>\r\n-              </div>\r\n-              <Download className=\"w-5 h-5 text-gray-600\" />\r\n-            </button>\r\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\r\n-              <div className=\"flex items-center space-x-3\">\r\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\r\n-                <span>Property Portfolio Details</span>\r\n-              </div>\r\n-              <Download className=\"w-5 h-5 text-gray-600\" />\r\n-            </button>\r\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\r\n-              <div className=\"flex items-center space-x-3\">\r\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\r\n-                <span>Terms & Conditions</span>\r\n-              </div>\r\n-              <Download className=\"w-5 h-5 text-gray-600\" />\r\n-            </button>\r\n-          </div>\r\n-        </DetailSection>\r\n-      </div>\r\n-\r\n-      {/* Fixed Bottom CTA */}\r\n-      <div className=\"fixed bottom-10 left-0 right-0 bg-white border-t border-gray-200 p-4\">\r\n-        <div className=\"max-w-3xl mx-auto flex items-center justify-between\">\r\n-          <div>\r\n-            <p className=\"text-sm text-gray-600\">Minimum Investment</p>\r\n-            <p className=\"text-2xl font-semibold\">$1</p>\r\n-          </div>\r\n-          <button onClick={handleInvestNowClick} className=\"bg-[#d71921] text-white px-8 py-3 rounded-lg font-medium hover:bg-[#b5171a] transition-colors flex items-center space-x-2\">\r\n-            <span>Invest Now</span>\r\n-            <ArrowUpRight className=\"w-4 h-4\" />\r\n-          </button>\r\n-        </div>\r\n-        {/* Modal */}\r\n-        \r\n-<Modal isOpen={isModalOpen} onClose={handleCloseModal}>\r\n-  \r\n-\r\n-  <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\r\n-    <button\r\n-      className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\r\n-        investmentType === 'crypto'\r\n-          ? 'bg-white text-gray-900 shadow'\r\n-          : 'text-gray-600 hover:text-gray-900'\r\n-      }`}\r\n-      onClick={() => setInvestmentType('crypto')}\r\n-    >\r\n-      Invest via Stablecoin\r\n-    </button>\r\n-    <button\r\n-      className={`flex-1 py-1 text-xsm font-medium rounded-lg transition-all ${\r\n-        investmentType === 'fiat'\r\n-          ? 'bg-white text-gray-900 shadow'\r\n-          : 'text-gray-600 hover:text-gray-900'\r\n-      }`}\r\n-      onClick={() => setInvestmentType('fiat')}\r\n-    >\r\n-      Invest via Fiat Currency\r\n-    </button>\r\n-  </div>\r\n-\r\n-  {investmentType === 'crypto' ? (\r\n-    <>\r\n-      <div className=\"mt-6 p-5 bg-gray-50 rounded-xl border border-gray-200\">\r\n-        <div className=\"mb-4\">\r\n-          <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\r\n-          <div className=\"flex items-center space-x-2\">\r\n-            <Wallet className=\"w-4 h-4 text-gray-600\" />\r\n-            <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <div className=\"pt-4 border-t border-gray-200\">\r\n-          <div className=\"flex items-center justify-between\">\r\n-            <div className=\"flex items-center space-x-2\">\r\n-              <img src=\"https://imgur.com/5NgRebx.png\" alt=\"USDT\" className=\"w-6 h-6\" />\r\n-              <span className=\"text-sm text-gray-600\">USDT Balance</span>\r\n-            </div>\r\n-            <p className=\"text-sm font-medium\">\r\n-              {isLoading ? (\r\n-                <span className=\"flex items-center space-x-2\">\r\n-                  <span className=\"w-4 h-4 border-2 border-gray-300 border-t-[#d71921] rounded-full animate-spin\" />\r\n-                  <span className=\"text-gray-500\">Loading...</span>\r\n-                </span>\r\n-              ) : (\r\n-                <span className=\"font-mono\">{usdtBalance} USDT</span>\r\n-              )}\r\n-            </p>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div className=\"mt-6 relative\">\r\n-        <div className=\"relative flex items-center\">\r\n-          <input\r\n-            type=\"number\"\r\n-            min=\"5000\"\r\n-            step=\"100\"\r\n-            placeholder=\"0.00\"\r\n-            value={investmentAmount}\r\n-            onChange={(e) => setInvestmentAmount(e.target.value)}\r\n-            className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\r\n-          />\r\n-          <div className=\"absolute right-4 text-gray-400\">USDT</div>\r\n-        </div>\r\n-        <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\r\n-      </div>\r\n-\r\n-      <div className=\"mt-6\">\r\n-        <div className=\"flex justify-between mb-2\">\r\n-          <span className=\"text-sm text-gray-600\">Investment Tenure</span>\r\n-          <span className=\"text-sm font-medium\">{selectedTenure} months</span>\r\n-        </div>\r\n-        \r\n-        <div className=\"relative mb-4\">\r\n-          <input\r\n-            type=\"range\"\r\n-            min={MIN_TENURE}\r\n-            max={MAX_TENURE}\r\n-            value={selectedTenure}\r\n-            onChange={(e) => setSelectedTenure(Number(e.target.value))}\r\n-            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\r\n-          />\r\n-          <div \r\n-            className=\"absolute top-[-6px] w-1 h-4 bg-green-500\" \r\n-            style={{\r\n-              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\r\n-              transform: 'translateX(-50%)'\r\n-            }}\r\n-          />\r\n-          <div className=\"absolute top-4 text-xs text-green-600\"\r\n-            style={{\r\n-              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\r\n-              transform: 'translateX(-50%)'\r\n-            }}\r\n-          >\r\n-            Recommended\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <div className=\"p-4 bg-gray-50 rounded-xl\">\r\n-          <div className=\"flex justify-between mb-2\">\r\n-            <span className=\"text-sm text-gray-600\">Expected Return</span>\r\n-            <span className=\"text-sm font-medium\">\r\n-              {investmentAmount ? \r\n-                `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \r\n-                '-'\r\n-              }\r\n-            </span>\r\n-          </div>\r\n-          <div className=\"flex justify-between\">\r\n-            <span className=\"text-sm text-gray-600\">Annual Yield</span>\r\n-            <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <button\r\n-        onClick={handleConfirmInvestment}\r\n-        disabled={\r\n-          !investmentAmount ||\r\n-          investmentAmount < 1 ||\r\n-          Number(investmentAmount) > Number(usdtBalance) ||\r\n-          isTransactionLoading ||\r\n-          Boolean(error)\r\n-        }\r\n-        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\r\n-          investmentAmount >= 1 &&\r\n-          Number(investmentAmount) <= Number(usdtBalance) &&\r\n-          !isTransactionLoading &&\r\n-          !error\r\n-            ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\r\n-            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\r\n-        }`}\r\n-      >\r\n-        {isTransactionLoading ? (\r\n-          <div className=\"flex items-center justify-center space-x-2\">\r\n-            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n-            <span>Processing Transaction...</span>\r\n-          </div>\r\n-        ) : error ? (\r\n-          'Transaction Failed - Try Again'\r\n-        ) : !investmentAmount ? (\r\n-          'Enter Investment Amount'\r\n-        ) : Number(investmentAmount) < 1 ? (\r\n-          'Minimum $1 Required'\r\n-        ) : Number(investmentAmount) > Number(usdtBalance) ? (\r\n-          'Insufficient Balance'\r\n-        ) : (\r\n-          'Confirm Investment'\r\n-        )}\r\n-      </button>\r\n-    </>\r\n-  ) : (\r\n-    <div className=\"py-12 px-4 text-center\">\r\n-      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n-      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\r\n-      <p className=\"text-sm text-gray-600 max-w-sm mx-auto\">\r\n-        Thorough compliance checks are required to enable investments through your local currency.\r\n-      </p>\r\n-    </div>\r\n-  )}\r\n-</Modal>\r\n-<BottomNavigation />\r\n-      </div>\r\n-\r\n-      {/* Add Transaction Receipt */}\r\n-      <TransactionReceipt\r\n-        isOpen={showReceipt}\r\n-        onClose={() => setShowReceipt(false)}\r\n-        transaction={transactionDetails}\r\n-        investment={{\r\n-          title,\r\n-          assetType: \"Real Estate\",\r\n-          amount: investmentAmount,\r\n-          floatingapy,\r\n-          tenure: selectedTenure\r\n-        }}\r\n-      />\r\n-    </div>\r\n-  );\r\n+import React, { useState, useEffect, useCallback } from 'react';\n+import Modal from '../components/Modal';\n+import ConnectButton from '../ConnectButton';\n+import { useAppKit } from '@reown/appkit/react';\n+import BottomNavigation from '../components/BottomNavigation';\n+import { useAccount } from 'wagmi';\n+import { useLocation } from 'react-router-dom';\n+import { ethers } from 'ethers';\n+import axios from 'axios';\n+import { \n+  ChevronDown, \n+  ArrowUpRight, \n+  FileText, \n+  Shield, \n+  Building2, \n+  Calendar,\n+  TrendingUp,\n+  Wallet,\n+  Clock,\n+  BadgeCheck,\n+  Download,\n+  DollarSign,\n+  Bitcoin\n+} from 'lucide-react';\n+import { parseUnits } from 'viem';\n+import { \n+  useWriteContract,\n+  useWaitForTransactionReceipt,\n+  useSimulateContract\n+} from 'wagmi';\n+import TransactionReceipt from '../components/TransactionReceipt';\n+import toast from 'react-hot-toast';\n+\n+const DetailSection = ({ title, children }) => (\n+  <div className=\"border-b border-gray-200 py-6\">\n+    <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n+    {children}\n+  </div>\n+);\n+const BSC_SCAN_API_KEY = 'GH8RED93CMI9YPHPW9WDJFKJ27G3EU475T';\n+const USDT_CONTRACT_ADDRESSES = {\n+  mainnet: '0x55d398326f99059fF775485246999027B3197955',\n+  testnet: '0x53A5E28C96c5c886A56711021fFCA19650D20bBf'\n+};\n+\n+const BSC_SCAN_ENDPOINTS = {\n+  mainnet: 'https://api.bscscan.com/api',\n+  testnet: 'https://api-testnet.bscscan.com/api'\n+};\n+\n+const USDT_ABI = [\n+  'function transfer(address to, uint256 value) returns (bool)',\n+  'function balanceOf(address) view returns (uint256)',\n+  'function decimals() view returns (uint8)',\n+  'function approve(address spender, uint256 value) returns (bool)'\n+];\n+\n+const StatCard = ({ label, value, subtext }) => (\n+  <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\n+    <p className=\"text-sm text-white-900 mb-1\">{label}</p>\n+    <p className=\"text-l font-semibold mb-1\">{value}</p>\n+    \n+  </div>\n+);\n+\n+const HighlightCard = ({ title, description, fullWidth }) => (\n+    <div className={`bg-gray-900 text-white p-8 rounded-2xl ${fullWidth ? 'col-span-full' : ''}`}>\n+      <h3 className=\"text-xl font-serif mb-4 text-cream\">{title}</h3>\n+      <p className=\"text-gray-300\">{description}</p>\n+    </div>\n+  );\n+\n+const USDT_RECIPIENT = process.env.REACT_APP_USDT_RECIPIENT;\n+\n+export default function InvestmentDetail() {\n+  const location = useLocation();\n+  const [investmentAmount, setInvestmentAmount] = useState('');\n+  const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\n+  const [expanded, setExpanded] = useState(false);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const { connectStatus, walletBalances } = useAppKit();\n+  const { address, isConnected } = useAccount();\n+  const [showAccountDetails, setShowAccountDetails] = useState(false);\n+  const [usdtBalance, setUsdtBalance] = useState('0.00');\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [investmentType, setInvestmentType] = useState('crypto'); // 'crypto' or 'fiat'\n+  // Add these near the top of InvestmentDetail component\n+const [selectedTenure, setSelectedTenure] = useState(24);\n+const MIN_TENURE = 3;\n+const MAX_TENURE = 24;\n+const RECOMMENDED_TENURE = 14;\n+const ANNUAL_RATE = parseFloat(floatingapy.replace('%', '')) / 100;// 9% APY\n+\n+// Add this helper function\n+const calculateExpectedReturn = (amount, tenure) => {\n+  if (!amount) return 0;\n+  const monthlyRate = ANNUAL_RATE / 12;\n+  return (amount * (1 + monthlyRate * tenure)).toFixed(2);\n+};\n+\n+  \n+  useEffect(() => {\n+    if (isConnected) {\n+      setShowAccountDetails(true);\n+    }\n+  }, [isConnected]);\n+\n+  const handleInvestNowClick = () => {\n+    setIsModalOpen(true);\n+  };\n+  // Add this useEffect to fetch balance when address changes\n+  useEffect(() => {\n+    const fetchUSDTBalance = async () => {\n+      if (!address || !isConnected) return;\n+\n+      setIsLoading(true);\n+      try {\n+        const networkType = window.ethereum.networkVersion === '97' ? 'testnet' : 'mainnet';\n+        const response = await axios.get(\n+          `${BSC_SCAN_ENDPOINTS[networkType]}?module=account&action=tokenbalance&contractaddress=${USDT_CONTRACT_ADDRESSES[networkType]}&address=${address}&tag=latest&apikey=${BSC_SCAN_API_KEY}`\n+        );\n+\n+        const balance = response.data.result;\n+        if (balance) {\n+          // Convert balance to human-readable format (USDT has 18 decimals)\n+          setUsdtBalance((parseFloat(balance) / 10 ** 18).toFixed(2));\n+        } else {\n+          console.error('Failed to fetch balance:', response.data.message);\n+        }\n+      } catch (error) {\n+        console.error('Error fetching USDT balance:', error);\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    fetchUSDTBalance();\n+  }, [address, isConnected]);\n+\n+  const [showReceipt, setShowReceipt] = useState(false);\n+  const [transactionDetails, setTransactionDetails] = useState(null);\n+\n+  // Add error state\n+  const [error, setError] = useState(null);\n+\n+  // Update simulate contract with error handling\n+  const { data: simulateData, error: simulateError } = useSimulateContract({\n+    address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\n+    abi: USDT_ABI,\n+    functionName: 'transfer',\n+    args: [\n+      USDT_RECIPIENT,\n+      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\n+    ],\n+    enabled: Boolean(investmentAmount && investmentAmount >= 1),\n+    onError(err) {\n+      console.error('Simulation error:', err);\n+      setError(err);\n+    }\n+  });\n+\n+  // Update contract write with loading and error states\n+  const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\n+    onError(err) {\n+      console.error('Write contract error:', err);\n+      toast.error('Transaction failed. Please try again.');\n+      setError(err);\n+    }\n+  });\n+\n+  // Enhanced transaction receipt handling\n+  const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\n+    hash: simulateData?.hash,\n+    onSuccess(data) {\n+      console.log('Transaction successful:', data);\n+      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n+      const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\n+      \n+      const txDetails = {\n+        hash: data.transactionHash,\n+        from: address,\n+        to: USDT_RECIPIENT,\n+        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n+        explorer: explorerUrl,\n+        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\n+      };\n+\n+      console.log('Transaction details:', txDetails);\n+      setTransactionDetails(txDetails);\n+      \n+      setShowReceipt(true);\n+      setIsModalOpen(false);\n+      toast.success('Investment successful!');\n+    },\n+    onError(err) {\n+      console.error('Transaction wait error:', err);\n+      toast.error('Transaction failed while processing');\n+      setError(err);\n+    }\n+  });\n+\n+  // Enhanced investment handler with proper error handling\n+  const handleConfirmInvestment = async () => {\n+    try {\n+      setError(null);\n+      \n+      if (!simulateData?.request) {\n+        console.error('Simulation data not available');\n+        toast.error('Unable to process transaction. Please try again.');\n+        return;\n+      }\n+\n+      console.log('Starting transaction with data:', {\n+        amount: investmentAmount,\n+        recipient: USDT_RECIPIENT,\n+        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'\n+      });\n+\n+      toast.loading('Processing your investment...', {\n+        id: 'transaction',\n+      });\n+\n+      await writeContract(simulateData.request);\n+\n+    } catch (err) {\n+      console.error('Transaction error:', err);\n+      toast.error('Transaction failed. Please try again.', {\n+        id: 'transaction',\n+      });\n+      setError(err);\n+    }\n+  };\n+\n+  // Effect to handle errors\n+  useEffect(() => {\n+    if (simulateError || writeError || waitError) {\n+      const errorMessage = (simulateError || writeError || waitError)?.message || 'Transaction failed';\n+      console.error('Transaction error:', {\n+        simulateError,\n+        writeError,\n+        waitError\n+      });\n+      toast.error(errorMessage);\n+    }\n+  }, [simulateError, writeError, waitError]);\n+\n+  const handleCloseModal = () => {\n+    setIsModalOpen(false);\n+  };\n+  return (\n+    \n+    <div className=\"min-h-screen bg-white\">\n+      {/* Header */}\n+      <div className=\"bg-[rgba(18,24,39)] bg-cover bg-no-repeat p-6 text-white\">\n+        <div className=\"max-w-3xl mx-auto\">\n+          <div className=\"flex items-center space-x-2 text-sm mb-4\">\n+            <span className=\"bg-blue-500 px-2 py-1 rounded\">{hashtag}</span>\n+            <span className=\"text-gray-400\">•</span>\n+            <span className=\"text-gray-400\">Institutional Grade</span>\n+            <span className=\"text-gray-400\">•</span>\n+            <span className=\"bg-green-500 px-2 py-1 rounded\">Active</span>\n+          </div>\n+          \n+          <h1 className=\"text-xl font-bold mb-6\">{title}</h1>\n+          \n+          <div className=\"grid grid-cols-3 gap-6\">\n+            <StatCard \n+              label=\"Variable APY\" \n+              value={floatingapy} \n+              subtext=\"Bi-annual redemption\"\n+            />\n+            <StatCard \n+              label=\"Minimum Investment\" \n+              value=\"$1\"\n+              subtext=\"Total capacity: $250,000\"\n+            />\n+            <StatCard \n+              label=\"Lock-in Period\" \n+              value=\"24months\"\n+              subtext=\"Bi-annual redemption\"\n+            />\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Main Content */}\n+      <div className=\"max-w-3xl mx-auto px-6 pb-24\">\n+        {/* Provider Info */}\n+        <div className=\"py-6 flex items-center justify-between\">\n+          <div className=\"flex items-center space-x-3\">\n+            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n+              <Building2 className=\"w-6 h-6 text-gray-600\" />\n+            </div>\n+            <div>\n+              <p className=\"font-semibold\">Pixx Finance</p>\n+              <p className=\"text-sm text-gray-600\">Investment Provider</p>\n+            </div>\n+          </div>\n+          <div className=\"flex items-center space-x-2\">\n+            <BadgeCheck className=\"w-5 h-5 text-blue-600\" />\n+            <span className=\"text-sm text-gray-600\">Verified Provider</span>\n+          </div>\n+        </div>\n+\n+        <DetailSection title=\"Investment Overview\">\n+          <div className=\"prose text-gray-700\">\n+            <p className=\"mb-4\">\n+                {description}\n+            </p>\n+            <div className={`transition-all duration-300 ${expanded ? 'h-auto' : 'h-20 overflow-hidden'}`}>\n+              <p className=\"mb-4\">\n+                This institutional-grade real estate investment opportunity provides exposure to Dubai's premium property market. The portfolio consists of carefully selected luxury properties in prime locations, managed by experienced real estate professionals.\n+              </p>\n+              <p>\n+                With a focus on both capital appreciation and consistent rental yields, this investment vehicle is structured to provide regular bi-annual returns while benefiting from Dubai's robust real estate market growth.\n+              </p>\n+            </div>\n+            <button \n+              onClick={() => setExpanded(!expanded)}\n+              className=\"flex items-center text-blue-600 space-x-1 mt-2\"\n+            >\n+              <span>{expanded ? 'Show less' : 'Read more'}</span>\n+              <ChevronDown className={`w-4 h-4 transition-transform ${expanded ? 'rotate-180' : ''}`} />\n+            </button>\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Key Info \">\n+          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n+            <StatCard \n+              label=\"Total Invested\" \n+              value=\"$5,000\"\n+              subtext=\"Minimum investment\"\n+            />\n+            <StatCard \n+              label=\"Available Capacity\" \n+              value=\"$250,000\"\n+              subtext=\"Total pool size\"\n+            />\n+            <StatCard \n+              label=\"Expected Returns\" \n+              value=\"9% APY\"\n+              subtext=\"Bi-annual distribution\"\n+            />\n+            <StatCard \n+              label=\"Lock-in Period\" \n+              value=\"24 months\"\n+              subtext=\"Bi-annual redemption available\"\n+            />\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Highlights\">\n+          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+            <HighlightCard\n+              fullWidth\n+              title=\"Premium Real Estate Portfolio\"\n+              description=\"Access institutional-grade properties in Dubai's most sought-after locations. Our portfolio consists of luxury residential and commercial properties selected for their prime positioning and strong rental demand, offering both capital appreciation and stable rental yields.\"\n+            />\n+            <HighlightCard\n+              title=\"Professional Management\"\n+              description=\"Expert property management team handles tenant selection, maintenance, and optimization of rental yields, ensuring hassle-free ownership and maximum returns.\"\n+            />\n+            <HighlightCard\n+              title=\"Flexible Investment\"\n+              description=\"Bi-annual redemption windows available after the initial 24-month lock-in period. Invest using either cryptocurrency or traditional fiat currency.\"\n+            />\n+            <HighlightCard\n+              title=\"Market Growth Potential\"\n+              description=\"Benefit from Dubai's robust real estate market, supported by strong economic fundamentals, growing population, and status as a global business hub.\"\n+            />\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Payment Methods\">\n+          <div className=\"grid grid-cols-2 gap-6\">\n+            <div className=\"flex items-start space-x-3\">\n+              <DollarSign className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Fiat Currency</h4>\n+                <p className=\"text-sm text-gray-600\">Bank transfer, Card payments</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Bitcoin className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Cryptocurrency</h4>\n+                <p className=\"text-sm text-gray-600\">BTC, ETH, USDT, USDC</p>\n+              </div>\n+            </div>\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Key Features\">\n+          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n+            <div className=\"flex items-start space-x-3\">\n+              <Shield className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Institutional Grade</h4>\n+                <p className=\"text-sm text-gray-600\">Professional management and security</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Calendar className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Bi-annual Redemption</h4>\n+                <p className=\"text-sm text-gray-600\">Flexible exit options available</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Wallet className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Multiple Payment Options</h4>\n+                <p className=\"text-sm text-gray-600\">Choose between crypto and fiat</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Market Growth</h4>\n+                <p className=\"text-sm text-gray-600\">Exposure to Dubai's premium market</p>\n+              </div>\n+            </div>\n+          </div>\n+        </DetailSection>\n+\n+        {/* Documents Section */}\n+        <DetailSection title=\"Documents\">\n+          <div className=\"space-y-4\">\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Investment Memorandum</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Property Portfolio Details</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Terms & Conditions</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+          </div>\n+        </DetailSection>\n+      </div>\n+\n+      {/* Fixed Bottom CTA */}\n+      <div className=\"fixed bottom-10 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n+        <div className=\"max-w-3xl mx-auto flex items-center justify-between\">\n+          <div>\n+            <p className=\"text-sm text-gray-600\">Minimum Investment</p>\n+            <p className=\"text-2xl font-semibold\">$1</p>\n+          </div>\n+          <button onClick={handleInvestNowClick} className=\"bg-[#d71921] text-white px-8 py-3 rounded-lg font-medium hover:bg-[#b5171a] transition-colors flex items-center space-x-2\">\n+            <span>Invest Now</span>\n+            <ArrowUpRight className=\"w-4 h-4\" />\n+          </button>\n+        </div>\n+        {/* Modal */}\n+        \n+<Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n+  \n+\n+  <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\n+    <button\n+      className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\n+        investmentType === 'crypto'\n+          ? 'bg-white text-gray-900 shadow'\n+          : 'text-gray-600 hover:text-gray-900'\n+      }`}\n+      onClick={() => setInvestmentType('crypto')}\n+    >\n+      Invest via Stablecoin\n+    </button>\n+    <button\n+      className={`flex-1 py-1 text-xsm font-medium rounded-lg transition-all ${\n+        investmentType === 'fiat'\n+          ? 'bg-white text-gray-900 shadow'\n+          : 'text-gray-600 hover:text-gray-900'\n+      }`}\n+      onClick={() => setInvestmentType('fiat')}\n+    >\n+      Invest via Fiat Currency\n+    </button>\n+  </div>\n+\n+  {investmentType === 'crypto' ? (\n+    <>\n+      <div className=\"mt-6 p-5 bg-gray-50 rounded-xl border border-gray-200\">\n+        <div className=\"mb-4\">\n+          <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\n+          <div className=\"flex items-center space-x-2\">\n+            <Wallet className=\"w-4 h-4 text-gray-600\" />\n+            <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\n+          </div>\n+        </div>\n+\n+        <div className=\"pt-4 border-t border-gray-200\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center space-x-2\">\n+              <img src=\"https://imgur.com/5NgRebx.png\" alt=\"USDT\" className=\"w-6 h-6\" />\n+              <span className=\"text-sm text-gray-600\">USDT Balance</span>\n+            </div>\n+            <p className=\"text-sm font-medium\">\n+              {isLoading ? (\n+                <span className=\"flex items-center space-x-2\">\n+                  <span className=\"w-4 h-4 border-2 border-gray-300 border-t-[#d71921] rounded-full animate-spin\" />\n+                  <span className=\"text-gray-500\">Loading...</span>\n+                </span>\n+              ) : (\n+                <span className=\"font-mono\">{usdtBalance} USDT</span>\n+              )}\n+            </p>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <div className=\"mt-6 relative\">\n+        <div className=\"relative flex items-center\">\n+          <input\n+            type=\"number\"\n+            min=\"5000\"\n+            step=\"100\"\n+            placeholder=\"0.00\"\n+            value={investmentAmount}\n+            onChange={(e) => setInvestmentAmount(e.target.value)}\n+            className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\n+          />\n+          <div className=\"absolute right-4 text-gray-400\">USDT</div>\n+        </div>\n+        <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\n+      </div>\n+\n+      <div className=\"mt-6\">\n+        <div className=\"flex justify-between mb-2\">\n+          <span className=\"text-sm text-gray-600\">Investment Tenure</span>\n+          <span className=\"text-sm font-medium\">{selectedTenure} months</span>\n+        </div>\n+        \n+        <div className=\"relative mb-4\">\n+          <input\n+            type=\"range\"\n+            min={MIN_TENURE}\n+            max={MAX_TENURE}\n+            value={selectedTenure}\n+            onChange={(e) => setSelectedTenure(Number(e.target.value))}\n+            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n+          />\n+          <div \n+            className=\"absolute top-[-6px] w-1 h-4 bg-green-500\" \n+            style={{\n+              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n+              transform: 'translateX(-50%)'\n+            }}\n+          />\n+          <div className=\"absolute top-4 text-xs text-green-600\"\n+            style={{\n+              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n+              transform: 'translateX(-50%)'\n+            }}\n+          >\n+            Recommended\n+          </div>\n+        </div>\n+\n+        <div className=\"p-4 bg-gray-50 rounded-xl\">\n+          <div className=\"flex justify-between mb-2\">\n+            <span className=\"text-sm text-gray-600\">Expected Return</span>\n+            <span className=\"text-sm font-medium\">\n+              {investmentAmount ? \n+                `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \n+                '-'\n+              }\n+            </span>\n+          </div>\n+          <div className=\"flex justify-between\">\n+            <span className=\"text-sm text-gray-600\">Annual Yield</span>\n+            <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <button\n+        onClick={handleConfirmInvestment}\n+        disabled={\n+          !investmentAmount ||\n+          investmentAmount < 1 ||\n+          Number(investmentAmount) > Number(usdtBalance) ||\n+          isTransactionLoading ||\n+          Boolean(error)\n+        }\n+        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\n+          investmentAmount >= 1 &&\n+          Number(investmentAmount) <= Number(usdtBalance) &&\n+          !isTransactionLoading &&\n+          !error\n+            ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\n+            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n+        }`}\n+      >\n+        {isTransactionLoading ? (\n+          <div className=\"flex items-center justify-center space-x-2\">\n+            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n+            <span>Processing Transaction...</span>\n+          </div>\n+        ) : error ? (\n+          'Transaction Failed - Try Again'\n+        ) : !investmentAmount ? (\n+          'Enter Investment Amount'\n+        ) : Number(investmentAmount) < 1 ? (\n+          'Minimum $1 Required'\n+        ) : Number(investmentAmount) > Number(usdtBalance) ? (\n+          'Insufficient Balance'\n+        ) : (\n+          'Confirm Investment'\n+        )}\n+      </button>\n+    </>\n+  ) : (\n+    <div className=\"py-12 px-4 text-center\">\n+      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n+      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\n+      <p className=\"text-sm text-gray-600 max-w-sm mx-auto\">\n+        Thorough compliance checks are required to enable investments through your local currency.\n+      </p>\n+    </div>\n+  )}\n+</Modal>\n+<BottomNavigation />\n+      </div>\n+\n+      {/* Add Transaction Receipt */}\n+      <TransactionReceipt\n+        isOpen={showReceipt}\n+        onClose={() => setShowReceipt(false)}\n+        transaction={transactionDetails}\n+        investment={{\n+          title,\n+          assetType: \"Real Estate\",\n+          amount: investmentAmount,\n+          floatingapy,\n+          tenure: selectedTenure\n+        }}\n+      />\n+    </div>\n+  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733942825134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n   useSimulateContract\n } from 'wagmi';\n import TransactionReceipt from '../components/TransactionReceipt';\n import toast from 'react-hot-toast';\n+import { Toaster } from 'react-hot-toast';\n \n const DetailSection = ({ title, children }) => (\n   <div className=\"border-b border-gray-200 py-6\">\n     <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n@@ -71,8 +72,26 @@\n   );\n \n const USDT_RECIPIENT = process.env.REACT_APP_USDT_RECIPIENT;\n \n+// Add this helper function for better error messages\n+const getErrorMessage = (error) => {\n+  if (!error) return 'Transaction failed';\n+  \n+  // Handle common errors\n+  if (error.message?.includes('insufficient funds')) {\n+    return 'Insufficient funds to cover gas fees';\n+  }\n+  if (error.message?.includes('user rejected')) {\n+    return 'Transaction was rejected';\n+  }\n+  if (error.message?.includes('allowance')) {\n+    return 'Please approve USDT spending first';\n+  }\n+  \n+  return error.message || 'Transaction failed';\n+};\n+\n export default function InvestmentDetail() {\n   const location = useLocation();\n   const [investmentAmount, setInvestmentAmount] = useState('');\n   const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\n@@ -142,9 +161,9 @@\n \n   // Add error state\n   const [error, setError] = useState(null);\n \n-  // Update simulate contract with error handling\n+  // Update simulate contract with better error handling\n   const { data: simulateData, error: simulateError } = useSimulateContract({\n     address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\n     abi: USDT_ABI,\n     functionName: 'transfer',\n@@ -154,8 +173,11 @@\n     ],\n     enabled: Boolean(investmentAmount && investmentAmount >= 1),\n     onError(err) {\n       console.error('Simulation error:', err);\n+      toast.error(getErrorMessage(err), {\n+        id: 'simulation-error',\n+      });\n       setError(err);\n     }\n   });\n \n@@ -167,13 +189,63 @@\n       setError(err);\n     }\n   });\n \n-  // Enhanced transaction receipt handling\n+  // Enhanced investment handler with better error handling and loading states\n+  const handleConfirmInvestment = async () => {\n+    try {\n+      setError(null);\n+      \n+      if (!simulateData?.request) {\n+        console.error('Simulation data not available');\n+        toast.error('Unable to process transaction. Please try again.', {\n+          id: 'simulation-error',\n+        });\n+        return;\n+      }\n+\n+      console.log('Starting transaction with data:', {\n+        amount: investmentAmount,\n+        recipient: USDT_RECIPIENT,\n+        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'\n+      });\n+\n+      // Show initial processing toast\n+      toast.loading('Preparing transaction...', {\n+        id: 'transaction',\n+      });\n+\n+      // Update toast to show approval status\n+      toast.loading('Waiting for wallet approval...', {\n+        id: 'transaction',\n+      });\n+\n+      await writeContract(simulateData.request);\n+\n+      // Update toast to show transaction processing\n+      toast.loading('Processing transaction...', {\n+        id: 'transaction',\n+      });\n+\n+    } catch (err) {\n+      console.error('Transaction error:', err);\n+      toast.error(getErrorMessage(err), {\n+        id: 'transaction',\n+      });\n+      setError(err);\n+    }\n+  };\n+\n+  // Update transaction receipt handling with better success feedback\n   const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\n     hash: simulateData?.hash,\n     onSuccess(data) {\n       console.log('Transaction successful:', data);\n+      \n+      // Clear any existing error toasts\n+      toast.dismiss('transaction');\n+      toast.dismiss('simulation-error');\n+\n       const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n       const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\n       \n       const txDetails = {\n@@ -189,48 +261,48 @@\n       setTransactionDetails(txDetails);\n       \n       setShowReceipt(true);\n       setIsModalOpen(false);\n-      toast.success('Investment successful!');\n+\n+      // Show success toast with transaction details\n+      toast.success(\n+        <div>\n+          <p className=\"font-medium\">Investment Successful! 🎉</p>\n+          <p className=\"text-sm text-gray-500\">Amount: {investmentAmount} USDT</p>\n+          <a \n+            href={`${explorerUrl}/tx/${data.transactionHash}`}\n+            target=\"_blank\"\n+            rel=\"noopener noreferrer\"\n+            className=\"text-sm text-blue-500 hover:text-blue-600\"\n+          >\n+            View on Explorer →\n+          </a>\n+        </div>,\n+        {\n+          duration: 5000,\n+          style: {\n+            minWidth: '300px',\n+          },\n+        }\n+      );\n     },\n     onError(err) {\n       console.error('Transaction wait error:', err);\n-      toast.error('Transaction failed while processing');\n+      toast.error(getErrorMessage(err), {\n+        id: 'transaction',\n+      });\n       setError(err);\n     }\n   });\n \n-  // Enhanced investment handler with proper error handling\n-  const handleConfirmInvestment = async () => {\n-    try {\n-      setError(null);\n-      \n-      if (!simulateData?.request) {\n-        console.error('Simulation data not available');\n-        toast.error('Unable to process transaction. Please try again.');\n-        return;\n-      }\n-\n-      console.log('Starting transaction with data:', {\n-        amount: investmentAmount,\n-        recipient: USDT_RECIPIENT,\n-        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'\n-      });\n-\n-      toast.loading('Processing your investment...', {\n+  // Add this effect to handle loading state toasts\n+  useEffect(() => {\n+    if (isTransactionLoading) {\n+      toast.loading('Processing transaction...', {\n         id: 'transaction',\n       });\n-\n-      await writeContract(simulateData.request);\n-\n-    } catch (err) {\n-      console.error('Transaction error:', err);\n-      toast.error('Transaction failed. Please try again.', {\n-        id: 'transaction',\n-      });\n-      setError(err);\n     }\n-  };\n+  }, [isTransactionLoading]);\n \n   // Effect to handle errors\n   useEffect(() => {\n     if (simulateError || writeError || waitError) {\n@@ -611,9 +683,12 @@\n             <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n             <span>Processing Transaction...</span>\n           </div>\n         ) : error ? (\n-          'Transaction Failed - Try Again'\n+          <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n+            <span>⚠️</span>\n+            <span>{getErrorMessage(error)}</span>\n+          </div>\n         ) : !investmentAmount ? (\n           'Enter Investment Amount'\n         ) : Number(investmentAmount) < 1 ? (\n           'Minimum $1 Required'\n"
                },
                {
                    "date": 1733943345747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,12 +49,42 @@\n   testnet: 'https://api-testnet.bscscan.com/api'\n };\n \n const USDT_ABI = [\n-  'function transfer(address to, uint256 value) returns (bool)',\n-  'function balanceOf(address) view returns (uint256)',\n-  'function decimals() view returns (uint8)',\n-  'function approve(address spender, uint256 value) returns (bool)'\n+  {\n+    name: 'transfer',\n+    type: 'function',\n+    stateMutability: 'nonpayable',\n+    inputs: [\n+      { name: 'to', type: 'address' },\n+      { name: 'value', type: 'uint256' }\n+    ],\n+    outputs: [{ name: '', type: 'bool' }]\n+  },\n+  {\n+    name: 'balanceOf',\n+    type: 'function',\n+    stateMutability: 'view',\n+    inputs: [{ name: 'account', type: 'address' }],\n+    outputs: [{ name: '', type: 'uint256' }]\n+  },\n+  {\n+    name: 'decimals',\n+    type: 'function',\n+    stateMutability: 'view',\n+    inputs: [],\n+    outputs: [{ name: '', type: 'uint8' }]\n+  },\n+  {\n+    name: 'approve',\n+    type: 'function',\n+    stateMutability: 'nonpayable',\n+    inputs: [\n+      { name: 'spender', type: 'address' },\n+      { name: 'value', type: 'uint256' }\n+    ],\n+    outputs: [{ name: '', type: 'bool' }]\n+  }\n ];\n \n const StatCard = ({ label, value, subtext }) => (\n   <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\n@@ -170,9 +200,9 @@\n     args: [\n       USDT_RECIPIENT,\n       investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\n     ],\n-    enabled: Boolean(investmentAmount && investmentAmount >= 1),\n+    enabled: Boolean(investmentAmount && investmentAmount >= 1 && address),\n     onError(err) {\n       console.error('Simulation error:', err);\n       toast.error(getErrorMessage(err), {\n         id: 'simulation-error',\n@@ -180,8 +210,19 @@\n       setError(err);\n     }\n   });\n \n+  // Add logging to debug contract interaction\n+  useEffect(() => {\n+    if (simulateData) {\n+      console.log('Simulation data:', simulateData);\n+      console.log('Contract address:', USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']);\n+      console.log('Network:', window.ethereum?.networkVersion);\n+      console.log('Recipient:', USDT_RECIPIENT);\n+      console.log('Amount:', investmentAmount);\n+    }\n+  }, [simulateData, investmentAmount]);\n+\n   // Update contract write with loading and error states\n   const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\n     onError(err) {\n       console.error('Write contract error:', err);\n@@ -194,10 +235,20 @@\n   const handleConfirmInvestment = async () => {\n     try {\n       setError(null);\n       \n+      if (!address) {\n+        toast.error('Please connect your wallet first');\n+        return;\n+      }\n+\n       if (!simulateData?.request) {\n-        console.error('Simulation data not available');\n+        console.error('Simulation data not available', {\n+          address,\n+          recipient: USDT_RECIPIENT,\n+          amount: investmentAmount,\n+          network: window.ethereum?.networkVersion\n+        });\n         toast.error('Unable to process transaction. Please try again.', {\n           id: 'simulation-error',\n         });\n         return;\n@@ -205,28 +256,18 @@\n \n       console.log('Starting transaction with data:', {\n         amount: investmentAmount,\n         recipient: USDT_RECIPIENT,\n-        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'\n+        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet',\n+        simulateData: simulateData.request\n       });\n \n-      // Show initial processing toast\n       toast.loading('Preparing transaction...', {\n         id: 'transaction',\n       });\n \n-      // Update toast to show approval status\n-      toast.loading('Waiting for wallet approval...', {\n-        id: 'transaction',\n-      });\n-\n       await writeContract(simulateData.request);\n \n-      // Update toast to show transaction processing\n-      toast.loading('Processing transaction...', {\n-        id: 'transaction',\n-      });\n-\n     } catch (err) {\n       console.error('Transaction error:', err);\n       toast.error(getErrorMessage(err), {\n         id: 'transaction',\n"
                },
                {
                    "date": 1733944005498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       <p className=\"text-gray-300\">{description}</p>\n     </div>\n   );\n \n-const USDT_RECIPIENT = process.env.REACT_APP_USDT_RECIPIENT;\n+const USDT_RECIPIENT = import.meta.env.VITE_USDT_RECIPIENT;\n \n // Add this helper function for better error messages\n const getErrorMessage = (error) => {\n   if (!error) return 'Transaction failed';\n@@ -116,8 +116,14 @@\n   }\n   if (error.message?.includes('allowance')) {\n     return 'Please approve USDT spending first';\n   }\n+  if (error.message?.includes('invalid address')) {\n+    return 'Invalid recipient address. Please try again.';\n+  }\n+  if (!USDT_RECIPIENT) {\n+    return 'Configuration error: Recipient address not set';\n+  }\n   \n   return error.message || 'Transaction failed';\n };\n \n@@ -200,11 +206,16 @@\n     args: [\n       USDT_RECIPIENT,\n       investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\n     ],\n-    enabled: Boolean(investmentAmount && investmentAmount >= 1 && address),\n+    enabled: Boolean(investmentAmount && investmentAmount >= 1 && address && USDT_RECIPIENT),\n     onError(err) {\n-      console.error('Simulation error:', err);\n+      console.error('Simulation error:', {\n+        error: err,\n+        recipient: USDT_RECIPIENT,\n+        amount: investmentAmount,\n+        address\n+      });\n       toast.error(getErrorMessage(err), {\n         id: 'simulation-error',\n       });\n       setError(err);\n@@ -240,8 +251,14 @@\n         toast.error('Please connect your wallet first');\n         return;\n       }\n \n+      if (!USDT_RECIPIENT) {\n+        console.error('USDT recipient address not configured');\n+        toast.error('Configuration error: Recipient address not set');\n+        return;\n+      }\n+\n       if (!simulateData?.request) {\n         console.error('Simulation data not available', {\n           address,\n           recipient: USDT_RECIPIENT,\n@@ -359,8 +376,18 @@\n \n   const handleCloseModal = () => {\n     setIsModalOpen(false);\n   };\n+\n+  // Add this for debugging\n+  useEffect(() => {\n+    console.log('Environment variables:', {\n+      USDT_RECIPIENT,\n+      networkVersion: window.ethereum?.networkVersion,\n+      contractAddress: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']\n+    });\n+  }, []);\n+\n   return (\n     \n     <div className=\"min-h-screen bg-white\">\n       {/* Header */}\n"
                },
                {
                    "date": 1733944567691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,798 @@\n+import React, { useState, useEffect, useCallback } from 'react';\n+import Modal from '../components/Modal';\n+import ConnectButton from '../ConnectButton';\n+import { useAppKit } from '@reown/appkit/react';\n+import BottomNavigation from '../components/BottomNavigation';\n+import { useAccount } from 'wagmi';\n+import { useLocation } from 'react-router-dom';\n+import { ethers } from 'ethers';\n+import axios from 'axios';\n+import { \n+  ChevronDown, \n+  ArrowUpRight, \n+  FileText, \n+  Shield, \n+  Building2, \n+  Calendar,\n+  TrendingUp,\n+  Wallet,\n+  Clock,\n+  BadgeCheck,\n+  Download,\n+  DollarSign,\n+  Bitcoin\n+} from 'lucide-react';\n+import { parseUnits } from 'viem';\n+import { \n+  useWriteContract,\n+  useWaitForTransactionReceipt,\n+  useSimulateContract\n+} from 'wagmi';\n+import TransactionReceipt from '../components/TransactionReceipt';\n+import toast from 'react-hot-toast';\n+import { Toaster } from 'react-hot-toast';\n+\n+const DetailSection = ({ title, children }) => (\n+  <div className=\"border-b border-gray-200 py-6\">\n+    <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n+    {children}\n+  </div>\n+);\n+const BSC_SCAN_API_KEY = 'GH8RED93CMI9YPHPW9WDJFKJ27G3EU475T';\n+const USDT_CONTRACT_ADDRESSES = {\n+  mainnet: '0x55d398326f99059fF775485246999027B3197955',\n+  testnet: '0x53A5E28C96c5c886A56711021fFCA19650D20bBf'\n+};\n+\n+const BSC_SCAN_ENDPOINTS = {\n+  mainnet: 'https://api.bscscan.com/api',\n+  testnet: 'https://api-testnet.bscscan.com/api'\n+};\n+\n+const USDT_ABI = [\n+  {\n+    name: 'transfer',\n+    type: 'function',\n+    stateMutability: 'nonpayable',\n+    inputs: [\n+      { name: 'to', type: 'address' },\n+      { name: 'value', type: 'uint256' }\n+    ],\n+    outputs: [{ name: '', type: 'bool' }]\n+  },\n+  {\n+    name: 'balanceOf',\n+    type: 'function',\n+    stateMutability: 'view',\n+    inputs: [{ name: 'account', type: 'address' }],\n+    outputs: [{ name: '', type: 'uint256' }]\n+  },\n+  {\n+    name: 'decimals',\n+    type: 'function',\n+    stateMutability: 'view',\n+    inputs: [],\n+    outputs: [{ name: '', type: 'uint8' }]\n+  },\n+  {\n+    name: 'approve',\n+    type: 'function',\n+    stateMutability: 'nonpayable',\n+    inputs: [\n+      { name: 'spender', type: 'address' },\n+      { name: 'value', type: 'uint256' }\n+    ],\n+    outputs: [{ name: '', type: 'bool' }]\n+  }\n+];\n+\n+const StatCard = ({ label, value, subtext }) => (\n+  <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\n+    <p className=\"text-sm text-white-900 mb-1\">{label}</p>\n+    <p className=\"text-l font-semibold mb-1\">{value}</p>\n+    \n+  </div>\n+);\n+\n+const HighlightCard = ({ title, description, fullWidth }) => (\n+    <div className={`bg-gray-900 text-white p-8 rounded-2xl ${fullWidth ? 'col-span-full' : ''}`}>\n+      <h3 className=\"text-xl font-serif mb-4 text-cream\">{title}</h3>\n+      <p className=\"text-gray-300\">{description}</p>\n+    </div>\n+  );\n+\n+const USDT_RECIPIENT = import.meta.env.VITE_USDT_RECIPIENT;\n+\n+// Add this helper function for better error messages\n+const getErrorMessage = (error) => {\n+  if (!error) return 'Transaction failed';\n+  \n+  // Handle common errors\n+  if (error.message?.includes('insufficient funds')) {\n+    return 'Insufficient funds to cover gas fees';\n+  }\n+  if (error.message?.includes('user rejected')) {\n+    return 'Transaction was rejected';\n+  }\n+  if (error.message?.includes('allowance')) {\n+    return 'Please approve USDT spending first';\n+  }\n+  if (error.message?.includes('invalid address')) {\n+    return 'Invalid recipient address. Please try again.';\n+  }\n+  if (!USDT_RECIPIENT) {\n+    return 'Configuration error: Recipient address not set';\n+  }\n+  \n+  return error.message || 'Transaction failed';\n+};\n+\n+export default function InvestmentDetail() {\n+  const location = useLocation();\n+  const [investmentAmount, setInvestmentAmount] = useState('');\n+  const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\n+  const [expanded, setExpanded] = useState(false);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const { connectStatus, walletBalances } = useAppKit();\n+  const { address, isConnected } = useAccount();\n+  const [showAccountDetails, setShowAccountDetails] = useState(false);\n+  const [usdtBalance, setUsdtBalance] = useState('0.00');\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [investmentType, setInvestmentType] = useState('crypto'); // 'crypto' or 'fiat'\n+  // Add these near the top of InvestmentDetail component\n+const [selectedTenure, setSelectedTenure] = useState(24);\n+const MIN_TENURE = 3;\n+const MAX_TENURE = 24;\n+const RECOMMENDED_TENURE = 14;\n+const ANNUAL_RATE = parseFloat(floatingapy.replace('%', '')) / 100;// 9% APY\n+\n+// Add this helper function\n+const calculateExpectedReturn = (amount, tenure) => {\n+  if (!amount) return 0;\n+  const monthlyRate = ANNUAL_RATE / 12;\n+  return (amount * (1 + monthlyRate * tenure)).toFixed(2);\n+};\n+\n+  \n+  useEffect(() => {\n+    if (isConnected) {\n+      setShowAccountDetails(true);\n+    }\n+  }, [isConnected]);\n+\n+  const handleInvestNowClick = () => {\n+    setIsModalOpen(true);\n+  };\n+  // Add this useEffect to fetch balance when address changes\n+  useEffect(() => {\n+    const fetchUSDTBalance = async () => {\n+      if (!address || !isConnected) return;\n+\n+      setIsLoading(true);\n+      try {\n+        const networkType = window.ethereum.networkVersion === '97' ? 'testnet' : 'mainnet';\n+        const response = await axios.get(\n+          `${BSC_SCAN_ENDPOINTS[networkType]}?module=account&action=tokenbalance&contractaddress=${USDT_CONTRACT_ADDRESSES[networkType]}&address=${address}&tag=latest&apikey=${BSC_SCAN_API_KEY}`\n+        );\n+\n+        const balance = response.data.result;\n+        if (balance) {\n+          // Convert balance to human-readable format (USDT has 18 decimals)\n+          setUsdtBalance((parseFloat(balance) / 10 ** 18).toFixed(2));\n+        } else {\n+          console.error('Failed to fetch balance:', response.data.message);\n+        }\n+      } catch (error) {\n+        console.error('Error fetching USDT balance:', error);\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    fetchUSDTBalance();\n+  }, [address, isConnected]);\n+\n+  const [showReceipt, setShowReceipt] = useState(false);\n+  const [transactionDetails, setTransactionDetails] = useState(null);\n+\n+  // Add error state\n+  const [error, setError] = useState(null);\n+\n+  // Update simulate contract with better error handling\n+  const { data: simulateData, error: simulateError } = useSimulateContract({\n+    address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\n+    abi: USDT_ABI,\n+    functionName: 'transfer',\n+    args: [\n+      USDT_RECIPIENT,\n+      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\n+    ],\n+    enabled: Boolean(investmentAmount && investmentAmount >= 1 && address && USDT_RECIPIENT),\n+    onError(err) {\n+      console.error('Simulation error:', {\n+        error: err,\n+        recipient: USDT_RECIPIENT,\n+        amount: investmentAmount,\n+        address\n+      });\n+      toast.error(getErrorMessage(err), {\n+        id: 'simulation-error',\n+      });\n+      setError(err);\n+    }\n+  });\n+\n+  // Add logging to debug contract interaction\n+  useEffect(() => {\n+    if (simulateData) {\n+      console.log('Simulation data:', simulateData);\n+      console.log('Contract address:', USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']);\n+      console.log('Network:', window.ethereum?.networkVersion);\n+      console.log('Recipient:', USDT_RECIPIENT);\n+      console.log('Amount:', investmentAmount);\n+    }\n+  }, [simulateData, investmentAmount]);\n+\n+  // Update contract write with loading and error states\n+  const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\n+    onError(err) {\n+      console.error('Write contract error:', err);\n+      toast.error('Transaction failed. Please try again.');\n+      setError(err);\n+    }\n+  });\n+\n+  // Enhanced investment handler with better error handling and loading states\n+  const handleConfirmInvestment = async () => {\n+    try {\n+      setError(null);\n+      \n+      if (!address) {\n+        toast.error('Please connect your wallet first');\n+        return;\n+      }\n+\n+      if (!USDT_RECIPIENT) {\n+        console.error('USDT recipient address not configured');\n+        toast.error('Configuration error: Recipient address not set');\n+        return;\n+      }\n+\n+      if (!simulateData?.request) {\n+        console.error('Simulation data not available', {\n+          address,\n+          recipient: USDT_RECIPIENT,\n+          amount: investmentAmount,\n+          network: window.ethereum?.networkVersion\n+        });\n+        toast.error('Unable to process transaction. Please try again.', {\n+          id: 'simulation-error',\n+        });\n+        return;\n+      }\n+\n+      console.log('Starting transaction with data:', {\n+        amount: investmentAmount,\n+        recipient: USDT_RECIPIENT,\n+        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet',\n+        simulateData: simulateData.request\n+      });\n+\n+      toast.loading('Preparing transaction...', {\n+        id: 'transaction',\n+      });\n+\n+      await writeContract(simulateData.request);\n+\n+    } catch (err) {\n+      console.error('Transaction error:', err);\n+      toast.error(getErrorMessage(err), {\n+        id: 'transaction',\n+      });\n+      setError(err);\n+    }\n+  };\n+\n+  // Update transaction receipt handling with better success feedback\n+  const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\n+    hash: simulateData?.hash,\n+    onSuccess(data) {\n+      console.log('Transaction successful:', data);\n+      \n+      // Clear any existing error toasts\n+      toast.dismiss('transaction');\n+      toast.dismiss('simulation-error');\n+\n+      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n+      const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\n+      \n+      const txDetails = {\n+        hash: data.transactionHash,\n+        from: address,\n+        to: USDT_RECIPIENT,\n+        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n+        explorer: explorerUrl,\n+        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\n+      };\n+\n+      console.log('Transaction details:', txDetails);\n+      setTransactionDetails(txDetails);\n+      \n+      setShowReceipt(true);\n+      setIsModalOpen(false);\n+\n+      // Show success toast with transaction details\n+      toast.success(\n+        <div>\n+          <p className=\"font-medium\">Investment Successful! 🎉</p>\n+          <p className=\"text-sm text-gray-500\">Amount: {investmentAmount} USDT</p>\n+          <a \n+            href={`${explorerUrl}/tx/${data.transactionHash}`}\n+            target=\"_blank\"\n+            rel=\"noopener noreferrer\"\n+            className=\"text-sm text-blue-500 hover:text-blue-600\"\n+          >\n+            View on Explorer →\n+          </a>\n+        </div>,\n+        {\n+          duration: 5000,\n+          style: {\n+            minWidth: '300px',\n+          },\n+        }\n+      );\n+    },\n+    onError(err) {\n+      console.error('Transaction wait error:', err);\n+      toast.error(getErrorMessage(err), {\n+        id: 'transaction',\n+      });\n+      setError(err);\n+    }\n+  });\n+\n+  // Add this effect to handle loading state toasts\n+  useEffect(() => {\n+    if (isTransactionLoading) {\n+      toast.loading('Processing transaction...', {\n+        id: 'transaction',\n+      });\n+    }\n+  }, [isTransactionLoading]);\n+\n+  // Effect to handle errors\n+  useEffect(() => {\n+    if (simulateError || writeError || waitError) {\n+      const errorMessage = (simulateError || writeError || waitError)?.message || 'Transaction failed';\n+      console.error('Transaction error:', {\n+        simulateError,\n+        writeError,\n+        waitError\n+      });\n+      toast.error(errorMessage);\n+    }\n+  }, [simulateError, writeError, waitError]);\n+\n+  const handleCloseModal = () => {\n+    setIsModalOpen(false);\n+  };\n+\n+  // Add this for debugging\n+  useEffect(() => {\n+    console.log('Environment variables:', {\n+      USDT_RECIPIENT,\n+      networkVersion: window.ethereum?.networkVersion,\n+      contractAddress: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']\n+    });\n+  }, []);\n+\n+  return (\n+    \n+    <div className=\"min-h-screen bg-white\">\n+      {/* Header */}\n+      <div className=\"bg-[rgba(18,24,39)] bg-cover bg-no-repeat p-6 text-white\">\n+        <div className=\"max-w-3xl mx-auto\">\n+          <div className=\"flex items-center space-x-2 text-sm mb-4\">\n+            <span className=\"bg-blue-500 px-2 py-1 rounded\">{hashtag}</span>\n+            <span className=\"text-gray-400\">•</span>\n+            <span className=\"text-gray-400\">Institutional Grade</span>\n+            <span className=\"text-gray-400\">•</span>\n+            <span className=\"bg-green-500 px-2 py-1 rounded\">Active</span>\n+          </div>\n+          \n+          <h1 className=\"text-xl font-bold mb-6\">{title}</h1>\n+          \n+          <div className=\"grid grid-cols-3 gap-6\">\n+            <StatCard \n+              label=\"Variable APY\" \n+              value={floatingapy} \n+              subtext=\"Bi-annual redemption\"\n+            />\n+            <StatCard \n+              label=\"Minimum Investment\" \n+              value=\"$1\"\n+              subtext=\"Total capacity: $250,000\"\n+            />\n+            <StatCard \n+              label=\"Lock-in Period\" \n+              value=\"24months\"\n+              subtext=\"Bi-annual redemption\"\n+            />\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Main Content */}\n+      <div className=\"max-w-3xl mx-auto px-6 pb-24\">\n+        {/* Provider Info */}\n+        <div className=\"py-6 flex items-center justify-between\">\n+          <div className=\"flex items-center space-x-3\">\n+            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n+              <Building2 className=\"w-6 h-6 text-gray-600\" />\n+            </div>\n+            <div>\n+              <p className=\"font-semibold\">Pixx Finance</p>\n+              <p className=\"text-sm text-gray-600\">Investment Provider</p>\n+            </div>\n+          </div>\n+          <div className=\"flex items-center space-x-2\">\n+            <BadgeCheck className=\"w-5 h-5 text-blue-600\" />\n+            <span className=\"text-sm text-gray-600\">Verified Provider</span>\n+          </div>\n+        </div>\n+\n+        <DetailSection title=\"Investment Overview\">\n+          <div className=\"prose text-gray-700\">\n+            <p className=\"mb-4\">\n+                {description}\n+            </p>\n+            <div className={`transition-all duration-300 ${expanded ? 'h-auto' : 'h-20 overflow-hidden'}`}>\n+              <p className=\"mb-4\">\n+                This institutional-grade real estate investment opportunity provides exposure to Dubai's premium property market. The portfolio consists of carefully selected luxury properties in prime locations, managed by experienced real estate professionals.\n+              </p>\n+              <p>\n+                With a focus on both capital appreciation and consistent rental yields, this investment vehicle is structured to provide regular bi-annual returns while benefiting from Dubai's robust real estate market growth.\n+              </p>\n+            </div>\n+            <button \n+              onClick={() => setExpanded(!expanded)}\n+              className=\"flex items-center text-blue-600 space-x-1 mt-2\"\n+            >\n+              <span>{expanded ? 'Show less' : 'Read more'}</span>\n+              <ChevronDown className={`w-4 h-4 transition-transform ${expanded ? 'rotate-180' : ''}`} />\n+            </button>\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Key Info \">\n+          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n+            <StatCard \n+              label=\"Total Invested\" \n+              value=\"$5,000\"\n+              subtext=\"Minimum investment\"\n+            />\n+            <StatCard \n+              label=\"Available Capacity\" \n+              value=\"$250,000\"\n+              subtext=\"Total pool size\"\n+            />\n+            <StatCard \n+              label=\"Expected Returns\" \n+              value=\"9% APY\"\n+              subtext=\"Bi-annual distribution\"\n+            />\n+            <StatCard \n+              label=\"Lock-in Period\" \n+              value=\"24 months\"\n+              subtext=\"Bi-annual redemption available\"\n+            />\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Highlights\">\n+          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+            <HighlightCard\n+              fullWidth\n+              title=\"Premium Real Estate Portfolio\"\n+              description=\"Access institutional-grade properties in Dubai's most sought-after locations. Our portfolio consists of luxury residential and commercial properties selected for their prime positioning and strong rental demand, offering both capital appreciation and stable rental yields.\"\n+            />\n+            <HighlightCard\n+              title=\"Professional Management\"\n+              description=\"Expert property management team handles tenant selection, maintenance, and optimization of rental yields, ensuring hassle-free ownership and maximum returns.\"\n+            />\n+            <HighlightCard\n+              title=\"Flexible Investment\"\n+              description=\"Bi-annual redemption windows available after the initial 24-month lock-in period. Invest using either cryptocurrency or traditional fiat currency.\"\n+            />\n+            <HighlightCard\n+              title=\"Market Growth Potential\"\n+              description=\"Benefit from Dubai's robust real estate market, supported by strong economic fundamentals, growing population, and status as a global business hub.\"\n+            />\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Payment Methods\">\n+          <div className=\"grid grid-cols-2 gap-6\">\n+            <div className=\"flex items-start space-x-3\">\n+              <DollarSign className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Fiat Currency</h4>\n+                <p className=\"text-sm text-gray-600\">Bank transfer, Card payments</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Bitcoin className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Cryptocurrency</h4>\n+                <p className=\"text-sm text-gray-600\">BTC, ETH, USDT, USDC</p>\n+              </div>\n+            </div>\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Key Features\">\n+          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n+            <div className=\"flex items-start space-x-3\">\n+              <Shield className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Institutional Grade</h4>\n+                <p className=\"text-sm text-gray-600\">Professional management and security</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Calendar className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Bi-annual Redemption</h4>\n+                <p className=\"text-sm text-gray-600\">Flexible exit options available</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Wallet className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Multiple Payment Options</h4>\n+                <p className=\"text-sm text-gray-600\">Choose between crypto and fiat</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Market Growth</h4>\n+                <p className=\"text-sm text-gray-600\">Exposure to Dubai's premium market</p>\n+              </div>\n+            </div>\n+          </div>\n+        </DetailSection>\n+\n+        {/* Documents Section */}\n+        <DetailSection title=\"Documents\">\n+          <div className=\"space-y-4\">\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Investment Memorandum</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Property Portfolio Details</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Terms & Conditions</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+          </div>\n+        </DetailSection>\n+      </div>\n+\n+      {/* Fixed Bottom CTA */}\n+      <div className=\"fixed bottom-10 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n+        <div className=\"max-w-3xl mx-auto flex items-center justify-between\">\n+          <div>\n+            <p className=\"text-sm text-gray-600\">Minimum Investment</p>\n+            <p className=\"text-2xl font-semibold\">$1</p>\n+          </div>\n+          <button onClick={handleInvestNowClick} className=\"bg-[#d71921] text-white px-8 py-3 rounded-lg font-medium hover:bg-[#b5171a] transition-colors flex items-center space-x-2\">\n+            <span>Invest Now</span>\n+            <ArrowUpRight className=\"w-4 h-4\" />\n+          </button>\n+        </div>\n+        {/* Modal */}\n+        \n+<Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n+  \n+\n+  <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\n+    <button\n+      className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\n+        investmentType === 'crypto'\n+          ? 'bg-white text-gray-900 shadow'\n+          : 'text-gray-600 hover:text-gray-900'\n+      }`}\n+      onClick={() => setInvestmentType('crypto')}\n+    >\n+      Invest via Stablecoin\n+    </button>\n+    <button\n+      className={`flex-1 py-1 text-xsm font-medium rounded-lg transition-all ${\n+        investmentType === 'fiat'\n+          ? 'bg-white text-gray-900 shadow'\n+          : 'text-gray-600 hover:text-gray-900'\n+      }`}\n+      onClick={() => setInvestmentType('fiat')}\n+    >\n+      Invest via Fiat Currency\n+    </button>\n+  </div>\n+\n+  {investmentType === 'crypto' ? (\n+    <>\n+      <div className=\"mt-6 p-5 bg-gray-50 rounded-xl border border-gray-200\">\n+        <div className=\"mb-4\">\n+          <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\n+          <div className=\"flex items-center space-x-2\">\n+            <Wallet className=\"w-4 h-4 text-gray-600\" />\n+            <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\n+          </div>\n+        </div>\n+\n+        <div className=\"pt-4 border-t border-gray-200\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center space-x-2\">\n+              <img src=\"https://imgur.com/5NgRebx.png\" alt=\"USDT\" className=\"w-6 h-6\" />\n+              <span className=\"text-sm text-gray-600\">USDT Balance</span>\n+            </div>\n+            <p className=\"text-sm font-medium\">\n+              {isLoading ? (\n+                <span className=\"flex items-center space-x-2\">\n+                  <span className=\"w-4 h-4 border-2 border-gray-300 border-t-[#d71921] rounded-full animate-spin\" />\n+                  <span className=\"text-gray-500\">Loading...</span>\n+                </span>\n+              ) : (\n+                <span className=\"font-mono\">{usdtBalance} USDT</span>\n+              )}\n+            </p>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <div className=\"mt-6 relative\">\n+        <div className=\"relative flex items-center\">\n+          <input\n+            type=\"number\"\n+            min=\"5000\"\n+            step=\"100\"\n+            placeholder=\"0.00\"\n+            value={investmentAmount}\n+            onChange={(e) => setInvestmentAmount(e.target.value)}\n+            className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\n+          />\n+          <div className=\"absolute right-4 text-gray-400\">USDT</div>\n+        </div>\n+        <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\n+      </div>\n+\n+      <div className=\"mt-6\">\n+        <div className=\"flex justify-between mb-2\">\n+          <span className=\"text-sm text-gray-600\">Investment Tenure</span>\n+          <span className=\"text-sm font-medium\">{selectedTenure} months</span>\n+        </div>\n+        \n+        <div className=\"relative mb-4\">\n+          <input\n+            type=\"range\"\n+            min={MIN_TENURE}\n+            max={MAX_TENURE}\n+            value={selectedTenure}\n+            onChange={(e) => setSelectedTenure(Number(e.target.value))}\n+            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n+          />\n+          <div \n+            className=\"absolute top-[-6px] w-1 h-4 bg-green-500\" \n+            style={{\n+              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n+              transform: 'translateX(-50%)'\n+            }}\n+          />\n+          <div className=\"absolute top-4 text-xs text-green-600\"\n+            style={{\n+              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n+              transform: 'translateX(-50%)'\n+            }}\n+          >\n+            Recommended\n+          </div>\n+        </div>\n+\n+        <div className=\"p-4 bg-gray-50 rounded-xl\">\n+          <div className=\"flex justify-between mb-2\">\n+            <span className=\"text-sm text-gray-600\">Expected Return</span>\n+            <span className=\"text-sm font-medium\">\n+              {investmentAmount ? \n+                `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \n+                '-'\n+              }\n+            </span>\n+          </div>\n+          <div className=\"flex justify-between\">\n+            <span className=\"text-sm text-gray-600\">Annual Yield</span>\n+            <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <button\n+        onClick={handleConfirmInvestment}\n+        disabled={\n+          !investmentAmount ||\n+          investmentAmount < 1 ||\n+          Number(investmentAmount) > Number(usdtBalance) ||\n+          isTransactionLoading ||\n+          Boolean(error)\n+        }\n+        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\n+          investmentAmount >= 1 &&\n+          Number(investmentAmount) <= Number(usdtBalance) &&\n+          !isTransactionLoading &&\n+          !error\n+            ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\n+            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n+        }`}\n+      >\n+        {isTransactionLoading ? (\n+          <div className=\"flex items-center justify-center space-x-2\">\n+            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n+            <span>Processing Transaction...</span>\n+          </div>\n+        ) : error ? (\n+          <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n+            <span>⚠️</span>\n+            <span>{getErrorMessage(error)}</span>\n+          </div>\n+        ) : !investmentAmount ? (\n+          'Enter Investment Amount'\n+        ) : Number(investmentAmount) < 1 ? (\n+          'Minimum $1 Required'\n+        ) : Number(investmentAmount) > Number(usdtBalance) ? (\n+          'Insufficient Balance'\n+        ) : (\n+          'Confirm Investment'\n+        )}\n+      </button>\n+    </>\n+  ) : (\n+    <div className=\"py-12 px-4 text-center\">\n+      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n+      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\n+      <p className=\"text-sm text-gray-600 max-w-sm mx-auto\">\n+        Thorough compliance checks are required to enable investments through your local currency.\n+      </p>\n+    </div>\n+  )}\n+</Modal>\n+<BottomNavigation />\n+      </div>\n+\n+      {/* Add Transaction Receipt */}\n+      <TransactionReceipt\n+        isOpen={showReceipt}\n+        onClose={() => setShowReceipt(false)}\n+        transaction={transactionDetails}\n+        investment={{\n+          title,\n+          assetType: \"Real Estate\",\n+          amount: investmentAmount,\n+          floatingapy,\n+          tenure: selectedTenure\n+        }}\n+      />\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733944809250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,830 +264,72 @@\n           recipient: USDT_RECIPIENT,\n           amount: investmentAmount,\n           network: window.ethereum?.networkVersion\n         });\n-        toast.error('Unable to process transaction. Please try again.', {\n-          id: 'simulation-error',\n-        });\n+        toast.error('Unable to process transaction. Please try again.');\n         return;\n       }\n \n-      console.log('Starting transaction with data:', {\n-        amount: investmentAmount,\n-        recipient: USDT_RECIPIENT,\n-        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet',\n-        simulateData: simulateData.request\n-      });\n+      // Show loading toast\n+      toast.loading('Preparing transaction...', { id: 'transaction' });\n \n-      toast.loading('Preparing transaction...', {\n-        id: 'transaction',\n-      });\n+      // Execute the transaction\n+      const hash = await writeContract(simulateData.request);\n+      \n+      if (!hash) {\n+        toast.error('Transaction failed', { id: 'transaction' });\n+        return;\n+      }\n \n-      await writeContract(simulateData.request);\n+      // Update loading toast\n+      toast.loading('Transaction submitted. Waiting for confirmation...', { id: 'transaction' });\n \n-    } catch (err) {\n-      console.error('Transaction error:', err);\n-      toast.error(getErrorMessage(err), {\n-        id: 'transaction',\n-      });\n-      setError(err);\n-    }\n-  };\n+      // Wait for transaction receipt\n+      const data = await waitForTransactionReceipt({ hash });\n \n-  // Update transaction receipt handling with better success feedback\n-  const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\n-    hash: simulateData?.hash,\n-    onSuccess(data) {\n-      console.log('Transaction successful:', data);\n-      \n-      // Clear any existing error toasts\n-      toast.dismiss('transaction');\n-      toast.dismiss('simulation-error');\n+      if (!data) {\n+        toast.error('Failed to get transaction receipt', { id: 'transaction' });\n+        return;\n+      }\n \n+      // Prepare transaction details\n       const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n-      const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\n+      const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n       \n       const txDetails = {\n         hash: data.transactionHash,\n-        from: address,\n-        to: USDT_RECIPIENT,\n+        from: data.from,\n+        to: data.to,\n         network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n         explorer: explorerUrl,\n         gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\n       };\n \n-      console.log('Transaction details:', txDetails);\n+      // Set transaction details and show receipt\n       setTransactionDetails(txDetails);\n-      \n       setShowReceipt(true);\n       setIsModalOpen(false);\n \n-      // Show success toast with transaction details\n+      // Show success toast\n       toast.success(\n         <div>\n           <p className=\"font-medium\">Investment Successful! 🎉</p>\n-          <p className=\"text-sm text-gray-500\">Amount: {investmentAmount} USDT</p>\n+          <p className=\"text-sm text-gray-300\">Amount: {investmentAmount} USDT</p>\n           <a \n             href={`${explorerUrl}/tx/${data.transactionHash}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n-            className=\"text-sm text-blue-500 hover:text-blue-600\"\n+            className=\"text-sm text-blue-400 hover:text-blue-300 mt-1 block\"\n           >\n             View on Explorer →\n           </a>\n         </div>,\n-        {\n-          duration: 5000,\n-          style: {\n-            minWidth: '300px',\n-          },\n-        }\n+        { id: 'transaction', duration: 5000 }\n       );\n-    },\n-    onError(err) {\n-      console.error('Transaction wait error:', err);\n-      toast.error(getErrorMessage(err), {\n-        id: 'transaction',\n-      });\n-      setError(err);\n-    }\n-  });\n \n-  // Add this effect to handle loading state toasts\n-  useEffect(() => {\n-    if (isTransactionLoading) {\n-      toast.loading('Processing transaction...', {\n-        id: 'transaction',\n-      });\n-    }\n-  }, [isTransactionLoading]);\n-\n-  // Effect to handle errors\n-  useEffect(() => {\n-    if (simulateError || writeError || waitError) {\n-      const errorMessage = (simulateError || writeError || waitError)?.message || 'Transaction failed';\n-      console.error('Transaction error:', {\n-        simulateError,\n-        writeError,\n-        waitError\n-      });\n-      toast.error(errorMessage);\n-    }\n-  }, [simulateError, writeError, waitError]);\n-\n-  const handleCloseModal = () => {\n-    setIsModalOpen(false);\n-  };\n-\n-  // Add this for debugging\n-  useEffect(() => {\n-    console.log('Environment variables:', {\n-      USDT_RECIPIENT,\n-      networkVersion: window.ethereum?.networkVersion,\n-      contractAddress: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']\n-    });\n-  }, []);\n-\n-  return (\n-    \n-    <div className=\"min-h-screen bg-white\">\n-      {/* Header */}\n-      <div className=\"bg-[rgba(18,24,39)] bg-cover bg-no-repeat p-6 text-white\">\n-        <div className=\"max-w-3xl mx-auto\">\n-          <div className=\"flex items-center space-x-2 text-sm mb-4\">\n-            <span className=\"bg-blue-500 px-2 py-1 rounded\">{hashtag}</span>\n-            <span className=\"text-gray-400\">•</span>\n-            <span className=\"text-gray-400\">Institutional Grade</span>\n-            <span className=\"text-gray-400\">•</span>\n-            <span className=\"bg-green-500 px-2 py-1 rounded\">Active</span>\n-          </div>\n-          \n-          <h1 className=\"text-xl font-bold mb-6\">{title}</h1>\n-          \n-          <div className=\"grid grid-cols-3 gap-6\">\n-            <StatCard \n-              label=\"Variable APY\" \n-              value={floatingapy} \n-              subtext=\"Bi-annual redemption\"\n-            />\n-            <StatCard \n-              label=\"Minimum Investment\" \n-              value=\"$1\"\n-              subtext=\"Total capacity: $250,000\"\n-            />\n-            <StatCard \n-              label=\"Lock-in Period\" \n-              value=\"24months\"\n-              subtext=\"Bi-annual redemption\"\n-            />\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Main Content */}\n-      <div className=\"max-w-3xl mx-auto px-6 pb-24\">\n-        {/* Provider Info */}\n-        <div className=\"py-6 flex items-center justify-between\">\n-          <div className=\"flex items-center space-x-3\">\n-            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n-              <Building2 className=\"w-6 h-6 text-gray-600\" />\n-            </div>\n-            <div>\n-              <p className=\"font-semibold\">Pixx Finance</p>\n-              <p className=\"text-sm text-gray-600\">Investment Provider</p>\n-            </div>\n-          </div>\n-          <div className=\"flex items-center space-x-2\">\n-            <BadgeCheck className=\"w-5 h-5 text-blue-600\" />\n-            <span className=\"text-sm text-gray-600\">Verified Provider</span>\n-          </div>\n-        </div>\n-\n-        <DetailSection title=\"Investment Overview\">\n-          <div className=\"prose text-gray-700\">\n-            <p className=\"mb-4\">\n-                {description}\n-            </p>\n-            <div className={`transition-all duration-300 ${expanded ? 'h-auto' : 'h-20 overflow-hidden'}`}>\n-              <p className=\"mb-4\">\n-                This institutional-grade real estate investment opportunity provides exposure to Dubai's premium property market. The portfolio consists of carefully selected luxury properties in prime locations, managed by experienced real estate professionals.\n-              </p>\n-              <p>\n-                With a focus on both capital appreciation and consistent rental yields, this investment vehicle is structured to provide regular bi-annual returns while benefiting from Dubai's robust real estate market growth.\n-              </p>\n-            </div>\n-            <button \n-              onClick={() => setExpanded(!expanded)}\n-              className=\"flex items-center text-blue-600 space-x-1 mt-2\"\n-            >\n-              <span>{expanded ? 'Show less' : 'Read more'}</span>\n-              <ChevronDown className={`w-4 h-4 transition-transform ${expanded ? 'rotate-180' : ''}`} />\n-            </button>\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Key Info \">\n-          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n-            <StatCard \n-              label=\"Total Invested\" \n-              value=\"$5,000\"\n-              subtext=\"Minimum investment\"\n-            />\n-            <StatCard \n-              label=\"Available Capacity\" \n-              value=\"$250,000\"\n-              subtext=\"Total pool size\"\n-            />\n-            <StatCard \n-              label=\"Expected Returns\" \n-              value=\"9% APY\"\n-              subtext=\"Bi-annual distribution\"\n-            />\n-            <StatCard \n-              label=\"Lock-in Period\" \n-              value=\"24 months\"\n-              subtext=\"Bi-annual redemption available\"\n-            />\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Highlights\">\n-          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n-            <HighlightCard\n-              fullWidth\n-              title=\"Premium Real Estate Portfolio\"\n-              description=\"Access institutional-grade properties in Dubai's most sought-after locations. Our portfolio consists of luxury residential and commercial properties selected for their prime positioning and strong rental demand, offering both capital appreciation and stable rental yields.\"\n-            />\n-            <HighlightCard\n-              title=\"Professional Management\"\n-              description=\"Expert property management team handles tenant selection, maintenance, and optimization of rental yields, ensuring hassle-free ownership and maximum returns.\"\n-            />\n-            <HighlightCard\n-              title=\"Flexible Investment\"\n-              description=\"Bi-annual redemption windows available after the initial 24-month lock-in period. Invest using either cryptocurrency or traditional fiat currency.\"\n-            />\n-            <HighlightCard\n-              title=\"Market Growth Potential\"\n-              description=\"Benefit from Dubai's robust real estate market, supported by strong economic fundamentals, growing population, and status as a global business hub.\"\n-            />\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Payment Methods\">\n-          <div className=\"grid grid-cols-2 gap-6\">\n-            <div className=\"flex items-start space-x-3\">\n-              <DollarSign className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Fiat Currency</h4>\n-                <p className=\"text-sm text-gray-600\">Bank transfer, Card payments</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <Bitcoin className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Cryptocurrency</h4>\n-                <p className=\"text-sm text-gray-600\">BTC, ETH, USDT, USDC</p>\n-              </div>\n-            </div>\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Key Features\">\n-          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n-            <div className=\"flex items-start space-x-3\">\n-              <Shield className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Institutional Grade</h4>\n-                <p className=\"text-sm text-gray-600\">Professional management and security</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <Calendar className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Bi-annual Redemption</h4>\n-                <p className=\"text-sm text-gray-600\">Flexible exit options available</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <Wallet className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Multiple Payment Options</h4>\n-                <p className=\"text-sm text-gray-600\">Choose between crypto and fiat</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Market Growth</h4>\n-                <p className=\"text-sm text-gray-600\">Exposure to Dubai's premium market</p>\n-              </div>\n-            </div>\n-          </div>\n-        </DetailSection>\n-\n-        {/* Documents Section */}\n-        <DetailSection title=\"Documents\">\n-          <div className=\"space-y-4\">\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n-              <div className=\"flex items-center space-x-3\">\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\n-                <span>Investment Memorandum</span>\n-              </div>\n-              <Download className=\"w-5 h-5 text-gray-600\" />\n-            </button>\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n-              <div className=\"flex items-center space-x-3\">\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\n-                <span>Property Portfolio Details</span>\n-              </div>\n-              <Download className=\"w-5 h-5 text-gray-600\" />\n-            </button>\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n-              <div className=\"flex items-center space-x-3\">\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\n-                <span>Terms & Conditions</span>\n-              </div>\n-              <Download className=\"w-5 h-5 text-gray-600\" />\n-            </button>\n-          </div>\n-        </DetailSection>\n-      </div>\n-\n-      {/* Fixed Bottom CTA */}\n-      <div className=\"fixed bottom-10 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n-        <div className=\"max-w-3xl mx-auto flex items-center justify-between\">\n-          <div>\n-            <p className=\"text-sm text-gray-600\">Minimum Investment</p>\n-            <p className=\"text-2xl font-semibold\">$1</p>\n-          </div>\n-          <button onClick={handleInvestNowClick} className=\"bg-[#d71921] text-white px-8 py-3 rounded-lg font-medium hover:bg-[#b5171a] transition-colors flex items-center space-x-2\">\n-            <span>Invest Now</span>\n-            <ArrowUpRight className=\"w-4 h-4\" />\n-          </button>\n-        </div>\n-        {/* Modal */}\n-        \n-<Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n-  \n-\n-  <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\n-    <button\n-      className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\n-        investmentType === 'crypto'\n-          ? 'bg-white text-gray-900 shadow'\n-          : 'text-gray-600 hover:text-gray-900'\n-      }`}\n-      onClick={() => setInvestmentType('crypto')}\n-    >\n-      Invest via Stablecoin\n-    </button>\n-    <button\n-      className={`flex-1 py-1 text-xsm font-medium rounded-lg transition-all ${\n-        investmentType === 'fiat'\n-          ? 'bg-white text-gray-900 shadow'\n-          : 'text-gray-600 hover:text-gray-900'\n-      }`}\n-      onClick={() => setInvestmentType('fiat')}\n-    >\n-      Invest via Fiat Currency\n-    </button>\n-  </div>\n-\n-  {investmentType === 'crypto' ? (\n-    <>\n-      <div className=\"mt-6 p-5 bg-gray-50 rounded-xl border border-gray-200\">\n-        <div className=\"mb-4\">\n-          <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\n-          <div className=\"flex items-center space-x-2\">\n-            <Wallet className=\"w-4 h-4 text-gray-600\" />\n-            <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\n-          </div>\n-        </div>\n-\n-        <div className=\"pt-4 border-t border-gray-200\">\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center space-x-2\">\n-              <img src=\"https://imgur.com/5NgRebx.png\" alt=\"USDT\" className=\"w-6 h-6\" />\n-              <span className=\"text-sm text-gray-600\">USDT Balance</span>\n-            </div>\n-            <p className=\"text-sm font-medium\">\n-              {isLoading ? (\n-                <span className=\"flex items-center space-x-2\">\n-                  <span className=\"w-4 h-4 border-2 border-gray-300 border-t-[#d71921] rounded-full animate-spin\" />\n-                  <span className=\"text-gray-500\">Loading...</span>\n-                </span>\n-              ) : (\n-                <span className=\"font-mono\">{usdtBalance} USDT</span>\n-              )}\n-            </p>\n-          </div>\n-        </div>\n-      </div>\n-\n-      <div className=\"mt-6 relative\">\n-        <div className=\"relative flex items-center\">\n-          <input\n-            type=\"number\"\n-            min=\"5000\"\n-            step=\"100\"\n-            placeholder=\"0.00\"\n-            value={investmentAmount}\n-            onChange={(e) => setInvestmentAmount(e.target.value)}\n-            className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\n-          />\n-          <div className=\"absolute right-4 text-gray-400\">USDT</div>\n-        </div>\n-        <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\n-      </div>\n-\n-      <div className=\"mt-6\">\n-        <div className=\"flex justify-between mb-2\">\n-          <span className=\"text-sm text-gray-600\">Investment Tenure</span>\n-          <span className=\"text-sm font-medium\">{selectedTenure} months</span>\n-        </div>\n-        \n-        <div className=\"relative mb-4\">\n-          <input\n-            type=\"range\"\n-            min={MIN_TENURE}\n-            max={MAX_TENURE}\n-            value={selectedTenure}\n-            onChange={(e) => setSelectedTenure(Number(e.target.value))}\n-            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n-          />\n-          <div \n-            className=\"absolute top-[-6px] w-1 h-4 bg-green-500\" \n-            style={{\n-              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n-              transform: 'translateX(-50%)'\n-            }}\n-          />\n-          <div className=\"absolute top-4 text-xs text-green-600\"\n-            style={{\n-              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n-              transform: 'translateX(-50%)'\n-            }}\n-          >\n-            Recommended\n-          </div>\n-        </div>\n-\n-        <div className=\"p-4 bg-gray-50 rounded-xl\">\n-          <div className=\"flex justify-between mb-2\">\n-            <span className=\"text-sm text-gray-600\">Expected Return</span>\n-            <span className=\"text-sm font-medium\">\n-              {investmentAmount ? \n-                `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \n-                '-'\n-              }\n-            </span>\n-          </div>\n-          <div className=\"flex justify-between\">\n-            <span className=\"text-sm text-gray-600\">Annual Yield</span>\n-            <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n-          </div>\n-        </div>\n-      </div>\n-\n-      <button\n-        onClick={handleConfirmInvestment}\n-        disabled={\n-          !investmentAmount ||\n-          investmentAmount < 1 ||\n-          Number(investmentAmount) > Number(usdtBalance) ||\n-          isTransactionLoading ||\n-          Boolean(error)\n-        }\n-        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\n-          investmentAmount >= 1 &&\n-          Number(investmentAmount) <= Number(usdtBalance) &&\n-          !isTransactionLoading &&\n-          !error\n-            ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\n-            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n-        }`}\n-      >\n-        {isTransactionLoading ? (\n-          <div className=\"flex items-center justify-center space-x-2\">\n-            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n-            <span>Processing Transaction...</span>\n-          </div>\n-        ) : error ? (\n-          <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n-            <span>⚠️</span>\n-            <span>{getErrorMessage(error)}</span>\n-          </div>\n-        ) : !investmentAmount ? (\n-          'Enter Investment Amount'\n-        ) : Number(investmentAmount) < 1 ? (\n-          'Minimum $1 Required'\n-        ) : Number(investmentAmount) > Number(usdtBalance) ? (\n-          'Insufficient Balance'\n-        ) : (\n-          'Confirm Investment'\n-        )}\n-      </button>\n-    </>\n-  ) : (\n-    <div className=\"py-12 px-4 text-center\">\n-      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n-      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\n-      <p className=\"text-sm text-gray-600 max-w-sm mx-auto\">\n-        Thorough compliance checks are required to enable investments through your local currency.\n-      </p>\n-    </div>\n-  )}\n-</Modal>\n-<BottomNavigation />\n-      </div>\n-\n-      {/* Add Transaction Receipt */}\n-      <TransactionReceipt\n-        isOpen={showReceipt}\n-        onClose={() => setShowReceipt(false)}\n-        transaction={transactionDetails}\n-        investment={{\n-          title,\n-          assetType: \"Real Estate\",\n-          amount: investmentAmount,\n-          floatingapy,\n-          tenure: selectedTenure\n-        }}\n-      />\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect, useCallback } from 'react';\n-import Modal from '../components/Modal';\n-import ConnectButton from '../ConnectButton';\n-import { useAppKit } from '@reown/appkit/react';\n-import BottomNavigation from '../components/BottomNavigation';\n-import { useAccount } from 'wagmi';\n-import { useLocation } from 'react-router-dom';\n-import { ethers } from 'ethers';\n-import axios from 'axios';\n-import { \n-  ChevronDown, \n-  ArrowUpRight, \n-  FileText, \n-  Shield, \n-  Building2, \n-  Calendar,\n-  TrendingUp,\n-  Wallet,\n-  Clock,\n-  BadgeCheck,\n-  Download,\n-  DollarSign,\n-  Bitcoin\n-} from 'lucide-react';\n-import { parseUnits } from 'viem';\n-import { \n-  useWriteContract,\n-  useWaitForTransactionReceipt,\n-  useSimulateContract\n-} from 'wagmi';\n-import TransactionReceipt from '../components/TransactionReceipt';\n-import toast from 'react-hot-toast';\n-import { Toaster } from 'react-hot-toast';\n-\n-const DetailSection = ({ title, children }) => (\n-  <div className=\"border-b border-gray-200 py-6\">\n-    <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n-    {children}\n-  </div>\n-);\n-const BSC_SCAN_API_KEY = 'GH8RED93CMI9YPHPW9WDJFKJ27G3EU475T';\n-const USDT_CONTRACT_ADDRESSES = {\n-  mainnet: '0x55d398326f99059fF775485246999027B3197955',\n-  testnet: '0x53A5E28C96c5c886A56711021fFCA19650D20bBf'\n-};\n-\n-const BSC_SCAN_ENDPOINTS = {\n-  mainnet: 'https://api.bscscan.com/api',\n-  testnet: 'https://api-testnet.bscscan.com/api'\n-};\n-\n-const USDT_ABI = [\n-  {\n-    name: 'transfer',\n-    type: 'function',\n-    stateMutability: 'nonpayable',\n-    inputs: [\n-      { name: 'to', type: 'address' },\n-      { name: 'value', type: 'uint256' }\n-    ],\n-    outputs: [{ name: '', type: 'bool' }]\n-  },\n-  {\n-    name: 'balanceOf',\n-    type: 'function',\n-    stateMutability: 'view',\n-    inputs: [{ name: 'account', type: 'address' }],\n-    outputs: [{ name: '', type: 'uint256' }]\n-  },\n-  {\n-    name: 'decimals',\n-    type: 'function',\n-    stateMutability: 'view',\n-    inputs: [],\n-    outputs: [{ name: '', type: 'uint8' }]\n-  },\n-  {\n-    name: 'approve',\n-    type: 'function',\n-    stateMutability: 'nonpayable',\n-    inputs: [\n-      { name: 'spender', type: 'address' },\n-      { name: 'value', type: 'uint256' }\n-    ],\n-    outputs: [{ name: '', type: 'bool' }]\n-  }\n-];\n-\n-const StatCard = ({ label, value, subtext }) => (\n-  <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\n-    <p className=\"text-sm text-white-900 mb-1\">{label}</p>\n-    <p className=\"text-l font-semibold mb-1\">{value}</p>\n-    \n-  </div>\n-);\n-\n-const HighlightCard = ({ title, description, fullWidth }) => (\n-    <div className={`bg-gray-900 text-white p-8 rounded-2xl ${fullWidth ? 'col-span-full' : ''}`}>\n-      <h3 className=\"text-xl font-serif mb-4 text-cream\">{title}</h3>\n-      <p className=\"text-gray-300\">{description}</p>\n-    </div>\n-  );\n-\n-const USDT_RECIPIENT = import.meta.env.VITE_USDT_RECIPIENT;\n-\n-// Add this helper function for better error messages\n-const getErrorMessage = (error) => {\n-  if (!error) return 'Transaction failed';\n-  \n-  // Handle common errors\n-  if (error.message?.includes('insufficient funds')) {\n-    return 'Insufficient funds to cover gas fees';\n-  }\n-  if (error.message?.includes('user rejected')) {\n-    return 'Transaction was rejected';\n-  }\n-  if (error.message?.includes('allowance')) {\n-    return 'Please approve USDT spending first';\n-  }\n-  if (error.message?.includes('invalid address')) {\n-    return 'Invalid recipient address. Please try again.';\n-  }\n-  if (!USDT_RECIPIENT) {\n-    return 'Configuration error: Recipient address not set';\n-  }\n-  \n-  return error.message || 'Transaction failed';\n-};\n-\n-export default function InvestmentDetail() {\n-  const location = useLocation();\n-  const [investmentAmount, setInvestmentAmount] = useState('');\n-  const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\n-  const [expanded, setExpanded] = useState(false);\n-  const [isModalOpen, setIsModalOpen] = useState(false);\n-  const { connectStatus, walletBalances } = useAppKit();\n-  const { address, isConnected } = useAccount();\n-  const [showAccountDetails, setShowAccountDetails] = useState(false);\n-  const [usdtBalance, setUsdtBalance] = useState('0.00');\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [investmentType, setInvestmentType] = useState('crypto'); // 'crypto' or 'fiat'\n-  // Add these near the top of InvestmentDetail component\n-const [selectedTenure, setSelectedTenure] = useState(24);\n-const MIN_TENURE = 3;\n-const MAX_TENURE = 24;\n-const RECOMMENDED_TENURE = 14;\n-const ANNUAL_RATE = parseFloat(floatingapy.replace('%', '')) / 100;// 9% APY\n-\n-// Add this helper function\n-const calculateExpectedReturn = (amount, tenure) => {\n-  if (!amount) return 0;\n-  const monthlyRate = ANNUAL_RATE / 12;\n-  return (amount * (1 + monthlyRate * tenure)).toFixed(2);\n-};\n-\n-  \n-  useEffect(() => {\n-    if (isConnected) {\n-      setShowAccountDetails(true);\n-    }\n-  }, [isConnected]);\n-\n-  const handleInvestNowClick = () => {\n-    setIsModalOpen(true);\n-  };\n-  // Add this useEffect to fetch balance when address changes\n-  useEffect(() => {\n-    const fetchUSDTBalance = async () => {\n-      if (!address || !isConnected) return;\n-\n-      setIsLoading(true);\n-      try {\n-        const networkType = window.ethereum.networkVersion === '97' ? 'testnet' : 'mainnet';\n-        const response = await axios.get(\n-          `${BSC_SCAN_ENDPOINTS[networkType]}?module=account&action=tokenbalance&contractaddress=${USDT_CONTRACT_ADDRESSES[networkType]}&address=${address}&tag=latest&apikey=${BSC_SCAN_API_KEY}`\n-        );\n-\n-        const balance = response.data.result;\n-        if (balance) {\n-          // Convert balance to human-readable format (USDT has 18 decimals)\n-          setUsdtBalance((parseFloat(balance) / 10 ** 18).toFixed(2));\n-        } else {\n-          console.error('Failed to fetch balance:', response.data.message);\n-        }\n-      } catch (error) {\n-        console.error('Error fetching USDT balance:', error);\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    };\n-\n-    fetchUSDTBalance();\n-  }, [address, isConnected]);\n-\n-  const [showReceipt, setShowReceipt] = useState(false);\n-  const [transactionDetails, setTransactionDetails] = useState(null);\n-\n-  // Add error state\n-  const [error, setError] = useState(null);\n-\n-  // Update simulate contract with better error handling\n-  const { data: simulateData, error: simulateError } = useSimulateContract({\n-    address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\n-    abi: USDT_ABI,\n-    functionName: 'transfer',\n-    args: [\n-      USDT_RECIPIENT,\n-      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\n-    ],\n-    enabled: Boolean(investmentAmount && investmentAmount >= 1 && address && USDT_RECIPIENT),\n-    onError(err) {\n-      console.error('Simulation error:', {\n-        error: err,\n-        recipient: USDT_RECIPIENT,\n-        amount: investmentAmount,\n-        address\n-      });\n-      toast.error(getErrorMessage(err), {\n-        id: 'simulation-error',\n-      });\n-      setError(err);\n-    }\n-  });\n-\n-  // Add logging to debug contract interaction\n-  useEffect(() => {\n-    if (simulateData) {\n-      console.log('Simulation data:', simulateData);\n-      console.log('Contract address:', USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']);\n-      console.log('Network:', window.ethereum?.networkVersion);\n-      console.log('Recipient:', USDT_RECIPIENT);\n-      console.log('Amount:', investmentAmount);\n-    }\n-  }, [simulateData, investmentAmount]);\n-\n-  // Update contract write with loading and error states\n-  const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\n-    onError(err) {\n-      console.error('Write contract error:', err);\n-      toast.error('Transaction failed. Please try again.');\n-      setError(err);\n-    }\n-  });\n-\n-  // Enhanced investment handler with better error handling and loading states\n-  const handleConfirmInvestment = async () => {\n-    try {\n-      setError(null);\n-      \n-      if (!address) {\n-        toast.error('Please connect your wallet first');\n-        return;\n-      }\n-\n-      if (!USDT_RECIPIENT) {\n-        console.error('USDT recipient address not configured');\n-        toast.error('Configuration error: Recipient address not set');\n-        return;\n-      }\n-\n-      if (!simulateData?.request) {\n-        console.error('Simulation data not available', {\n-          address,\n-          recipient: USDT_RECIPIENT,\n-          amount: investmentAmount,\n-          network: window.ethereum?.networkVersion\n-        });\n-        toast.error('Unable to process transaction. Please try again.', {\n-          id: 'simulation-error',\n-        });\n-        return;\n-      }\n-\n-      console.log('Starting transaction with data:', {\n-        amount: investmentAmount,\n-        recipient: USDT_RECIPIENT,\n-        network: window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet',\n-        simulateData: simulateData.request\n-      });\n-\n-      toast.loading('Preparing transaction...', {\n-        id: 'transaction',\n-      });\n-\n-      await writeContract(simulateData.request);\n-\n     } catch (err) {\n       console.error('Transaction error:', err);\n-      toast.error(getErrorMessage(err), {\n-        id: 'transaction',\n-      });\n+      toast.error(getErrorMessage(err), { id: 'transaction' });\n       setError(err);\n     }\n   };\n \n"
                },
                {
                    "date": 1733945464114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,9 @@\n   // Enhanced investment handler with better error handling and loading states\n   const handleConfirmInvestment = async () => {\n     try {\n       setError(null);\n+      setIsTransactionPending(true);\n       \n       if (!address) {\n         toast.error('Please connect your wallet first');\n         return;\n@@ -268,69 +269,73 @@\n         toast.error('Unable to process transaction. Please try again.');\n         return;\n       }\n \n-      // Show loading toast\n-      toast.loading('Preparing transaction...', { id: 'transaction' });\n+      // Show initial toast\n+      const toastId = toast.loading('Preparing transaction...', {\n+        duration: Infinity,\n+      });\n \n-      // Execute the transaction\n+      // Execute transaction\n       const hash = await writeContract(simulateData.request);\n       \n       if (!hash) {\n-        toast.error('Transaction failed', { id: 'transaction' });\n+        toast.error('Transaction failed', { id: toastId });\n         return;\n       }\n \n-      // Update loading toast\n-      toast.loading('Transaction submitted. Waiting for confirmation...', { id: 'transaction' });\n+      // Update toast while waiting\n+      toast.loading('Transaction submitted. Waiting for confirmation...', {\n+        id: toastId\n+      });\n \n       // Wait for transaction receipt\n-      const data = await waitForTransactionReceipt({ hash });\n+      const receipt = await waitForTransactionReceipt({ hash });\n \n-      if (!data) {\n-        toast.error('Failed to get transaction receipt', { id: 'transaction' });\n-        return;\n-      }\n+      if (receipt.status === 'success') {\n+        const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n+        const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n+        \n+        // Set transaction details\n+        setTransactionDetails({\n+          hash: receipt.transactionHash,\n+          from: address,\n+          to: USDT_RECIPIENT,\n+          network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n+          explorer: explorerUrl,\n+          gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n+        });\n \n-      // Prepare transaction details\n-      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n-      const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n-      \n-      const txDetails = {\n-        hash: data.transactionHash,\n-        from: data.from,\n-        to: data.to,\n-        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n-        explorer: explorerUrl,\n-        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\n-      };\n+        // Show success toast\n+        toast.success(\n+          <div className=\"flex flex-col\">\n+            <span>Investment Successful! 🎉</span>\n+            <span className=\"text-sm text-gray-500\">\n+              Amount: {investmentAmount} USDT\n+            </span>\n+            <a \n+              href={`${explorerUrl}/tx/${receipt.transactionHash}`}\n+              target=\"_blank\"\n+              rel=\"noopener noreferrer\"\n+              className=\"text-sm text-blue-500 hover:text-blue-600 mt-1\"\n+            >\n+              View on Explorer →\n+            </a>\n+          </div>,\n+          { id: toastId, duration: 5000 }\n+        );\n \n-      // Set transaction details and show receipt\n-      setTransactionDetails(txDetails);\n-      setShowReceipt(true);\n-      setIsModalOpen(false);\n+        // Show receipt modal\n+        setShowReceipt(true);\n+        setIsModalOpen(false);\n+      }\n \n-      // Show success toast\n-      toast.success(\n-        <div>\n-          <p className=\"font-medium\">Investment Successful! 🎉</p>\n-          <p className=\"text-sm text-gray-300\">Amount: {investmentAmount} USDT</p>\n-          <a \n-            href={`${explorerUrl}/tx/${data.transactionHash}`}\n-            target=\"_blank\"\n-            rel=\"noopener noreferrer\"\n-            className=\"text-sm text-blue-400 hover:text-blue-300 mt-1 block\"\n-          >\n-            View on Explorer →\n-          </a>\n-        </div>,\n-        { id: 'transaction', duration: 5000 }\n-      );\n-\n     } catch (err) {\n       console.error('Transaction error:', err);\n-      toast.error(getErrorMessage(err), { id: 'transaction' });\n+      toast.error(getErrorMessage(err));\n       setError(err);\n+    } finally {\n+      setIsTransactionPending(false);\n     }\n   };\n \n   // Update transaction receipt handling with better success feedback\n@@ -426,8 +431,10 @@\n       contractAddress: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']\n     });\n   }, []);\n \n+  const [isTransactionPending, setIsTransactionPending] = useState(false);\n+\n   return (\n     \n     <div className=\"min-h-screen bg-white\">\n       {/* Header */}\n@@ -773,21 +780,21 @@\n         disabled={\n           !investmentAmount ||\n           investmentAmount < 1 ||\n           Number(investmentAmount) > Number(usdtBalance) ||\n-          isTransactionLoading ||\n+          isTransactionPending ||\n           Boolean(error)\n         }\n         className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\n           investmentAmount >= 1 &&\n           Number(investmentAmount) <= Number(usdtBalance) &&\n-          !isTransactionLoading &&\n+          !isTransactionPending &&\n           !error\n             ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\n             : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n         }`}\n       >\n-        {isTransactionLoading ? (\n+        {isTransactionPending ? (\n           <div className=\"flex items-center justify-center space-x-2\">\n             <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n             <span>Processing Transaction...</span>\n           </div>\n@@ -820,19 +827,21 @@\n <BottomNavigation />\n       </div>\n \n       {/* Add Transaction Receipt */}\n-      <TransactionReceipt\n-        isOpen={showReceipt}\n-        onClose={() => setShowReceipt(false)}\n-        transaction={transactionDetails}\n-        investment={{\n-          title,\n-          assetType: \"Real Estate\",\n-          amount: investmentAmount,\n-          floatingapy,\n-          tenure: selectedTenure\n-        }}\n-      />\n+      {showReceipt && transactionDetails && (\n+        <TransactionReceipt\n+          isOpen={showReceipt}\n+          onClose={() => setShowReceipt(false)}\n+          transaction={transactionDetails}\n+          investment={{\n+            title,\n+            assetType: \"Real Estate\",\n+            amount: investmentAmount,\n+            floatingapy,\n+            tenure: selectedTenure\n+          }}\n+        />\n+      )}\n     </div>\n   );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733945996394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,50 @@\n   \n   return error.message || 'Transaction failed';\n };\n \n+// Add this component at the top level\n+const TransactionStatus = ({ status, message, error }) => {\n+  const getStatusColor = () => {\n+    switch (status) {\n+      case 'loading':\n+        return 'bg-blue-50 border-blue-200 text-blue-700';\n+      case 'success':\n+        return 'bg-green-50 border-green-200 text-green-700';\n+      case 'error':\n+        return 'bg-red-50 border-red-200 text-red-700';\n+      default:\n+        return 'bg-gray-50 border-gray-200 text-gray-700';\n+    }\n+  };\n+\n+  if (!status) return null;\n+\n+  return (\n+    <div className={`mt-4 p-4 rounded-xl border ${getStatusColor()}`}>\n+      <div className=\"flex items-center space-x-3\">\n+        {status === 'loading' && (\n+          <div className=\"w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n+        )}\n+        {status === 'success' && (\n+          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n+          </svg>\n+        )}\n+        {status === 'error' && (\n+          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n+          </svg>\n+        )}\n+        <div className=\"flex-1\">\n+          <p className=\"font-medium\">{message}</p>\n+          {error && <p className=\"text-sm mt-1 text-red-600\">{error}</p>}\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n export default function InvestmentDetail() {\n   const location = useLocation();\n   const [investmentAmount, setInvestmentAmount] = useState('');\n   const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\n@@ -241,62 +283,66 @@\n       setError(err);\n     }\n   });\n \n-  // Enhanced investment handler with better error handling and loading states\n+  // In your InvestmentDetail component, add a new state\n+  const [transactionStatus, setTransactionStatus] = useState(null);\n+\n+  // Update the handleConfirmInvestment function\n   const handleConfirmInvestment = async () => {\n     try {\n       setError(null);\n-      setIsTransactionPending(true);\n+      setTransactionStatus({\n+        status: 'loading',\n+        message: 'Preparing transaction...'\n+      });\n       \n       if (!address) {\n-        toast.error('Please connect your wallet first');\n+        setTransactionStatus({\n+          status: 'error',\n+          message: 'Wallet not connected',\n+          error: 'Please connect your wallet first'\n+        });\n         return;\n       }\n \n-      if (!USDT_RECIPIENT) {\n-        console.error('USDT recipient address not configured');\n-        toast.error('Configuration error: Recipient address not set');\n-        return;\n-      }\n-\n       if (!simulateData?.request) {\n-        console.error('Simulation data not available', {\n-          address,\n-          recipient: USDT_RECIPIENT,\n-          amount: investmentAmount,\n-          network: window.ethereum?.networkVersion\n+        setTransactionStatus({\n+          status: 'error',\n+          message: 'Simulation failed',\n+          error: 'Unable to process transaction. Please try again.'\n         });\n-        toast.error('Unable to process transaction. Please try again.');\n         return;\n       }\n \n-      // Show initial toast\n-      const toastId = toast.loading('Preparing transaction...', {\n-        duration: Infinity,\n+      // Execute transaction\n+      setTransactionStatus({\n+        status: 'loading',\n+        message: 'Waiting for wallet approval...'\n       });\n \n-      // Execute transaction\n       const hash = await writeContract(simulateData.request);\n       \n       if (!hash) {\n-        toast.error('Transaction failed', { id: toastId });\n+        setTransactionStatus({\n+          status: 'error',\n+          message: 'Transaction failed',\n+          error: 'Could not submit transaction'\n+        });\n         return;\n       }\n \n-      // Update toast while waiting\n-      toast.loading('Transaction submitted. Waiting for confirmation...', {\n-        id: toastId\n+      setTransactionStatus({\n+        status: 'loading',\n+        message: 'Transaction submitted, waiting for confirmation...'\n       });\n \n-      // Wait for transaction receipt\n       const receipt = await waitForTransactionReceipt({ hash });\n \n       if (receipt.status === 'success') {\n         const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n         const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n         \n-        // Set transaction details\n         setTransactionDetails({\n           hash: receipt.transactionHash,\n           from: address,\n           to: USDT_RECIPIENT,\n@@ -304,38 +350,28 @@\n           explorer: explorerUrl,\n           gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n         });\n \n-        // Show success toast\n-        toast.success(\n-          <div className=\"flex flex-col\">\n-            <span>Investment Successful! 🎉</span>\n-            <span className=\"text-sm text-gray-500\">\n-              Amount: {investmentAmount} USDT\n-            </span>\n-            <a \n-              href={`${explorerUrl}/tx/${receipt.transactionHash}`}\n-              target=\"_blank\"\n-              rel=\"noopener noreferrer\"\n-              className=\"text-sm text-blue-500 hover:text-blue-600 mt-1\"\n-            >\n-              View on Explorer →\n-            </a>\n-          </div>,\n-          { id: toastId, duration: 5000 }\n-        );\n+        setTransactionStatus({\n+          status: 'success',\n+          message: 'Transaction confirmed!',\n+          hash: receipt.transactionHash,\n+          explorerUrl\n+        });\n \n         // Show receipt modal\n         setShowReceipt(true);\n         setIsModalOpen(false);\n       }\n \n     } catch (err) {\n       console.error('Transaction error:', err);\n-      toast.error(getErrorMessage(err));\n+      setTransactionStatus({\n+        status: 'error',\n+        message: 'Transaction failed',\n+        error: getErrorMessage(err)\n+      });\n       setError(err);\n-    } finally {\n-      setIsTransactionPending(false);\n     }\n   };\n \n   // Update transaction receipt handling with better success feedback\n@@ -771,8 +807,29 @@\n           <div className=\"flex justify-between\">\n             <span className=\"text-sm text-gray-600\">Annual Yield</span>\n             <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n           </div>\n+\n+          {/* Add Transaction Status Box */}\n+          {transactionStatus && (\n+            <TransactionStatus \n+              status={transactionStatus.status}\n+              message={transactionStatus.message}\n+              error={transactionStatus.error}\n+            />\n+          )}\n+\n+          {transactionStatus?.status === 'success' && (\n+            <a \n+              href={`${transactionStatus.explorerUrl}/tx/${transactionStatus.hash}`}\n+              target=\"_blank\"\n+              rel=\"noopener noreferrer\"\n+              className=\"mt-2 text-sm text-blue-600 hover:text-blue-800 flex items-center justify-center space-x-1\"\n+            >\n+              <span>View on Explorer</span>\n+              <ArrowUpRight className=\"w-4 h-4\" />\n+            </a>\n+          )}\n         </div>\n       </div>\n \n       <button\n"
                },
                {
                    "date": 1733947478112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n   return error.message || 'Transaction failed';\n };\n \n // Add this component at the top level\n-const TransactionStatus = ({ status, message, error }) => {\n+const TransactionStatus = ({ status, message, error, details, hash, explorerUrl }) => {\n   const getStatusColor = () => {\n     switch (status) {\n       case 'loading':\n         return 'bg-blue-50 border-blue-200 text-blue-700';\n@@ -161,9 +161,21 @@\n           </svg>\n         )}\n         <div className=\"flex-1\">\n           <p className=\"font-medium\">{message}</p>\n+          {details && <p className=\"text-sm mt-1\">{details}</p>}\n           {error && <p className=\"text-sm mt-1 text-red-600\">{error}</p>}\n+          {status === 'success' && hash && explorerUrl && (\n+            <a \n+              href={`${explorerUrl}/tx/${hash}`}\n+              target=\"_blank\"\n+              rel=\"noopener noreferrer\"\n+              className=\"text-sm text-blue-600 hover:text-blue-800 flex items-center mt-2 space-x-1\"\n+            >\n+              <span>View on Explorer</span>\n+              <ArrowUpRight className=\"w-4 h-4\" />\n+            </a>\n+          )}\n         </div>\n       </div>\n     </div>\n   );\n@@ -319,53 +331,61 @@\n         status: 'loading',\n         message: 'Waiting for wallet approval...'\n       });\n \n-      const hash = await writeContract(simulateData.request);\n+      console.log('Sending transaction with data:', simulateData.request);\n       \n-      if (!hash) {\n+      try {\n+        const tx = await writeContract(simulateData.request);\n+        console.log('Transaction response:', tx);\n+\n         setTransactionStatus({\n-          status: 'error',\n-          message: 'Transaction failed',\n-          error: 'Could not submit transaction'\n+          status: 'loading',\n+          message: 'Transaction submitted, waiting for confirmation...'\n         });\n-        return;\n-      }\n \n-      setTransactionStatus({\n-        status: 'loading',\n-        message: 'Transaction submitted, waiting for confirmation...'\n-      });\n+        // Wait for transaction confirmation\n+        const receipt = await waitForTransactionReceipt({ hash: tx });\n+        console.log('Transaction receipt:', receipt);\n \n-      const receipt = await waitForTransactionReceipt({ hash });\n-\n-      if (receipt.status === 'success') {\n         const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n         const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n         \n-        setTransactionDetails({\n+        // Set transaction details\n+        const txDetails = {\n           hash: receipt.transactionHash,\n           from: address,\n           to: USDT_RECIPIENT,\n           network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n           explorer: explorerUrl,\n           gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n-        });\n+        };\n \n+        setTransactionDetails(txDetails);\n+        \n         setTransactionStatus({\n           status: 'success',\n-          message: 'Transaction confirmed!',\n+          message: 'Transaction confirmed! 🎉',\n           hash: receipt.transactionHash,\n-          explorerUrl\n+          explorerUrl,\n+          details: `Successfully invested ${investmentAmount} USDT`\n         });\n \n         // Show receipt modal\n         setShowReceipt(true);\n         setIsModalOpen(false);\n+\n+      } catch (txError) {\n+        console.error('Transaction execution error:', txError);\n+        setTransactionStatus({\n+          status: 'error',\n+          message: 'Transaction failed',\n+          error: txError.message || 'Could not submit transaction'\n+        });\n       }\n \n     } catch (err) {\n-      console.error('Transaction error:', err);\n+      console.error('Overall transaction error:', err);\n       setTransactionStatus({\n         status: 'error',\n         message: 'Transaction failed',\n         error: getErrorMessage(err)\n@@ -469,8 +489,15 @@\n   }, []);\n \n   const [isTransactionPending, setIsTransactionPending] = useState(false);\n \n+  const getButtonText = () => {\n+    if (!investmentAmount) return 'Enter Investment Amount';\n+    if (investmentAmount < 1) return 'Minimum $1 Required';\n+    if (Number(investmentAmount) > Number(usdtBalance)) return 'Insufficient Balance';\n+    return 'Confirm Investment';\n+  };\n+\n   return (\n     \n     <div className=\"min-h-screen bg-white\">\n       {/* Header */}\n@@ -689,10 +716,8 @@\n         </div>\n         {/* Modal */}\n         \n <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n-  \n-\n   <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\n     <button\n       className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\n         investmentType === 'crypto'\n@@ -715,10 +740,11 @@\n     </button>\n   </div>\n \n   {investmentType === 'crypto' ? (\n-    <>\n-      <div className=\"mt-6 p-5 bg-gray-50 rounded-xl border border-gray-200\">\n+    <div className=\"space-y-6\">\n+      {/* Wallet Connection Section */}\n+      <div className=\"p-5 bg-gray-50 rounded-xl border border-gray-200\">\n         <div className=\"mb-4\">\n           <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\n           <div className=\"flex items-center space-x-2\">\n             <Wallet className=\"w-4 h-4 text-gray-600\" />\n@@ -745,14 +771,15 @@\n           </div>\n         </div>\n       </div>\n \n-      <div className=\"mt-6 relative\">\n+      {/* Investment Amount Input */}\n+      <div className=\"relative\">\n         <div className=\"relative flex items-center\">\n           <input\n             type=\"number\"\n-            min=\"5000\"\n-            step=\"100\"\n+            min=\"1\"\n+            step=\"1\"\n             placeholder=\"0.00\"\n             value={investmentAmount}\n             onChange={(e) => setInvestmentAmount(e.target.value)}\n             className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\n@@ -761,117 +788,62 @@\n         </div>\n         <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\n       </div>\n \n-      <div className=\"mt-6\">\n+      {/* Transaction Status Box - Move it here */}\n+      {transactionStatus && (\n+        <TransactionStatus \n+          status={transactionStatus.status}\n+          message={transactionStatus.message}\n+          error={transactionStatus.error}\n+          details={transactionStatus.details}\n+          hash={transactionStatus.hash}\n+          explorerUrl={transactionStatus.explorerUrl}\n+        />\n+      )}\n+\n+      {/* Investment Details */}\n+      <div className=\"p-4 bg-gray-50 rounded-xl\">\n         <div className=\"flex justify-between mb-2\">\n-          <span className=\"text-sm text-gray-600\">Investment Tenure</span>\n-          <span className=\"text-sm font-medium\">{selectedTenure} months</span>\n+          <span className=\"text-sm text-gray-600\">Expected Return</span>\n+          <span className=\"text-sm font-medium\">\n+            {investmentAmount ? \n+              `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \n+              '-'\n+            }\n+          </span>\n         </div>\n-        \n-        <div className=\"relative mb-4\">\n-          <input\n-            type=\"range\"\n-            min={MIN_TENURE}\n-            max={MAX_TENURE}\n-            value={selectedTenure}\n-            onChange={(e) => setSelectedTenure(Number(e.target.value))}\n-            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n-          />\n-          <div \n-            className=\"absolute top-[-6px] w-1 h-4 bg-green-500\" \n-            style={{\n-              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n-              transform: 'translateX(-50%)'\n-            }}\n-          />\n-          <div className=\"absolute top-4 text-xs text-green-600\"\n-            style={{\n-              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n-              transform: 'translateX(-50%)'\n-            }}\n-          >\n-            Recommended\n-          </div>\n+        <div className=\"flex justify-between\">\n+          <span className=\"text-sm text-gray-600\">Annual Yield</span>\n+          <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n         </div>\n-\n-        <div className=\"p-4 bg-gray-50 rounded-xl\">\n-          <div className=\"flex justify-between mb-2\">\n-            <span className=\"text-sm text-gray-600\">Expected Return</span>\n-            <span className=\"text-sm font-medium\">\n-              {investmentAmount ? \n-                `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \n-                '-'\n-              }\n-            </span>\n-          </div>\n-          <div className=\"flex justify-between\">\n-            <span className=\"text-sm text-gray-600\">Annual Yield</span>\n-            <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n-          </div>\n-\n-          {/* Add Transaction Status Box */}\n-          {transactionStatus && (\n-            <TransactionStatus \n-              status={transactionStatus.status}\n-              message={transactionStatus.message}\n-              error={transactionStatus.error}\n-            />\n-          )}\n-\n-          {transactionStatus?.status === 'success' && (\n-            <a \n-              href={`${transactionStatus.explorerUrl}/tx/${transactionStatus.hash}`}\n-              target=\"_blank\"\n-              rel=\"noopener noreferrer\"\n-              className=\"mt-2 text-sm text-blue-600 hover:text-blue-800 flex items-center justify-center space-x-1\"\n-            >\n-              <span>View on Explorer</span>\n-              <ArrowUpRight className=\"w-4 h-4\" />\n-            </a>\n-          )}\n-        </div>\n       </div>\n \n+      {/* Confirm Button */}\n       <button\n         onClick={handleConfirmInvestment}\n         disabled={\n           !investmentAmount ||\n           investmentAmount < 1 ||\n           Number(investmentAmount) > Number(usdtBalance) ||\n-          isTransactionPending ||\n-          Boolean(error)\n+          isTransactionPending\n         }\n-        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\n-          investmentAmount >= 1 &&\n-          Number(investmentAmount) <= Number(usdtBalance) &&\n-          !isTransactionPending &&\n-          !error\n+        className={`w-full px-4 py-3 rounded-xl font-medium transition-all duration-200 ${\n+          !isTransactionPending && investmentAmount >= 1 && Number(investmentAmount) <= Number(usdtBalance)\n             ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\n             : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n         }`}\n       >\n         {isTransactionPending ? (\n           <div className=\"flex items-center justify-center space-x-2\">\n             <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n-            <span>Processing Transaction...</span>\n+            <span>Processing...</span>\n           </div>\n-        ) : error ? (\n-          <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n-            <span>⚠️</span>\n-            <span>{getErrorMessage(error)}</span>\n-          </div>\n-        ) : !investmentAmount ? (\n-          'Enter Investment Amount'\n-        ) : Number(investmentAmount) < 1 ? (\n-          'Minimum $1 Required'\n-        ) : Number(investmentAmount) > Number(usdtBalance) ? (\n-          'Insufficient Balance'\n         ) : (\n-          'Confirm Investment'\n+          getButtonText()\n         )}\n       </button>\n-    </>\n+    </div>\n   ) : (\n     <div className=\"py-12 px-4 text-center\">\n       <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n       <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\n"
                },
                {
                    "date": 1733948261060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,852 +25,13 @@\n import { parseUnits } from 'viem';\n import { \n   useWriteContract,\n   useWaitForTransactionReceipt,\n-  useSimulateContract\n+  useSimulateContract,\n+  waitForTransaction\n } from 'wagmi';\n import TransactionReceipt from '../components/TransactionReceipt';\n import toast from 'react-hot-toast';\n-import { Toaster } from 'react-hot-toast';\n \n-const DetailSection = ({ title, children }) => (\n-  <div className=\"border-b border-gray-200 py-6\">\n-    <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n-    {children}\n-  </div>\n-);\n-const BSC_SCAN_API_KEY = 'GH8RED93CMI9YPHPW9WDJFKJ27G3EU475T';\n-const USDT_CONTRACT_ADDRESSES = {\n-  mainnet: '0x55d398326f99059fF775485246999027B3197955',\n-  testnet: '0x53A5E28C96c5c886A56711021fFCA19650D20bBf'\n-};\n-\n-const BSC_SCAN_ENDPOINTS = {\n-  mainnet: 'https://api.bscscan.com/api',\n-  testnet: 'https://api-testnet.bscscan.com/api'\n-};\n-\n-const USDT_ABI = [\n-  {\n-    name: 'transfer',\n-    type: 'function',\n-    stateMutability: 'nonpayable',\n-    inputs: [\n-      { name: 'to', type: 'address' },\n-      { name: 'value', type: 'uint256' }\n-    ],\n-    outputs: [{ name: '', type: 'bool' }]\n-  },\n-  {\n-    name: 'balanceOf',\n-    type: 'function',\n-    stateMutability: 'view',\n-    inputs: [{ name: 'account', type: 'address' }],\n-    outputs: [{ name: '', type: 'uint256' }]\n-  },\n-  {\n-    name: 'decimals',\n-    type: 'function',\n-    stateMutability: 'view',\n-    inputs: [],\n-    outputs: [{ name: '', type: 'uint8' }]\n-  },\n-  {\n-    name: 'approve',\n-    type: 'function',\n-    stateMutability: 'nonpayable',\n-    inputs: [\n-      { name: 'spender', type: 'address' },\n-      { name: 'value', type: 'uint256' }\n-    ],\n-    outputs: [{ name: '', type: 'bool' }]\n-  }\n-];\n-\n-const StatCard = ({ label, value, subtext }) => (\n-  <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\n-    <p className=\"text-sm text-white-900 mb-1\">{label}</p>\n-    <p className=\"text-l font-semibold mb-1\">{value}</p>\n-    \n-  </div>\n-);\n-\n-const HighlightCard = ({ title, description, fullWidth }) => (\n-    <div className={`bg-gray-900 text-white p-8 rounded-2xl ${fullWidth ? 'col-span-full' : ''}`}>\n-      <h3 className=\"text-xl font-serif mb-4 text-cream\">{title}</h3>\n-      <p className=\"text-gray-300\">{description}</p>\n-    </div>\n-  );\n-\n const USDT_RECIPIENT = import.meta.env.VITE_USDT_RECIPIENT;\n \n-// Add this helper function for better error messages\n-const getErrorMessage = (error) => {\n-  if (!error) return 'Transaction failed';\n-  \n-  // Handle common errors\n-  if (error.message?.includes('insufficient funds')) {\n-    return 'Insufficient funds to cover gas fees';\n-  }\n-  if (error.message?.includes('user rejected')) {\n-    return 'Transaction was rejected';\n-  }\n-  if (error.message?.includes('allowance')) {\n-    return 'Please approve USDT spending first';\n-  }\n-  if (error.message?.includes('invalid address')) {\n-    return 'Invalid recipient address. Please try again.';\n-  }\n-  if (!USDT_RECIPIENT) {\n-    return 'Configuration error: Recipient address not set';\n-  }\n-  \n-  return error.message || 'Transaction failed';\n-};\n-\n-// Add this component at the top level\n-const TransactionStatus = ({ status, message, error, details, hash, explorerUrl }) => {\n-  const getStatusColor = () => {\n-    switch (status) {\n-      case 'loading':\n-        return 'bg-blue-50 border-blue-200 text-blue-700';\n-      case 'success':\n-        return 'bg-green-50 border-green-200 text-green-700';\n-      case 'error':\n-        return 'bg-red-50 border-red-200 text-red-700';\n-      default:\n-        return 'bg-gray-50 border-gray-200 text-gray-700';\n-    }\n-  };\n-\n-  if (!status) return null;\n-\n-  return (\n-    <div className={`mt-4 p-4 rounded-xl border ${getStatusColor()}`}>\n-      <div className=\"flex items-center space-x-3\">\n-        {status === 'loading' && (\n-          <div className=\"w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n-        )}\n-        {status === 'success' && (\n-          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n-            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n-          </svg>\n-        )}\n-        {status === 'error' && (\n-          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n-            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n-          </svg>\n-        )}\n-        <div className=\"flex-1\">\n-          <p className=\"font-medium\">{message}</p>\n-          {details && <p className=\"text-sm mt-1\">{details}</p>}\n-          {error && <p className=\"text-sm mt-1 text-red-600\">{error}</p>}\n-          {status === 'success' && hash && explorerUrl && (\n-            <a \n-              href={`${explorerUrl}/tx/${hash}`}\n-              target=\"_blank\"\n-              rel=\"noopener noreferrer\"\n-              className=\"text-sm text-blue-600 hover:text-blue-800 flex items-center mt-2 space-x-1\"\n-            >\n-              <span>View on Explorer</span>\n-              <ArrowUpRight className=\"w-4 h-4\" />\n-            </a>\n-          )}\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default function InvestmentDetail() {\n-  const location = useLocation();\n-  const [investmentAmount, setInvestmentAmount] = useState('');\n-  const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\n-  const [expanded, setExpanded] = useState(false);\n-  const [isModalOpen, setIsModalOpen] = useState(false);\n-  const { connectStatus, walletBalances } = useAppKit();\n-  const { address, isConnected } = useAccount();\n-  const [showAccountDetails, setShowAccountDetails] = useState(false);\n-  const [usdtBalance, setUsdtBalance] = useState('0.00');\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [investmentType, setInvestmentType] = useState('crypto'); // 'crypto' or 'fiat'\n-  // Add these near the top of InvestmentDetail component\n-const [selectedTenure, setSelectedTenure] = useState(24);\n-const MIN_TENURE = 3;\n-const MAX_TENURE = 24;\n-const RECOMMENDED_TENURE = 14;\n-const ANNUAL_RATE = parseFloat(floatingapy.replace('%', '')) / 100;// 9% APY\n-\n-// Add this helper function\n-const calculateExpectedReturn = (amount, tenure) => {\n-  if (!amount) return 0;\n-  const monthlyRate = ANNUAL_RATE / 12;\n-  return (amount * (1 + monthlyRate * tenure)).toFixed(2);\n-};\n-\n-  \n-  useEffect(() => {\n-    if (isConnected) {\n-      setShowAccountDetails(true);\n-    }\n-  }, [isConnected]);\n-\n-  const handleInvestNowClick = () => {\n-    setIsModalOpen(true);\n-  };\n-  // Add this useEffect to fetch balance when address changes\n-  useEffect(() => {\n-    const fetchUSDTBalance = async () => {\n-      if (!address || !isConnected) return;\n-\n-      setIsLoading(true);\n-      try {\n-        const networkType = window.ethereum.networkVersion === '97' ? 'testnet' : 'mainnet';\n-        const response = await axios.get(\n-          `${BSC_SCAN_ENDPOINTS[networkType]}?module=account&action=tokenbalance&contractaddress=${USDT_CONTRACT_ADDRESSES[networkType]}&address=${address}&tag=latest&apikey=${BSC_SCAN_API_KEY}`\n-        );\n-\n-        const balance = response.data.result;\n-        if (balance) {\n-          // Convert balance to human-readable format (USDT has 18 decimals)\n-          setUsdtBalance((parseFloat(balance) / 10 ** 18).toFixed(2));\n-        } else {\n-          console.error('Failed to fetch balance:', response.data.message);\n-        }\n-      } catch (error) {\n-        console.error('Error fetching USDT balance:', error);\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    };\n-\n-    fetchUSDTBalance();\n-  }, [address, isConnected]);\n-\n-  const [showReceipt, setShowReceipt] = useState(false);\n-  const [transactionDetails, setTransactionDetails] = useState(null);\n-\n-  // Add error state\n-  const [error, setError] = useState(null);\n-\n-  // Update simulate contract with better error handling\n-  const { data: simulateData, error: simulateError } = useSimulateContract({\n-    address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\n-    abi: USDT_ABI,\n-    functionName: 'transfer',\n-    args: [\n-      USDT_RECIPIENT,\n-      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\n-    ],\n-    enabled: Boolean(investmentAmount && investmentAmount >= 1 && address && USDT_RECIPIENT),\n-    onError(err) {\n-      console.error('Simulation error:', {\n-        error: err,\n-        recipient: USDT_RECIPIENT,\n-        amount: investmentAmount,\n-        address\n-      });\n-      toast.error(getErrorMessage(err), {\n-        id: 'simulation-error',\n-      });\n-      setError(err);\n-    }\n-  });\n-\n-  // Add logging to debug contract interaction\n-  useEffect(() => {\n-    if (simulateData) {\n-      console.log('Simulation data:', simulateData);\n-      console.log('Contract address:', USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']);\n-      console.log('Network:', window.ethereum?.networkVersion);\n-      console.log('Recipient:', USDT_RECIPIENT);\n-      console.log('Amount:', investmentAmount);\n-    }\n-  }, [simulateData, investmentAmount]);\n-\n-  // Update contract write with loading and error states\n-  const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\n-    onError(err) {\n-      console.error('Write contract error:', err);\n-      toast.error('Transaction failed. Please try again.');\n-      setError(err);\n-    }\n-  });\n-\n-  // In your InvestmentDetail component, add a new state\n-  const [transactionStatus, setTransactionStatus] = useState(null);\n-\n-  // Update the handleConfirmInvestment function\n-  const handleConfirmInvestment = async () => {\n-    try {\n-      setError(null);\n-      setTransactionStatus({\n-        status: 'loading',\n-        message: 'Preparing transaction...'\n-      });\n-      \n-      if (!address) {\n-        setTransactionStatus({\n-          status: 'error',\n-          message: 'Wallet not connected',\n-          error: 'Please connect your wallet first'\n-        });\n-        return;\n-      }\n-\n-      if (!simulateData?.request) {\n-        setTransactionStatus({\n-          status: 'error',\n-          message: 'Simulation failed',\n-          error: 'Unable to process transaction. Please try again.'\n-        });\n-        return;\n-      }\n-\n-      // Execute transaction\n-      setTransactionStatus({\n-        status: 'loading',\n-        message: 'Waiting for wallet approval...'\n-      });\n-\n-      console.log('Sending transaction with data:', simulateData.request);\n-      \n-      try {\n-        const tx = await writeContract(simulateData.request);\n-        console.log('Transaction response:', tx);\n-\n-        setTransactionStatus({\n-          status: 'loading',\n-          message: 'Transaction submitted, waiting for confirmation...'\n-        });\n-\n-        // Wait for transaction confirmation\n-        const receipt = await waitForTransactionReceipt({ hash: tx });\n-        console.log('Transaction receipt:', receipt);\n-\n-        const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n-        const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n-        \n-        // Set transaction details\n-        const txDetails = {\n-          hash: receipt.transactionHash,\n-          from: address,\n-          to: USDT_RECIPIENT,\n-          network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n-          explorer: explorerUrl,\n-          gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n-        };\n-\n-        setTransactionDetails(txDetails);\n-        \n-        setTransactionStatus({\n-          status: 'success',\n-          message: 'Transaction confirmed! 🎉',\n-          hash: receipt.transactionHash,\n-          explorerUrl,\n-          details: `Successfully invested ${investmentAmount} USDT`\n-        });\n-\n-        // Show receipt modal\n-        setShowReceipt(true);\n-        setIsModalOpen(false);\n-\n-      } catch (txError) {\n-        console.error('Transaction execution error:', txError);\n-        setTransactionStatus({\n-          status: 'error',\n-          message: 'Transaction failed',\n-          error: txError.message || 'Could not submit transaction'\n-        });\n-      }\n-\n-    } catch (err) {\n-      console.error('Overall transaction error:', err);\n-      setTransactionStatus({\n-        status: 'error',\n-        message: 'Transaction failed',\n-        error: getErrorMessage(err)\n-      });\n-      setError(err);\n-    }\n-  };\n-\n-  // Update transaction receipt handling with better success feedback\n-  const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\n-    hash: simulateData?.hash,\n-    onSuccess(data) {\n-      console.log('Transaction successful:', data);\n-      \n-      // Clear any existing error toasts\n-      toast.dismiss('transaction');\n-      toast.dismiss('simulation-error');\n-\n-      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n-      const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\n-      \n-      const txDetails = {\n-        hash: data.transactionHash,\n-        from: address,\n-        to: USDT_RECIPIENT,\n-        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n-        explorer: explorerUrl,\n-        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\n-      };\n-\n-      console.log('Transaction details:', txDetails);\n-      setTransactionDetails(txDetails);\n-      \n-      setShowReceipt(true);\n-      setIsModalOpen(false);\n-\n-      // Show success toast with transaction details\n-      toast.success(\n-        <div>\n-          <p className=\"font-medium\">Investment Successful! 🎉</p>\n-          <p className=\"text-sm text-gray-500\">Amount: {investmentAmount} USDT</p>\n-          <a \n-            href={`${explorerUrl}/tx/${data.transactionHash}`}\n-            target=\"_blank\"\n-            rel=\"noopener noreferrer\"\n-            className=\"text-sm text-blue-500 hover:text-blue-600\"\n-          >\n-            View on Explorer →\n-          </a>\n-        </div>,\n-        {\n-          duration: 5000,\n-          style: {\n-            minWidth: '300px',\n-          },\n-        }\n-      );\n-    },\n-    onError(err) {\n-      console.error('Transaction wait error:', err);\n-      toast.error(getErrorMessage(err), {\n-        id: 'transaction',\n-      });\n-      setError(err);\n-    }\n-  });\n-\n-  // Add this effect to handle loading state toasts\n-  useEffect(() => {\n-    if (isTransactionLoading) {\n-      toast.loading('Processing transaction...', {\n-        id: 'transaction',\n-      });\n-    }\n-  }, [isTransactionLoading]);\n-\n-  // Effect to handle errors\n-  useEffect(() => {\n-    if (simulateError || writeError || waitError) {\n-      const errorMessage = (simulateError || writeError || waitError)?.message || 'Transaction failed';\n-      console.error('Transaction error:', {\n-        simulateError,\n-        writeError,\n-        waitError\n-      });\n-      toast.error(errorMessage);\n-    }\n-  }, [simulateError, writeError, waitError]);\n-\n-  const handleCloseModal = () => {\n-    setIsModalOpen(false);\n-  };\n-\n-  // Add this for debugging\n-  useEffect(() => {\n-    console.log('Environment variables:', {\n-      USDT_RECIPIENT,\n-      networkVersion: window.ethereum?.networkVersion,\n-      contractAddress: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']\n-    });\n-  }, []);\n-\n-  const [isTransactionPending, setIsTransactionPending] = useState(false);\n-\n-  const getButtonText = () => {\n-    if (!investmentAmount) return 'Enter Investment Amount';\n-    if (investmentAmount < 1) return 'Minimum $1 Required';\n-    if (Number(investmentAmount) > Number(usdtBalance)) return 'Insufficient Balance';\n-    return 'Confirm Investment';\n-  };\n-\n-  return (\n-    \n-    <div className=\"min-h-screen bg-white\">\n-      {/* Header */}\n-      <div className=\"bg-[rgba(18,24,39)] bg-cover bg-no-repeat p-6 text-white\">\n-        <div className=\"max-w-3xl mx-auto\">\n-          <div className=\"flex items-center space-x-2 text-sm mb-4\">\n-            <span className=\"bg-blue-500 px-2 py-1 rounded\">{hashtag}</span>\n-            <span className=\"text-gray-400\">•</span>\n-            <span className=\"text-gray-400\">Institutional Grade</span>\n-            <span className=\"text-gray-400\">•</span>\n-            <span className=\"bg-green-500 px-2 py-1 rounded\">Active</span>\n-          </div>\n-          \n-          <h1 className=\"text-xl font-bold mb-6\">{title}</h1>\n-          \n-          <div className=\"grid grid-cols-3 gap-6\">\n-            <StatCard \n-              label=\"Variable APY\" \n-              value={floatingapy} \n-              subtext=\"Bi-annual redemption\"\n-            />\n-            <StatCard \n-              label=\"Minimum Investment\" \n-              value=\"$1\"\n-              subtext=\"Total capacity: $250,000\"\n-            />\n-            <StatCard \n-              label=\"Lock-in Period\" \n-              value=\"24months\"\n-              subtext=\"Bi-annual redemption\"\n-            />\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Main Content */}\n-      <div className=\"max-w-3xl mx-auto px-6 pb-24\">\n-        {/* Provider Info */}\n-        <div className=\"py-6 flex items-center justify-between\">\n-          <div className=\"flex items-center space-x-3\">\n-            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n-              <Building2 className=\"w-6 h-6 text-gray-600\" />\n-            </div>\n-            <div>\n-              <p className=\"font-semibold\">Pixx Finance</p>\n-              <p className=\"text-sm text-gray-600\">Investment Provider</p>\n-            </div>\n-          </div>\n-          <div className=\"flex items-center space-x-2\">\n-            <BadgeCheck className=\"w-5 h-5 text-blue-600\" />\n-            <span className=\"text-sm text-gray-600\">Verified Provider</span>\n-          </div>\n-        </div>\n-\n-        <DetailSection title=\"Investment Overview\">\n-          <div className=\"prose text-gray-700\">\n-            <p className=\"mb-4\">\n-                {description}\n-            </p>\n-            <div className={`transition-all duration-300 ${expanded ? 'h-auto' : 'h-20 overflow-hidden'}`}>\n-              <p className=\"mb-4\">\n-                This institutional-grade real estate investment opportunity provides exposure to Dubai's premium property market. The portfolio consists of carefully selected luxury properties in prime locations, managed by experienced real estate professionals.\n-              </p>\n-              <p>\n-                With a focus on both capital appreciation and consistent rental yields, this investment vehicle is structured to provide regular bi-annual returns while benefiting from Dubai's robust real estate market growth.\n-              </p>\n-            </div>\n-            <button \n-              onClick={() => setExpanded(!expanded)}\n-              className=\"flex items-center text-blue-600 space-x-1 mt-2\"\n-            >\n-              <span>{expanded ? 'Show less' : 'Read more'}</span>\n-              <ChevronDown className={`w-4 h-4 transition-transform ${expanded ? 'rotate-180' : ''}`} />\n-            </button>\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Key Info \">\n-          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n-            <StatCard \n-              label=\"Total Invested\" \n-              value=\"$5,000\"\n-              subtext=\"Minimum investment\"\n-            />\n-            <StatCard \n-              label=\"Available Capacity\" \n-              value=\"$250,000\"\n-              subtext=\"Total pool size\"\n-            />\n-            <StatCard \n-              label=\"Expected Returns\" \n-              value=\"9% APY\"\n-              subtext=\"Bi-annual distribution\"\n-            />\n-            <StatCard \n-              label=\"Lock-in Period\" \n-              value=\"24 months\"\n-              subtext=\"Bi-annual redemption available\"\n-            />\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Highlights\">\n-          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n-            <HighlightCard\n-              fullWidth\n-              title=\"Premium Real Estate Portfolio\"\n-              description=\"Access institutional-grade properties in Dubai's most sought-after locations. Our portfolio consists of luxury residential and commercial properties selected for their prime positioning and strong rental demand, offering both capital appreciation and stable rental yields.\"\n-            />\n-            <HighlightCard\n-              title=\"Professional Management\"\n-              description=\"Expert property management team handles tenant selection, maintenance, and optimization of rental yields, ensuring hassle-free ownership and maximum returns.\"\n-            />\n-            <HighlightCard\n-              title=\"Flexible Investment\"\n-              description=\"Bi-annual redemption windows available after the initial 24-month lock-in period. Invest using either cryptocurrency or traditional fiat currency.\"\n-            />\n-            <HighlightCard\n-              title=\"Market Growth Potential\"\n-              description=\"Benefit from Dubai's robust real estate market, supported by strong economic fundamentals, growing population, and status as a global business hub.\"\n-            />\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Payment Methods\">\n-          <div className=\"grid grid-cols-2 gap-6\">\n-            <div className=\"flex items-start space-x-3\">\n-              <DollarSign className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Fiat Currency</h4>\n-                <p className=\"text-sm text-gray-600\">Bank transfer, Card payments</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <Bitcoin className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Cryptocurrency</h4>\n-                <p className=\"text-sm text-gray-600\">BTC, ETH, USDT, USDC</p>\n-              </div>\n-            </div>\n-          </div>\n-        </DetailSection>\n-\n-        <DetailSection title=\"Key Features\">\n-          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n-            <div className=\"flex items-start space-x-3\">\n-              <Shield className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Institutional Grade</h4>\n-                <p className=\"text-sm text-gray-600\">Professional management and security</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <Calendar className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Bi-annual Redemption</h4>\n-                <p className=\"text-sm text-gray-600\">Flexible exit options available</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <Wallet className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Multiple Payment Options</h4>\n-                <p className=\"text-sm text-gray-600\">Choose between crypto and fiat</p>\n-              </div>\n-            </div>\n-            <div className=\"flex items-start space-x-3\">\n-              <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n-              <div>\n-                <h4 className=\"font-medium mb-1\">Market Growth</h4>\n-                <p className=\"text-sm text-gray-600\">Exposure to Dubai's premium market</p>\n-              </div>\n-            </div>\n-          </div>\n-        </DetailSection>\n-\n-        {/* Documents Section */}\n-        <DetailSection title=\"Documents\">\n-          <div className=\"space-y-4\">\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n-              <div className=\"flex items-center space-x-3\">\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\n-                <span>Investment Memorandum</span>\n-              </div>\n-              <Download className=\"w-5 h-5 text-gray-600\" />\n-            </button>\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n-              <div className=\"flex items-center space-x-3\">\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\n-                <span>Property Portfolio Details</span>\n-              </div>\n-              <Download className=\"w-5 h-5 text-gray-600\" />\n-            </button>\n-            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n-              <div className=\"flex items-center space-x-3\">\n-                <FileText className=\"w-5 h-5 text-gray-600\" />\n-                <span>Terms & Conditions</span>\n-              </div>\n-              <Download className=\"w-5 h-5 text-gray-600\" />\n-            </button>\n-          </div>\n-        </DetailSection>\n-      </div>\n-\n-      {/* Fixed Bottom CTA */}\n-      <div className=\"fixed bottom-10 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n-        <div className=\"max-w-3xl mx-auto flex items-center justify-between\">\n-          <div>\n-            <p className=\"text-sm text-gray-600\">Minimum Investment</p>\n-            <p className=\"text-2xl font-semibold\">$1</p>\n-          </div>\n-          <button onClick={handleInvestNowClick} className=\"bg-[#d71921] text-white px-8 py-3 rounded-lg font-medium hover:bg-[#b5171a] transition-colors flex items-center space-x-2\">\n-            <span>Invest Now</span>\n-            <ArrowUpRight className=\"w-4 h-4\" />\n-          </button>\n-        </div>\n-        {/* Modal */}\n-        \n-<Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n-  <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\n-    <button\n-      className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\n-        investmentType === 'crypto'\n-          ? 'bg-white text-gray-900 shadow'\n-          : 'text-gray-600 hover:text-gray-900'\n-      }`}\n-      onClick={() => setInvestmentType('crypto')}\n-    >\n-      Invest via Stablecoin\n-    </button>\n-    <button\n-      className={`flex-1 py-1 text-xsm font-medium rounded-lg transition-all ${\n-        investmentType === 'fiat'\n-          ? 'bg-white text-gray-900 shadow'\n-          : 'text-gray-600 hover:text-gray-900'\n-      }`}\n-      onClick={() => setInvestmentType('fiat')}\n-    >\n-      Invest via Fiat Currency\n-    </button>\n-  </div>\n-\n-  {investmentType === 'crypto' ? (\n-    <div className=\"space-y-6\">\n-      {/* Wallet Connection Section */}\n-      <div className=\"p-5 bg-gray-50 rounded-xl border border-gray-200\">\n-        <div className=\"mb-4\">\n-          <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\n-          <div className=\"flex items-center space-x-2\">\n-            <Wallet className=\"w-4 h-4 text-gray-600\" />\n-            <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\n-          </div>\n-        </div>\n-\n-        <div className=\"pt-4 border-t border-gray-200\">\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center space-x-2\">\n-              <img src=\"https://imgur.com/5NgRebx.png\" alt=\"USDT\" className=\"w-6 h-6\" />\n-              <span className=\"text-sm text-gray-600\">USDT Balance</span>\n-            </div>\n-            <p className=\"text-sm font-medium\">\n-              {isLoading ? (\n-                <span className=\"flex items-center space-x-2\">\n-                  <span className=\"w-4 h-4 border-2 border-gray-300 border-t-[#d71921] rounded-full animate-spin\" />\n-                  <span className=\"text-gray-500\">Loading...</span>\n-                </span>\n-              ) : (\n-                <span className=\"font-mono\">{usdtBalance} USDT</span>\n-              )}\n-            </p>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Investment Amount Input */}\n-      <div className=\"relative\">\n-        <div className=\"relative flex items-center\">\n-          <input\n-            type=\"number\"\n-            min=\"1\"\n-            step=\"1\"\n-            placeholder=\"0.00\"\n-            value={investmentAmount}\n-            onChange={(e) => setInvestmentAmount(e.target.value)}\n-            className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\n-          />\n-          <div className=\"absolute right-4 text-gray-400\">USDT</div>\n-        </div>\n-        <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\n-      </div>\n-\n-      {/* Transaction Status Box - Move it here */}\n-      {transactionStatus && (\n-        <TransactionStatus \n-          status={transactionStatus.status}\n-          message={transactionStatus.message}\n-          error={transactionStatus.error}\n-          details={transactionStatus.details}\n-          hash={transactionStatus.hash}\n-          explorerUrl={transactionStatus.explorerUrl}\n-        />\n-      )}\n-\n-      {/* Investment Details */}\n-      <div className=\"p-4 bg-gray-50 rounded-xl\">\n-        <div className=\"flex justify-between mb-2\">\n-          <span className=\"text-sm text-gray-600\">Expected Return</span>\n-          <span className=\"text-sm font-medium\">\n-            {investmentAmount ? \n-              `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \n-              '-'\n-            }\n-          </span>\n-        </div>\n-        <div className=\"flex justify-between\">\n-          <span className=\"text-sm text-gray-600\">Annual Yield</span>\n-          <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n-        </div>\n-      </div>\n-\n-      {/* Confirm Button */}\n-      <button\n-        onClick={handleConfirmInvestment}\n-        disabled={\n-          !investmentAmount ||\n-          investmentAmount < 1 ||\n-          Number(investmentAmount) > Number(usdtBalance) ||\n-          isTransactionPending\n-        }\n-        className={`w-full px-4 py-3 rounded-xl font-medium transition-all duration-200 ${\n-          !isTransactionPending && investmentAmount >= 1 && Number(investmentAmount) <= Number(usdtBalance)\n-            ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\n-            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n-        }`}\n-      >\n-        {isTransactionPending ? (\n-          <div className=\"flex items-center justify-center space-x-2\">\n-            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n-            <span>Processing...</span>\n-          </div>\n-        ) : (\n-          getButtonText()\n-        )}\n-      </button>\n-    </div>\n-  ) : (\n-    <div className=\"py-12 px-4 text-center\">\n-      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n-      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\n-      <p className=\"text-sm text-gray-600 max-w-sm mx-auto\">\n-        Thorough compliance checks are required to enable investments through your local currency.\n-      </p>\n-    </div>\n-  )}\n-</Modal>\n-<BottomNavigation />\n-      </div>\n-\n-      {/* Add Transaction Receipt */}\n-      {showReceipt && transactionDetails && (\n-        <TransactionReceipt\n-          isOpen={showReceipt}\n-          onClose={() => setShowReceipt(false)}\n-          transaction={transactionDetails}\n-          investment={{\n-            title,\n-            assetType: \"Real Estate\",\n-            amount: investmentAmount,\n-            floatingapy,\n-            tenure: selectedTenure\n-          }}\n-        />\n-      )}\n-    </div>\n\\ No newline at end of file\n-  );\n-}\n+[... rest of the file remains exactly the same ...]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733948360111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,903 @@\n import { parseUnits } from 'viem';\n import { \n   useWriteContract,\n   useWaitForTransactionReceipt,\n-  useSimulateContract,\n-  waitForTransaction\n+  useSimulateContract\n } from 'wagmi';\n import TransactionReceipt from '../components/TransactionReceipt';\n import toast from 'react-hot-toast';\n+import { Toaster } from 'react-hot-toast';\n \n+const DetailSection = ({ title, children }) => (\n\\ No newline at end of file\n+  <div className=\"border-b border-gray-200 py-6\">\n+    <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n+    {children}\n+  </div>\n+);\n+const BSC_SCAN_API_KEY = 'GH8RED93CMI9YPHPW9WDJFKJ27G3EU475T';\n+const USDT_CONTRACT_ADDRESSES = {\n+  mainnet: '0x55d398326f99059fF775485246999027B3197955',\n+  testnet: '0x53A5E28C96c5c886A56711021fFCA19650D20bBf'\n+};\n+\n+const BSC_SCAN_ENDPOINTS = {\n+  mainnet: 'https://api.bscscan.com/api',\n+  testnet: 'https://api-testnet.bscscan.com/api'\n+};\n+\n+const USDT_ABI = [\n+  {\n+    name: 'transfer',\n+    type: 'function',\n+    stateMutability: 'nonpayable',\n+    inputs: [\n+      { name: 'to', type: 'address' },\n+      { name: 'value', type: 'uint256' }\n+    ],\n+    outputs: [{ name: '', type: 'bool' }]\n+  },\n+  {\n+    name: 'balanceOf',\n+    type: 'function',\n+    stateMutability: 'view',\n+    inputs: [{ name: 'account', type: 'address' }],\n+    outputs: [{ name: '', type: 'uint256' }]\n+  },\n+  {\n+    name: 'decimals',\n+    type: 'function',\n+    stateMutability: 'view',\n+    inputs: [],\n+    outputs: [{ name: '', type: 'uint8' }]\n+  },\n+  {\n+    name: 'approve',\n+    type: 'function',\n+    stateMutability: 'nonpayable',\n+    inputs: [\n+      { name: 'spender', type: 'address' },\n+      { name: 'value', type: 'uint256' }\n+    ],\n+    outputs: [{ name: '', type: 'bool' }]\n+  }\n+];\n+\n+const StatCard = ({ label, value, subtext }) => (\n+  <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\n+    <p className=\"text-sm text-white-900 mb-1\">{label}</p>\n+    <p className=\"text-l font-semibold mb-1\">{value}</p>\n+    \n+  </div>\n+);\n+\n+const HighlightCard = ({ title, description, fullWidth }) => (\n+    <div className={`bg-gray-900 text-white p-8 rounded-2xl ${fullWidth ? 'col-span-full' : ''}`}>\n+      <h3 className=\"text-xl font-serif mb-4 text-cream\">{title}</h3>\n+      <p className=\"text-gray-300\">{description}</p>\n+    </div>\n+  );\n+\n const USDT_RECIPIENT = import.meta.env.VITE_USDT_RECIPIENT;\n \n-[... rest of the file remains exactly the same ...]\n+// Add this helper function for better error messages\n+const getErrorMessage = (error) => {\n+  if (!error) return 'Transaction failed';\n+  \n+  // Handle common errors\n+  if (error.message?.includes('insufficient funds')) {\n+    return 'Insufficient funds to cover gas fees';\n+  }\n+  if (error.message?.includes('user rejected')) {\n+    return 'Transaction was rejected';\n+  }\n+  if (error.message?.includes('allowance')) {\n+    return 'Please approve USDT spending first';\n+  }\n+  if (error.message?.includes('invalid address')) {\n+    return 'Invalid recipient address. Please try again.';\n+  }\n+  if (!USDT_RECIPIENT) {\n+    return 'Configuration error: Recipient address not set';\n+  }\n+  \n+  return error.message || 'Transaction failed';\n+};\n+\n+// Add this component at the top level\n+const TransactionStatus = ({ status, message, error, details, hash, explorerUrl }) => {\n+  const getStatusColor = () => {\n+    switch (status) {\n+      case 'loading':\n+        return 'bg-blue-50 border-blue-200 text-blue-700';\n+      case 'success':\n+        return 'bg-green-50 border-green-200 text-green-700';\n+      case 'error':\n+        return 'bg-red-50 border-red-200 text-red-700';\n+      default:\n+        return 'bg-gray-50 border-gray-200 text-gray-700';\n+    }\n+  };\n+\n+  if (!status) return null;\n+\n+  return (\n+    <div className={`mt-4 p-4 rounded-xl border ${getStatusColor()}`}>\n+      <div className=\"flex items-center space-x-3\">\n+        {status === 'loading' && (\n+          <div className=\"w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n+        )}\n+        {status === 'success' && (\n+          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n+          </svg>\n+        )}\n+        {status === 'error' && (\n+          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n+          </svg>\n+        )}\n+        <div className=\"flex-1\">\n+          <p className=\"font-medium\">{message}</p>\n+          {details && <p className=\"text-sm mt-1\">{details}</p>}\n+          {error && <p className=\"text-sm mt-1 text-red-600\">{error}</p>}\n+          {status === 'success' && hash && explorerUrl && (\n+            <a \n+              href={`${explorerUrl}/tx/${hash}`}\n+              target=\"_blank\"\n+              rel=\"noopener noreferrer\"\n+              className=\"text-sm text-blue-600 hover:text-blue-800 flex items-center mt-2 space-x-1\"\n+            >\n+              <span>View on Explorer</span>\n+              <ArrowUpRight className=\"w-4 h-4\" />\n+            </a>\n+          )}\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default function InvestmentDetail() {\n+  const location = useLocation();\n+  const [investmentAmount, setInvestmentAmount] = useState('');\n+  const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\n+  const [expanded, setExpanded] = useState(false);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const { connectStatus, walletBalances } = useAppKit();\n+  const { address, isConnected } = useAccount();\n+  const [showAccountDetails, setShowAccountDetails] = useState(false);\n+  const [usdtBalance, setUsdtBalance] = useState('0.00');\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [investmentType, setInvestmentType] = useState('crypto'); // 'crypto' or 'fiat'\n+  // Add these near the top of InvestmentDetail component\n+const [selectedTenure, setSelectedTenure] = useState(24);\n+const MIN_TENURE = 3;\n+const MAX_TENURE = 24;\n+const RECOMMENDED_TENURE = 14;\n+const ANNUAL_RATE = parseFloat(floatingapy.replace('%', '')) / 100;// 9% APY\n+\n+// Add this helper function\n+const calculateExpectedReturn = (amount, tenure) => {\n+  if (!amount) return 0;\n+  const monthlyRate = ANNUAL_RATE / 12;\n+  return (amount * (1 + monthlyRate * tenure)).toFixed(2);\n+};\n+\n+  \n+  useEffect(() => {\n+    if (isConnected) {\n+      setShowAccountDetails(true);\n+    }\n+  }, [isConnected]);\n+\n+  const handleInvestNowClick = () => {\n+    setIsModalOpen(true);\n+  };\n+  // Add this useEffect to fetch balance when address changes\n+  useEffect(() => {\n+    const fetchUSDTBalance = async () => {\n+      if (!address || !isConnected) return;\n+\n+      setIsLoading(true);\n+      try {\n+        const networkType = window.ethereum.networkVersion === '97' ? 'testnet' : 'mainnet';\n+        const response = await axios.get(\n+          `${BSC_SCAN_ENDPOINTS[networkType]}?module=account&action=tokenbalance&contractaddress=${USDT_CONTRACT_ADDRESSES[networkType]}&address=${address}&tag=latest&apikey=${BSC_SCAN_API_KEY}`\n+        );\n+\n+        const balance = response.data.result;\n+        if (balance) {\n+          // Convert balance to human-readable format (USDT has 18 decimals)\n+          setUsdtBalance((parseFloat(balance) / 10 ** 18).toFixed(2));\n+        } else {\n+          console.error('Failed to fetch balance:', response.data.message);\n+        }\n+      } catch (error) {\n+        console.error('Error fetching USDT balance:', error);\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    fetchUSDTBalance();\n+  }, [address, isConnected]);\n+\n+  const [showReceipt, setShowReceipt] = useState(false);\n+  const [transactionDetails, setTransactionDetails] = useState(null);\n+\n+  // Add error state\n+  const [error, setError] = useState(null);\n+\n+  // Update simulate contract with better error handling\n+  const { data: simulateData, error: simulateError } = useSimulateContract({\n+    address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\n+    abi: USDT_ABI,\n+    functionName: 'transfer',\n+    args: [\n+      USDT_RECIPIENT,\n+      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : 0n\n+    ],\n+    enabled: Boolean(investmentAmount && investmentAmount >= 1 && address && USDT_RECIPIENT),\n+    onError(err) {\n+      console.error('Simulation error:', {\n+        error: err,\n+        recipient: USDT_RECIPIENT,\n+        amount: investmentAmount,\n+        address\n+      });\n+      toast.error(getErrorMessage(err), {\n+        id: 'simulation-error',\n+      });\n+      setError(err);\n+    }\n+  });\n+\n+  // Add logging to debug contract interaction\n+  useEffect(() => {\n+    if (simulateData) {\n+      console.log('Simulation data:', simulateData);\n+      console.log('Contract address:', USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']);\n+      console.log('Network:', window.ethereum?.networkVersion);\n+      console.log('Recipient:', USDT_RECIPIENT);\n+      console.log('Amount:', investmentAmount);\n+    }\n+  }, [simulateData, investmentAmount]);\n+\n+  // Update contract write with loading and error states\n+  const { writeContract, isLoading: isTransactionLoading, error: writeError } = useWriteContract({\n+    onError(err) {\n+      console.error('Write contract error:', err);\n+      toast.error('Transaction failed. Please try again.');\n+      setError(err);\n+    }\n+  });\n+\n+  // In your InvestmentDetail component, add a new state\n+  const [transactionStatus, setTransactionStatus] = useState(null);\n+\n+  // Update the handleConfirmInvestment function\n+  const handleConfirmInvestment = async () => {\n+    try {\n+      setError(null);\n+      setTransactionStatus({\n+        status: 'loading',\n+        message: 'Preparing transaction...'\n+      });\n+      \n+      if (!address) {\n+        setTransactionStatus({\n+          status: 'error',\n+          message: 'Wallet not connected',\n+          error: 'Please connect your wallet first'\n+        });\n+        return;\n+      }\n+\n+      if (!simulateData?.request) {\n+        setTransactionStatus({\n+          status: 'error',\n+          message: 'Simulation failed',\n+          error: 'Unable to process transaction. Please try again.'\n+        });\n+        return;\n+      }\n+\n+      // Execute transaction\n+      setTransactionStatus({\n+        status: 'loading',\n+        message: 'Waiting for wallet approval...'\n+      });\n+\n+      console.log('Sending transaction with data:', simulateData.request);\n+      \n+      try {\n+        const tx = await writeContract(simulateData.request);\n+        console.log('Transaction response:', tx);\n+\n+        setTransactionStatus({\n+          status: 'loading',\n+          message: 'Transaction submitted, waiting for confirmation...'\n+        });\n+\n+        // Wait for transaction confirmation\n+        const receipt = await waitForTransactionReceipt({ hash: tx });\n+        console.log('Transaction receipt:', receipt);\n+\n+        const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n+        const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n+        \n+        // Set transaction details\n+        const txDetails = {\n+          hash: receipt.transactionHash,\n+          from: address,\n+          to: USDT_RECIPIENT,\n+          network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n+          explorer: explorerUrl,\n+          gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n+        };\n+\n+        setTransactionDetails(txDetails);\n+        \n+        setTransactionStatus({\n+          status: 'success',\n+          message: 'Transaction confirmed! 🎉',\n+          hash: receipt.transactionHash,\n+          explorerUrl,\n+          details: `Successfully invested ${investmentAmount} USDT`\n+        });\n+\n+        // Show receipt modal\n+        setShowReceipt(true);\n+        setIsModalOpen(false);\n+\n+      } catch (txError) {\n+        console.error('Transaction execution error:', txError);\n+        setTransactionStatus({\n+          status: 'error',\n+          message: 'Transaction failed',\n+          error: txError.message || 'Could not submit transaction'\n+        });\n+      }\n+\n+    } catch (err) {\n+      console.error('Overall transaction error:', err);\n+      setTransactionStatus({\n+        status: 'error',\n+        message: 'Transaction failed',\n+        error: getErrorMessage(err)\n+      });\n+      setError(err);\n+    }\n+  };\n+\n+  // Update transaction receipt handling with better success feedback\n+  const { isSuccess, isError, error: waitError } = useWaitForTransactionReceipt({\n+    hash: simulateData?.hash,\n+    onSuccess(data) {\n+      console.log('Transaction successful:', data);\n+      \n+      // Clear any existing error toasts\n+      toast.dismiss('transaction');\n+      toast.dismiss('simulation-error');\n+\n+      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n+      const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\n+      \n+      const txDetails = {\n+        hash: data.transactionHash,\n+        from: address,\n+        to: USDT_RECIPIENT,\n+        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n+        explorer: explorerUrl,\n+        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\n+      };\n+\n+      console.log('Transaction details:', txDetails);\n+      setTransactionDetails(txDetails);\n+      \n+      setShowReceipt(true);\n+      setIsModalOpen(false);\n+\n+      // Show success toast with transaction details\n+      toast.success(\n+        <div>\n+          <p className=\"font-medium\">Investment Successful! 🎉</p>\n+          <p className=\"text-sm text-gray-500\">Amount: {investmentAmount} USDT</p>\n+          <a \n+            href={`${explorerUrl}/tx/${data.transactionHash}`}\n+            target=\"_blank\"\n+            rel=\"noopener noreferrer\"\n+            className=\"text-sm text-blue-500 hover:text-blue-600\"\n+          >\n+            View on Explorer →\n+          </a>\n+        </div>,\n+        {\n+          duration: 5000,\n+          style: {\n+            minWidth: '300px',\n+          },\n+        }\n+      );\n+    },\n+    onError(err) {\n+      console.error('Transaction wait error:', err);\n+      toast.error(getErrorMessage(err), {\n+        id: 'transaction',\n+      });\n+      setError(err);\n+    }\n+  });\n+\n+  // Add this effect to handle loading state toasts\n+  useEffect(() => {\n+    if (isTransactionLoading) {\n+      toast.loading('Processing transaction...', {\n+        id: 'transaction',\n+      });\n+    }\n+  }, [isTransactionLoading]);\n+\n+  // Effect to handle errors\n+  useEffect(() => {\n+    if (simulateError || writeError || waitError) {\n+      const errorMessage = (simulateError || writeError || waitError)?.message || 'Transaction failed';\n+      console.error('Transaction error:', {\n+        simulateError,\n+        writeError,\n+        waitError\n+      });\n+      toast.error(errorMessage);\n+    }\n+  }, [simulateError, writeError, waitError]);\n+\n+  const handleCloseModal = () => {\n+    setIsModalOpen(false);\n+  };\n+\n+  // Add this for debugging\n+  useEffect(() => {\n+    console.log('Environment variables:', {\n+      USDT_RECIPIENT,\n+      networkVersion: window.ethereum?.networkVersion,\n+      contractAddress: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet']\n+    });\n+  }, []);\n+\n+  const [isTransactionPending, setIsTransactionPending] = useState(false);\n+\n+  return (\n+    \n+    <div className=\"min-h-screen bg-white\">\n+      {/* Header */}\n+      <div className=\"bg-[rgba(18,24,39)] bg-cover bg-no-repeat p-6 text-white\">\n+        <div className=\"max-w-3xl mx-auto\">\n+          <div className=\"flex items-center space-x-2 text-sm mb-4\">\n+            <span className=\"bg-blue-500 px-2 py-1 rounded\">{hashtag}</span>\n+            <span className=\"text-gray-400\">•</span>\n+            <span className=\"text-gray-400\">Institutional Grade</span>\n+            <span className=\"text-gray-400\">•</span>\n+            <span className=\"bg-green-500 px-2 py-1 rounded\">Active</span>\n+          </div>\n+          \n+          <h1 className=\"text-xl font-bold mb-6\">{title}</h1>\n+          \n+          <div className=\"grid grid-cols-3 gap-6\">\n+            <StatCard \n+              label=\"Variable APY\" \n+              value={floatingapy} \n+              subtext=\"Bi-annual redemption\"\n+            />\n+            <StatCard \n+              label=\"Minimum Investment\" \n+              value=\"$1\"\n+              subtext=\"Total capacity: $250,000\"\n+            />\n+            <StatCard \n+              label=\"Lock-in Period\" \n+              value=\"24months\"\n+              subtext=\"Bi-annual redemption\"\n+            />\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Main Content */}\n+      <div className=\"max-w-3xl mx-auto px-6 pb-24\">\n+        {/* Provider Info */}\n+        <div className=\"py-6 flex items-center justify-between\">\n+          <div className=\"flex items-center space-x-3\">\n+            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n+              <Building2 className=\"w-6 h-6 text-gray-600\" />\n+            </div>\n+            <div>\n+              <p className=\"font-semibold\">Pixx Finance</p>\n+              <p className=\"text-sm text-gray-600\">Investment Provider</p>\n+            </div>\n+          </div>\n+          <div className=\"flex items-center space-x-2\">\n+            <BadgeCheck className=\"w-5 h-5 text-blue-600\" />\n+            <span className=\"text-sm text-gray-600\">Verified Provider</span>\n+          </div>\n+        </div>\n+\n+        <DetailSection title=\"Investment Overview\">\n+          <div className=\"prose text-gray-700\">\n+            <p className=\"mb-4\">\n+                {description}\n+            </p>\n+            <div className={`transition-all duration-300 ${expanded ? 'h-auto' : 'h-20 overflow-hidden'}`}>\n+              <p className=\"mb-4\">\n+                This institutional-grade real estate investment opportunity provides exposure to Dubai's premium property market. The portfolio consists of carefully selected luxury properties in prime locations, managed by experienced real estate professionals.\n+              </p>\n+              <p>\n+                With a focus on both capital appreciation and consistent rental yields, this investment vehicle is structured to provide regular bi-annual returns while benefiting from Dubai's robust real estate market growth.\n+              </p>\n+            </div>\n+            <button \n+              onClick={() => setExpanded(!expanded)}\n+              className=\"flex items-center text-blue-600 space-x-1 mt-2\"\n+            >\n+              <span>{expanded ? 'Show less' : 'Read more'}</span>\n+              <ChevronDown className={`w-4 h-4 transition-transform ${expanded ? 'rotate-180' : ''}`} />\n+            </button>\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Key Info \">\n+          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n+            <StatCard \n+              label=\"Total Invested\" \n+              value=\"$5,000\"\n+              subtext=\"Minimum investment\"\n+            />\n+            <StatCard \n+              label=\"Available Capacity\" \n+              value=\"$250,000\"\n+              subtext=\"Total pool size\"\n+            />\n+            <StatCard \n+              label=\"Expected Returns\" \n+              value=\"9% APY\"\n+              subtext=\"Bi-annual distribution\"\n+            />\n+            <StatCard \n+              label=\"Lock-in Period\" \n+              value=\"24 months\"\n+              subtext=\"Bi-annual redemption available\"\n+            />\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Highlights\">\n+          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+            <HighlightCard\n+              fullWidth\n+              title=\"Premium Real Estate Portfolio\"\n+              description=\"Access institutional-grade properties in Dubai's most sought-after locations. Our portfolio consists of luxury residential and commercial properties selected for their prime positioning and strong rental demand, offering both capital appreciation and stable rental yields.\"\n+            />\n+            <HighlightCard\n+              title=\"Professional Management\"\n+              description=\"Expert property management team handles tenant selection, maintenance, and optimization of rental yields, ensuring hassle-free ownership and maximum returns.\"\n+            />\n+            <HighlightCard\n+              title=\"Flexible Investment\"\n+              description=\"Bi-annual redemption windows available after the initial 24-month lock-in period. Invest using either cryptocurrency or traditional fiat currency.\"\n+            />\n+            <HighlightCard\n+              title=\"Market Growth Potential\"\n+              description=\"Benefit from Dubai's robust real estate market, supported by strong economic fundamentals, growing population, and status as a global business hub.\"\n+            />\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Payment Methods\">\n+          <div className=\"grid grid-cols-2 gap-6\">\n+            <div className=\"flex items-start space-x-3\">\n+              <DollarSign className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Fiat Currency</h4>\n+                <p className=\"text-sm text-gray-600\">Bank transfer, Card payments</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Bitcoin className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Cryptocurrency</h4>\n+                <p className=\"text-sm text-gray-600\">BTC, ETH, USDT, USDC</p>\n+              </div>\n+            </div>\n+          </div>\n+        </DetailSection>\n+\n+        <DetailSection title=\"Key Features\">\n+          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n+            <div className=\"flex items-start space-x-3\">\n+              <Shield className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Institutional Grade</h4>\n+                <p className=\"text-sm text-gray-600\">Professional management and security</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Calendar className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Bi-annual Redemption</h4>\n+                <p className=\"text-sm text-gray-600\">Flexible exit options available</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <Wallet className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Multiple Payment Options</h4>\n+                <p className=\"text-sm text-gray-600\">Choose between crypto and fiat</p>\n+              </div>\n+            </div>\n+            <div className=\"flex items-start space-x-3\">\n+              <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n+              <div>\n+                <h4 className=\"font-medium mb-1\">Market Growth</h4>\n+                <p className=\"text-sm text-gray-600\">Exposure to Dubai's premium market</p>\n+              </div>\n+            </div>\n+          </div>\n+        </DetailSection>\n+\n+        {/* Documents Section */}\n+        <DetailSection title=\"Documents\">\n+          <div className=\"space-y-4\">\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Investment Memorandum</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Property Portfolio Details</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n+              <div className=\"flex items-center space-x-3\">\n+                <FileText className=\"w-5 h-5 text-gray-600\" />\n+                <span>Terms & Conditions</span>\n+              </div>\n+              <Download className=\"w-5 h-5 text-gray-600\" />\n+            </button>\n+          </div>\n+        </DetailSection>\n+      </div>\n+\n+      {/* Fixed Bottom CTA */}\n+      <div className=\"fixed bottom-10 left-0 right-0 bg-white border-t border-gray-200 p-4\">\n+        <div className=\"max-w-3xl mx-auto flex items-center justify-between\">\n+          <div>\n+            <p className=\"text-sm text-gray-600\">Minimum Investment</p>\n+            <p className=\"text-2xl font-semibold\">$1</p>\n+          </div>\n+          <button onClick={handleInvestNowClick} className=\"bg-[#d71921] text-white px-8 py-3 rounded-lg font-medium hover:bg-[#b5171a] transition-colors flex items-center space-x-2\">\n+            <span>Invest Now</span>\n+            <ArrowUpRight className=\"w-4 h-4\" />\n+          </button>\n+        </div>\n+        {/* Modal */}\n+        \n+<Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n+  \n+\n+  <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\n+    <button\n+      className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\n+        investmentType === 'crypto'\n+          ? 'bg-white text-gray-900 shadow'\n+          : 'text-gray-600 hover:text-gray-900'\n+      }`}\n+      onClick={() => setInvestmentType('crypto')}\n+    >\n+      Invest via Stablecoin\n+    </button>\n+    <button\n+      className={`flex-1 py-1 text-xsm font-medium rounded-lg transition-all ${\n+        investmentType === 'fiat'\n+          ? 'bg-white text-gray-900 shadow'\n+          : 'text-gray-600 hover:text-gray-900'\n+      }`}\n+      onClick={() => setInvestmentType('fiat')}\n+    >\n+      Invest via Fiat Currency\n+    </button>\n+  </div>\n+\n+  {investmentType === 'crypto' ? (\n+    <>\n+      <div className=\"mt-6 p-5 bg-gray-50 rounded-xl border border-gray-200\">\n+        <div className=\"mb-4\">\n+          <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\n+          <div className=\"flex items-center space-x-2\">\n+            <Wallet className=\"w-4 h-4 text-gray-600\" />\n+            <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\n+          </div>\n+        </div>\n+\n+        <div className=\"pt-4 border-t border-gray-200\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center space-x-2\">\n+              <img src=\"https://imgur.com/5NgRebx.png\" alt=\"USDT\" className=\"w-6 h-6\" />\n+              <span className=\"text-sm text-gray-600\">USDT Balance</span>\n+            </div>\n+            <p className=\"text-sm font-medium\">\n+              {isLoading ? (\n+                <span className=\"flex items-center space-x-2\">\n+                  <span className=\"w-4 h-4 border-2 border-gray-300 border-t-[#d71921] rounded-full animate-spin\" />\n+                  <span className=\"text-gray-500\">Loading...</span>\n+                </span>\n+              ) : (\n+                <span className=\"font-mono\">{usdtBalance} USDT</span>\n+              )}\n+            </p>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <div className=\"mt-6 relative\">\n+        <div className=\"relative flex items-center\">\n+          <input\n+            type=\"number\"\n+            min=\"5000\"\n+            step=\"100\"\n+            placeholder=\"0.00\"\n+            value={investmentAmount}\n+            onChange={(e) => setInvestmentAmount(e.target.value)}\n+            className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\n+          />\n+          <div className=\"absolute right-4 text-gray-400\">USDT</div>\n+        </div>\n+        <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\n+      </div>\n+\n+      <div className=\"mt-6\">\n+        <div className=\"flex justify-between mb-2\">\n+          <span className=\"text-sm text-gray-600\">Investment Tenure</span>\n+          <span className=\"text-sm font-medium\">{selectedTenure} months</span>\n+        </div>\n+        \n+        <div className=\"relative mb-4\">\n+          <input\n+            type=\"range\"\n+            min={MIN_TENURE}\n+            max={MAX_TENURE}\n+            value={selectedTenure}\n+            onChange={(e) => setSelectedTenure(Number(e.target.value))}\n+            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n+          />\n+          <div \n+            className=\"absolute top-[-6px] w-1 h-4 bg-green-500\" \n+            style={{\n+              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n+              transform: 'translateX(-50%)'\n+            }}\n+          />\n+          <div className=\"absolute top-4 text-xs text-green-600\"\n+            style={{\n+              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\n+              transform: 'translateX(-50%)'\n+            }}\n+          >\n+            Recommended\n+          </div>\n+        </div>\n+\n+        <div className=\"p-4 bg-gray-50 rounded-xl\">\n+          <div className=\"flex justify-between mb-2\">\n+            <span className=\"text-sm text-gray-600\">Expected Return</span>\n+            <span className=\"text-sm font-medium\">\n+              {investmentAmount ? \n+                `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \n+                '-'\n+              }\n+            </span>\n+          </div>\n+          <div className=\"flex justify-between\">\n+            <span className=\"text-sm text-gray-600\">Annual Yield</span>\n+            <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\n+          </div>\n+\n+          {/* Add Transaction Status Box */}\n+          {transactionStatus && (\n+            <TransactionStatus \n+              status={transactionStatus.status}\n+              message={transactionStatus.message}\n+              error={transactionStatus.error}\n+              details={transactionStatus.details}\n+              hash={transactionStatus.hash}\n+              explorerUrl={transactionStatus.explorerUrl}\n+            />\n+          )}\n+\n+          {transactionStatus?.status === 'success' && (\n+            <a \n+              href={`${transactionStatus.explorerUrl}/tx/${transactionStatus.hash}`}\n+              target=\"_blank\"\n+              rel=\"noopener noreferrer\"\n+              className=\"mt-2 text-sm text-blue-600 hover:text-blue-800 flex items-center justify-center space-x-1\"\n+            >\n+              <span>View on Explorer</span>\n+              <ArrowUpRight className=\"w-4 h-4\" />\n+            </a>\n+          )}\n+        </div>\n+      </div>\n+\n+      <button\n+        onClick={handleConfirmInvestment}\n+        disabled={\n+          !investmentAmount ||\n+          investmentAmount < 1 ||\n+          Number(investmentAmount) > Number(usdtBalance) ||\n+          isTransactionPending ||\n+          Boolean(error)\n+        }\n+        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 relative ${\n+          investmentAmount >= 1 &&\n+          Number(investmentAmount) <= Number(usdtBalance) &&\n+          !isTransactionPending &&\n+          !error\n+            ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\n+            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n+        }`}\n+      >\n+        {isTransactionPending ? (\n+          <div className=\"flex items-center justify-center space-x-2\">\n+            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n+            <span>Processing Transaction...</span>\n+          </div>\n+        ) : error ? (\n+          <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n+            <span>⚠️</span>\n+            <span>{getErrorMessage(error)}</span>\n+          </div>\n+        ) : !investmentAmount ? (\n+          'Enter Investment Amount'\n+        ) : Number(investmentAmount) < 1 ? (\n+          'Minimum $1 Required'\n+        ) : Number(investmentAmount) > Number(usdtBalance) ? (\n+          'Insufficient Balance'\n+        ) : (\n+          'Confirm Investment'\n+        )}\n+      </button>\n+    </>\n+  ) : (\n+    <div className=\"py-12 px-4 text-center\">\n+      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n+      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\n+      <p className=\"text-sm text-gray-600 max-w-sm mx-auto\">\n+        Thorough compliance checks are required to enable investments through your local currency.\n+      </p>\n+    </div>\n+  )}\n+</Modal>\n+<BottomNavigation />\n+      </div>\n+\n+      {/* Add Transaction Receipt */}\n+      {showReceipt && transactionDetails && (\n+        <TransactionReceipt\n+          isOpen={showReceipt}\n+          onClose={() => setShowReceipt(false)}\n+          transaction={transactionDetails}\n+          investment={{\n+            title,\n+            assetType: \"Real Estate\",\n+            amount: investmentAmount,\n+            floatingapy,\n+            tenure: selectedTenure\n+          }}\n+        />\n+      )}\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733948522668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,10 @@\n import { parseUnits } from 'viem';\n import { \n   useWriteContract,\n   useWaitForTransactionReceipt,\n-  useSimulateContract\n+  useSimulateContract,\n+  waitForTransaction\n } from 'wagmi';\n import TransactionReceipt from '../components/TransactionReceipt';\n import toast from 'react-hot-toast';\n import { Toaster } from 'react-hot-toast';\n@@ -342,10 +343,10 @@\n           status: 'loading',\n           message: 'Transaction submitted, waiting for confirmation...'\n         });\n \n-        // Wait for transaction confirmation\n-        const receipt = await waitForTransactionReceipt({ hash: tx });\n+        // Change waitForTransactionReceipt to waitForTransaction\n+        const receipt = await waitForTransaction({ hash: tx });\n         console.log('Transaction receipt:', receipt);\n \n         const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n         const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n"
                },
                {
                    "date": 1733948581712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n   waitForTransaction\n } from 'wagmi';\n import TransactionReceipt from '../components/TransactionReceipt';\n import toast from 'react-hot-toast';\n-import { Toaster } from 'react-hot-toast';\n \n const DetailSection = ({ title, children }) => (\n   <div className=\"border-b border-gray-200 py-6\">\n     <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n"
                },
                {
                    "date": 1733950320478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,9 @@\n import { parseUnits } from 'viem';\n import { \n   useWriteContract,\n   useWaitForTransactionReceipt,\n-  useSimulateContract,\n-  waitForTransaction\n+  useSimulateContract\n } from 'wagmi';\n import TransactionReceipt from '../components/TransactionReceipt';\n import toast from 'react-hot-toast';\n \n@@ -325,56 +324,62 @@\n         });\n         return;\n       }\n \n-      // Execute transaction\n       setTransactionStatus({\n         status: 'loading',\n         message: 'Waiting for wallet approval...'\n       });\n \n       console.log('Sending transaction with data:', simulateData.request);\n       \n       try {\n-        const tx = await writeContract(simulateData.request);\n-        console.log('Transaction response:', tx);\n+        const hash = await writeContract(simulateData.request);\n+        console.log('Transaction hash:', hash);\n \n         setTransactionStatus({\n           status: 'loading',\n           message: 'Transaction submitted, waiting for confirmation...'\n         });\n \n-        // Change waitForTransactionReceipt to waitForTransaction\n-        const receipt = await waitForTransaction({ hash: tx });\n-        console.log('Transaction receipt:', receipt);\n+        // Use useWaitForTransactionReceipt hook\n+        const { isSuccess, isError, data: receipt } = useWaitForTransactionReceipt({\n+          hash,\n+        });\n \n-        const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n-        const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n-        \n-        // Set transaction details\n-        const txDetails = {\n-          hash: receipt.transactionHash,\n-          from: address,\n-          to: USDT_RECIPIENT,\n-          network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n-          explorer: explorerUrl,\n-          gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n-        };\n+        if (isSuccess && receipt) {\n+          console.log('Transaction receipt:', receipt);\n \n-        setTransactionDetails(txDetails);\n-        \n-        setTransactionStatus({\n-          status: 'success',\n-          message: 'Transaction confirmed! 🎉',\n-          hash: receipt.transactionHash,\n-          explorerUrl,\n-          details: `Successfully invested ${investmentAmount} USDT`\n-        });\n+          const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n+          const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n+          \n+          const txDetails = {\n+            hash: receipt.transactionHash,\n+            from: address,\n+            to: USDT_RECIPIENT,\n+            network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n+            explorer: explorerUrl,\n+            gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n+          };\n \n-        // Show receipt modal\n-        setShowReceipt(true);\n-        setIsModalOpen(false);\n+          setTransactionDetails(txDetails);\n+          \n+          setTransactionStatus({\n+            status: 'success',\n+            message: 'Transaction confirmed! 🎉',\n+            hash: receipt.transactionHash,\n+            explorerUrl,\n+            details: `Successfully invested ${investmentAmount} USDT`\n+          });\n \n+          setShowReceipt(true);\n+          setIsModalOpen(false);\n+        }\n+\n+        if (isError) {\n+          throw new Error('Transaction failed');\n+        }\n+\n       } catch (txError) {\n         console.error('Transaction execution error:', txError);\n         setTransactionStatus({\n           status: 'error',\n"
                },
                {
                    "date": 1733950805980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,68 +329,20 @@\n         status: 'loading',\n         message: 'Waiting for wallet approval...'\n       });\n \n-      console.log('Sending transaction with data:', simulateData.request);\n-      \n-      try {\n-        const hash = await writeContract(simulateData.request);\n-        console.log('Transaction hash:', hash);\n+      const hash = await writeContract(simulateData.request);\n+      console.log('Transaction hash:', hash);\n \n-        setTransactionStatus({\n-          status: 'loading',\n-          message: 'Transaction submitted, waiting for confirmation...'\n-        });\n+      setTransactionStatus({\n+        status: 'loading',\n+        message: 'Transaction submitted, waiting for confirmation...'\n+      });\n \n-        // Use useWaitForTransactionReceipt hook\n-        const { isSuccess, isError, data: receipt } = useWaitForTransactionReceipt({\n-          hash,\n-        });\n+      setTxHash(hash); // Set hash to trigger confirmation watching\n \n-        if (isSuccess && receipt) {\n-          console.log('Transaction receipt:', receipt);\n-\n-          const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n-          const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n-          \n-          const txDetails = {\n-            hash: receipt.transactionHash,\n-            from: address,\n-            to: USDT_RECIPIENT,\n-            network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n-            explorer: explorerUrl,\n-            gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n-          };\n-\n-          setTransactionDetails(txDetails);\n-          \n-          setTransactionStatus({\n-            status: 'success',\n-            message: 'Transaction confirmed! 🎉',\n-            hash: receipt.transactionHash,\n-            explorerUrl,\n-            details: `Successfully invested ${investmentAmount} USDT`\n-          });\n-\n-          setShowReceipt(true);\n-          setIsModalOpen(false);\n-        }\n-\n-        if (isError) {\n-          throw new Error('Transaction failed');\n-        }\n-\n-      } catch (txError) {\n-        console.error('Transaction execution error:', txError);\n-        setTransactionStatus({\n-          status: 'error',\n-          message: 'Transaction failed',\n-          error: txError.message || 'Could not submit transaction'\n-        });\n-      }\n-\n     } catch (err) {\n-      console.error('Overall transaction error:', err);\n+      console.error('Transaction error:', err);\n       setTransactionStatus({\n         status: 'error',\n         message: 'Transaction failed',\n         error: getErrorMessage(err)\n@@ -493,9 +445,60 @@\n     });\n   }, []);\n \n   const [isTransactionPending, setIsTransactionPending] = useState(false);\n+  const [txHash, setTxHash] = useState(null);\n \n+  // Move the hook to component level\n+  const { \n+    isSuccess: isConfirmed,\n+    isError: isConfirmationError,\n+    data: receipt \n+  } = useWaitForTransactionReceipt({\n+    hash: txHash,\n+    enabled: Boolean(txHash),\n+  });\n+\n+  // Effect to handle transaction confirmation\n+  useEffect(() => {\n+    if (isConfirmed && receipt) {\n+      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\n+      const explorerUrl = `https://${networkType === 'testnet' ? 'testnet.' : ''}bscscan.com`;\n+      \n+      const txDetails = {\n+        hash: receipt.transactionHash,\n+        from: address,\n+        to: USDT_RECIPIENT,\n+        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\n+        explorer: explorerUrl,\n+        gasSpent: (receipt.gasUsed * receipt.effectiveGasPrice / 1e18).toFixed(6)\n+      };\n+\n+      setTransactionDetails(txDetails);\n+      \n+      setTransactionStatus({\n+        status: 'success',\n+        message: 'Transaction confirmed! 🎉',\n+        hash: receipt.transactionHash,\n+        explorerUrl,\n+        details: `Successfully invested ${investmentAmount} USDT`\n+      });\n+\n+      setShowReceipt(true);\n+      setIsModalOpen(false);\n+      setTxHash(null); // Reset hash after successful confirmation\n+    }\n+\n+    if (isConfirmationError) {\n+      setTransactionStatus({\n+        status: 'error',\n+        message: 'Transaction failed',\n+        error: 'Failed to confirm transaction'\n+      });\n+      setTxHash(null); // Reset hash after error\n+    }\n+  }, [isConfirmed, isConfirmationError, receipt, investmentAmount, address]);\n+\n   return (\n     \n     <div className=\"min-h-screen bg-white\">\n       {/* Header */}\n"
                }
            ],
            "date": 1733941057320,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useCallback } from 'react';\r\nimport Modal from '../components/Modal';\r\nimport ConnectButton from '../ConnectButton';\r\nimport { useAppKit } from '@reown/appkit/react';\r\nimport BottomNavigation from '../components/BottomNavigation';\r\nimport { useAccount } from 'wagmi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ethers } from 'ethers';\r\nimport axios from 'axios';\r\nimport { \r\n  ChevronDown, \r\n  ArrowUpRight, \r\n  FileText, \r\n  Shield, \r\n  Building2, \r\n  Calendar,\r\n  TrendingUp,\r\n  Wallet,\r\n  Clock,\r\n  BadgeCheck,\r\n  Download,\r\n  DollarSign,\r\n  Bitcoin\r\n} from 'lucide-react';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { useContractWrite, usePrepareContractWrite, useWaitForTransaction } from 'wagmi';\r\nimport TransactionReceipt from '../components/TransactionReceipt';\r\n\r\nconst DetailSection = ({ title, children }) => (\r\n  <div className=\"border-b border-gray-200 py-6\">\r\n    <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\r\n    {children}\r\n  </div>\r\n);\r\nconst BSC_SCAN_API_KEY = 'GH8RED93CMI9YPHPW9WDJFKJ27G3EU475T';\r\nconst USDT_CONTRACT_ADDRESSES = {\r\n  mainnet: '0x55d398326f99059fF775485246999027B3197955',\r\n  testnet: '0x53A5E28C96c5c886A56711021fFCA19650D20bBf'\r\n};\r\n\r\nconst BSC_SCAN_ENDPOINTS = {\r\n  mainnet: 'https://api.bscscan.com/api',\r\n  testnet: 'https://api-testnet.bscscan.com/api'\r\n};\r\n\r\nconst USDT_ABI = [\r\n  'function transfer(address to, uint256 value) returns (bool)',\r\n  'function balanceOf(address) view returns (uint256)',\r\n  'function decimals() view returns (uint8)',\r\n  'function approve(address spender, uint256 value) returns (bool)'\r\n];\r\n\r\nconst StatCard = ({ label, value, subtext }) => (\r\n  <div className=\"bg-[rgba(31,41,45,0.3)] rounded-xl p-4\">\r\n    <p className=\"text-sm text-white-900 mb-1\">{label}</p>\r\n    <p className=\"text-l font-semibold mb-1\">{value}</p>\r\n    \r\n  </div>\r\n);\r\n\r\nconst HighlightCard = ({ title, description, fullWidth }) => (\r\n    <div className={`bg-gray-900 text-white p-8 rounded-2xl ${fullWidth ? 'col-span-full' : ''}`}>\r\n      <h3 className=\"text-xl font-serif mb-4 text-cream\">{title}</h3>\r\n      <p className=\"text-gray-300\">{description}</p>\r\n    </div>\r\n  );\r\n\r\n  \r\n\r\nexport default function InvestmentDetail() {\r\n  const location = useLocation();\r\n  const [investmentAmount, setInvestmentAmount] = useState('');\r\n  const { card, title, floatingapy,description,hashtag, backgroundImageUrl} = location.state || {};\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const { connectStatus, walletBalances } = useAppKit();\r\n  const { address, isConnected } = useAccount();\r\n  const [showAccountDetails, setShowAccountDetails] = useState(false);\r\n  const [usdtBalance, setUsdtBalance] = useState('0.00');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [investmentType, setInvestmentType] = useState('crypto'); // 'crypto' or 'fiat'\r\n  // Add these near the top of InvestmentDetail component\r\nconst [selectedTenure, setSelectedTenure] = useState(24);\r\nconst MIN_TENURE = 3;\r\nconst MAX_TENURE = 24;\r\nconst RECOMMENDED_TENURE = 14;\r\nconst ANNUAL_RATE = parseFloat(floatingapy.replace('%', '')) / 100;// 9% APY\r\n\r\n// Add this helper function\r\nconst calculateExpectedReturn = (amount, tenure) => {\r\n  if (!amount) return 0;\r\n  const monthlyRate = ANNUAL_RATE / 12;\r\n  return (amount * (1 + monthlyRate * tenure)).toFixed(2);\r\n};\r\n\r\n  \r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      setShowAccountDetails(true);\r\n    }\r\n  }, [isConnected]);\r\n\r\n  const handleInvestNowClick = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n  // Add this useEffect to fetch balance when address changes\r\n  useEffect(() => {\r\n    const fetchUSDTBalance = async () => {\r\n      if (!address || !isConnected) return;\r\n\r\n      setIsLoading(true);\r\n      try {\r\n        const networkType = window.ethereum.networkVersion === '97' ? 'testnet' : 'mainnet';\r\n        const response = await axios.get(\r\n          `${BSC_SCAN_ENDPOINTS[networkType]}?module=account&action=tokenbalance&contractaddress=${USDT_CONTRACT_ADDRESSES[networkType]}&address=${address}&tag=latest&apikey=${BSC_SCAN_API_KEY}`\r\n        );\r\n\r\n        const balance = response.data.result;\r\n        if (balance) {\r\n          // Convert balance to human-readable format (USDT has 18 decimals)\r\n          setUsdtBalance((parseFloat(balance) / 10 ** 18).toFixed(2));\r\n        } else {\r\n          console.error('Failed to fetch balance:', response.data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching USDT balance:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUSDTBalance();\r\n  }, [address, isConnected]);\r\n\r\n  const [showReceipt, setShowReceipt] = useState(false);\r\n  const [transactionDetails, setTransactionDetails] = useState(null);\r\n\r\n  // Prepare contract write\r\n  const { config } = usePrepareContractWrite({\r\n    address: USDT_CONTRACT_ADDRESSES[window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet'],\r\n    abi: USDT_ABI,\r\n    functionName: 'transfer',\r\n    args: [\r\n      USDT_RECIPIENT,\r\n      investmentAmount ? parseUnits(investmentAmount.toString(), 18) : '0'\r\n    ],\r\n    enabled: Boolean(investmentAmount && investmentAmount >= 1),\r\n  });\r\n\r\n  // Contract write hook\r\n  const { data: transactionData, write, isLoading: isTransactionLoading } = useContractWrite(config);\r\n\r\n  // Wait for transaction\r\n  const { isSuccess, isError } = useWaitForTransaction({\r\n    hash: transactionData?.hash,\r\n    onSuccess(data) {\r\n      const networkType = window.ethereum?.networkVersion === '97' ? 'testnet' : 'mainnet';\r\n      const explorerUrl = networkType === 'testnet' ? 'https://testnet.bscscan.com' : 'https://bscscan.com';\r\n      \r\n      setTransactionDetails({\r\n        hash: data.transactionHash,\r\n        from: address,\r\n        to: USDT_RECIPIENT,\r\n        network: networkType === 'testnet' ? 'BSC Testnet' : 'BSC Mainnet',\r\n        explorer: explorerUrl,\r\n        gasSpent: (data.gasUsed * data.effectiveGasPrice / 1e18).toFixed(6)\r\n      });\r\n      \r\n      setShowReceipt(true);\r\n      setIsModalOpen(false);\r\n    }\r\n  });\r\n\r\n  const handleConfirmInvestment = () => {\r\n    if (write) {\r\n      write();\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  return (\r\n    \r\n    <div className=\"min-h-screen bg-white\">\r\n      {/* Header */}\r\n      <div className=\"bg-[rgba(18,24,39)] bg-cover bg-no-repeat p-6 text-white\">\r\n        <div className=\"max-w-3xl mx-auto\">\r\n          <div className=\"flex items-center space-x-2 text-sm mb-4\">\r\n            <span className=\"bg-blue-500 px-2 py-1 rounded\">{hashtag}</span>\r\n            <span className=\"text-gray-400\">•</span>\r\n            <span className=\"text-gray-400\">Institutional Grade</span>\r\n            <span className=\"text-gray-400\">•</span>\r\n            <span className=\"bg-green-500 px-2 py-1 rounded\">Active</span>\r\n          </div>\r\n          \r\n          <h1 className=\"text-xl font-bold mb-6\">{title}</h1>\r\n          \r\n          <div className=\"grid grid-cols-3 gap-6\">\r\n            <StatCard \r\n              label=\"Variable APY\" \r\n              value={floatingapy} \r\n              subtext=\"Bi-annual redemption\"\r\n            />\r\n            <StatCard \r\n              label=\"Minimum Investment\" \r\n              value=\"$1\"\r\n              subtext=\"Total capacity: $250,000\"\r\n            />\r\n            <StatCard \r\n              label=\"Lock-in Period\" \r\n              value=\"24months\"\r\n              subtext=\"Bi-annual redemption\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"max-w-3xl mx-auto px-6 pb-24\">\r\n        {/* Provider Info */}\r\n        <div className=\"py-6 flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\r\n              <Building2 className=\"w-6 h-6 text-gray-600\" />\r\n            </div>\r\n            <div>\r\n              <p className=\"font-semibold\">Pixx Finance</p>\r\n              <p className=\"text-sm text-gray-600\">Investment Provider</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <BadgeCheck className=\"w-5 h-5 text-blue-600\" />\r\n            <span className=\"text-sm text-gray-600\">Verified Provider</span>\r\n          </div>\r\n        </div>\r\n\r\n        <DetailSection title=\"Investment Overview\">\r\n          <div className=\"prose text-gray-700\">\r\n            <p className=\"mb-4\">\r\n                {description}\r\n            </p>\r\n            <div className={`transition-all duration-300 ${expanded ? 'h-auto' : 'h-20 overflow-hidden'}`}>\r\n              <p className=\"mb-4\">\r\n                This institutional-grade real estate investment opportunity provides exposure to Dubai's premium property market. The portfolio consists of carefully selected luxury properties in prime locations, managed by experienced real estate professionals.\r\n              </p>\r\n              <p>\r\n                With a focus on both capital appreciation and consistent rental yields, this investment vehicle is structured to provide regular bi-annual returns while benefiting from Dubai's robust real estate market growth.\r\n              </p>\r\n            </div>\r\n            <button \r\n              onClick={() => setExpanded(!expanded)}\r\n              className=\"flex items-center text-blue-600 space-x-1 mt-2\"\r\n            >\r\n              <span>{expanded ? 'Show less' : 'Read more'}</span>\r\n              <ChevronDown className={`w-4 h-4 transition-transform ${expanded ? 'rotate-180' : ''}`} />\r\n            </button>\r\n          </div>\r\n        </DetailSection>\r\n\r\n        <DetailSection title=\"Key Info \">\r\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\r\n            <StatCard \r\n              label=\"Total Invested\" \r\n              value=\"$5,000\"\r\n              subtext=\"Minimum investment\"\r\n            />\r\n            <StatCard \r\n              label=\"Available Capacity\" \r\n              value=\"$250,000\"\r\n              subtext=\"Total pool size\"\r\n            />\r\n            <StatCard \r\n              label=\"Expected Returns\" \r\n              value=\"9% APY\"\r\n              subtext=\"Bi-annual distribution\"\r\n            />\r\n            <StatCard \r\n              label=\"Lock-in Period\" \r\n              value=\"24 months\"\r\n              subtext=\"Bi-annual redemption available\"\r\n            />\r\n          </div>\r\n        </DetailSection>\r\n\r\n        <DetailSection title=\"Highlights\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <HighlightCard\r\n              fullWidth\r\n              title=\"Premium Real Estate Portfolio\"\r\n              description=\"Access institutional-grade properties in Dubai's most sought-after locations. Our portfolio consists of luxury residential and commercial properties selected for their prime positioning and strong rental demand, offering both capital appreciation and stable rental yields.\"\r\n            />\r\n            <HighlightCard\r\n              title=\"Professional Management\"\r\n              description=\"Expert property management team handles tenant selection, maintenance, and optimization of rental yields, ensuring hassle-free ownership and maximum returns.\"\r\n            />\r\n            <HighlightCard\r\n              title=\"Flexible Investment\"\r\n              description=\"Bi-annual redemption windows available after the initial 24-month lock-in period. Invest using either cryptocurrency or traditional fiat currency.\"\r\n            />\r\n            <HighlightCard\r\n              title=\"Market Growth Potential\"\r\n              description=\"Benefit from Dubai's robust real estate market, supported by strong economic fundamentals, growing population, and status as a global business hub.\"\r\n            />\r\n          </div>\r\n        </DetailSection>\r\n\r\n        <DetailSection title=\"Payment Methods\">\r\n          <div className=\"grid grid-cols-2 gap-6\">\r\n            <div className=\"flex items-start space-x-3\">\r\n              <DollarSign className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n              <div>\r\n                <h4 className=\"font-medium mb-1\">Fiat Currency</h4>\r\n                <p className=\"text-sm text-gray-600\">Bank transfer, Card payments</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start space-x-3\">\r\n              <Bitcoin className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n              <div>\r\n                <h4 className=\"font-medium mb-1\">Cryptocurrency</h4>\r\n                <p className=\"text-sm text-gray-600\">BTC, ETH, USDT, USDC</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </DetailSection>\r\n\r\n        <DetailSection title=\"Key Features\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"flex items-start space-x-3\">\r\n              <Shield className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n              <div>\r\n                <h4 className=\"font-medium mb-1\">Institutional Grade</h4>\r\n                <p className=\"text-sm text-gray-600\">Professional management and security</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start space-x-3\">\r\n              <Calendar className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n              <div>\r\n                <h4 className=\"font-medium mb-1\">Bi-annual Redemption</h4>\r\n                <p className=\"text-sm text-gray-600\">Flexible exit options available</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start space-x-3\">\r\n              <Wallet className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n              <div>\r\n                <h4 className=\"font-medium mb-1\">Multiple Payment Options</h4>\r\n                <p className=\"text-sm text-gray-600\">Choose between crypto and fiat</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start space-x-3\">\r\n              <TrendingUp className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\r\n              <div>\r\n                <h4 className=\"font-medium mb-1\">Market Growth</h4>\r\n                <p className=\"text-sm text-gray-600\">Exposure to Dubai's premium market</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </DetailSection>\r\n\r\n        {/* Documents Section */}\r\n        <DetailSection title=\"Documents\">\r\n          <div className=\"space-y-4\">\r\n            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <FileText className=\"w-5 h-5 text-gray-600\" />\r\n                <span>Investment Memorandum</span>\r\n              </div>\r\n              <Download className=\"w-5 h-5 text-gray-600\" />\r\n            </button>\r\n            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <FileText className=\"w-5 h-5 text-gray-600\" />\r\n                <span>Property Portfolio Details</span>\r\n              </div>\r\n              <Download className=\"w-5 h-5 text-gray-600\" />\r\n            </button>\r\n            <button className=\"w-full flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <FileText className=\"w-5 h-5 text-gray-600\" />\r\n                <span>Terms & Conditions</span>\r\n              </div>\r\n              <Download className=\"w-5 h-5 text-gray-600\" />\r\n            </button>\r\n          </div>\r\n        </DetailSection>\r\n      </div>\r\n\r\n      {/* Fixed Bottom CTA */}\r\n      <div className=\"fixed bottom-10 left-0 right-0 bg-white border-t border-gray-200 p-4\">\r\n        <div className=\"max-w-3xl mx-auto flex items-center justify-between\">\r\n          <div>\r\n            <p className=\"text-sm text-gray-600\">Minimum Investment</p>\r\n            <p className=\"text-2xl font-semibold\">$1</p>\r\n          </div>\r\n          <button onClick={handleInvestNowClick} className=\"bg-[#d71921] text-white px-8 py-3 rounded-lg font-medium hover:bg-[#b5171a] transition-colors flex items-center space-x-2\">\r\n            <span>Invest Now</span>\r\n            <ArrowUpRight className=\"w-4 h-4\" />\r\n          </button>\r\n        </div>\r\n        {/* Modal */}\r\n        \r\n<Modal isOpen={isModalOpen} onClose={handleCloseModal}>\r\n  \r\n\r\n  <div className=\"flex p-1 bg-gray-100 rounded-xl mb-6\">\r\n    <button\r\n      className={`flex-1 py-1 text-sm font-medium rounded-lg transition-all ${\r\n        investmentType === 'crypto'\r\n          ? 'bg-white text-gray-900 shadow'\r\n          : 'text-gray-600 hover:text-gray-900'\r\n      }`}\r\n      onClick={() => setInvestmentType('crypto')}\r\n    >\r\n      Invest via Stablecoin\r\n    </button>\r\n    <button\r\n      className={`flex-1 py-1 text-xsm font-medium rounded-lg transition-all ${\r\n        investmentType === 'fiat'\r\n          ? 'bg-white text-gray-900 shadow'\r\n          : 'text-gray-600 hover:text-gray-900'\r\n      }`}\r\n      onClick={() => setInvestmentType('fiat')}\r\n    >\r\n      Invest via Fiat Currency\r\n    </button>\r\n  </div>\r\n\r\n  {investmentType === 'crypto' ? (\r\n    <>\r\n      <div className=\"mt-6 p-5 bg-gray-50 rounded-xl border border-gray-200\">\r\n        <div className=\"mb-4\">\r\n          <p className=\"text-xs text-gray-500 mb-1\">Transferring from</p>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Wallet className=\"w-4 h-4 text-gray-600\" />\r\n            <ConnectButton accountStatus=\"avatar\" chainStatus=\"icon\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"pt-4 border-t border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <img src=\"https://imgur.com/5NgRebx.png\" alt=\"USDT\" className=\"w-6 h-6\" />\r\n              <span className=\"text-sm text-gray-600\">USDT Balance</span>\r\n            </div>\r\n            <p className=\"text-sm font-medium\">\r\n              {isLoading ? (\r\n                <span className=\"flex items-center space-x-2\">\r\n                  <span className=\"w-4 h-4 border-2 border-gray-300 border-t-[#d71921] rounded-full animate-spin\" />\r\n                  <span className=\"text-gray-500\">Loading...</span>\r\n                </span>\r\n              ) : (\r\n                <span className=\"font-mono\">{usdtBalance} USDT</span>\r\n              )}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-6 relative\">\r\n        <div className=\"relative flex items-center\">\r\n          <input\r\n            type=\"number\"\r\n            min=\"5000\"\r\n            step=\"100\"\r\n            placeholder=\"0.00\"\r\n            value={investmentAmount}\r\n            onChange={(e) => setInvestmentAmount(e.target.value)}\r\n            className=\"w-full px-4 py-3 text-2xl font-light bg-gray-50 border-2 border-gray-100 rounded-xl outline-none transition-all duration-200 focus:border-[#d71921] focus:bg-white\"\r\n          />\r\n          <div className=\"absolute right-4 text-gray-400\">USDT</div>\r\n        </div>\r\n        <p className=\"mt-2 text-xs text-gray-500\">Minimum investment: $1</p>\r\n      </div>\r\n\r\n      <div className=\"mt-6\">\r\n        <div className=\"flex justify-between mb-2\">\r\n          <span className=\"text-sm text-gray-600\">Investment Tenure</span>\r\n          <span className=\"text-sm font-medium\">{selectedTenure} months</span>\r\n        </div>\r\n        \r\n        <div className=\"relative mb-4\">\r\n          <input\r\n            type=\"range\"\r\n            min={MIN_TENURE}\r\n            max={MAX_TENURE}\r\n            value={selectedTenure}\r\n            onChange={(e) => setSelectedTenure(Number(e.target.value))}\r\n            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\r\n          />\r\n          <div \r\n            className=\"absolute top-[-6px] w-1 h-4 bg-green-500\" \r\n            style={{\r\n              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\r\n              transform: 'translateX(-50%)'\r\n            }}\r\n          />\r\n          <div className=\"absolute top-4 text-xs text-green-600\"\r\n            style={{\r\n              left: `${((RECOMMENDED_TENURE - MIN_TENURE) / (MAX_TENURE - MIN_TENURE)) * 100}%`,\r\n              transform: 'translateX(-50%)'\r\n            }}\r\n          >\r\n            Recommended\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"p-4 bg-gray-50 rounded-xl\">\r\n          <div className=\"flex justify-between mb-2\">\r\n            <span className=\"text-sm text-gray-600\">Expected Return</span>\r\n            <span className=\"text-sm font-medium\">\r\n              {investmentAmount ? \r\n                `${calculateExpectedReturn(investmentAmount, selectedTenure)} USDT` : \r\n                '-'\r\n              }\r\n            </span>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <span className=\"text-sm text-gray-600\">Annual Yield</span>\r\n            <span className=\"text-sm font-medium text-green-600\">{ANNUAL_RATE * 100}% APY</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <button\r\n        onClick={handleConfirmInvestment}\r\n        disabled={\r\n          !investmentAmount ||\r\n          investmentAmount < 1 ||\r\n          Number(investmentAmount) > Number(usdtBalance) ||\r\n          isTransactionLoading\r\n        }\r\n        className={`w-full px-4 py-3 mt-6 rounded-xl font-medium transition-all duration-200 ${\r\n          investmentAmount >= 1 &&\r\n          Number(investmentAmount) <= Number(usdtBalance) &&\r\n          !isTransactionLoading\r\n            ? 'bg-[#d71921] hover:bg-[#b5171a] text-white'\r\n            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\r\n        }`}\r\n      >\r\n        {isTransactionLoading\r\n          ? 'Processing Transaction...'\r\n          : !investmentAmount\r\n          ? 'Enter Investment Amount'\r\n          : Number(investmentAmount) < 1\r\n          ? 'Minimum $1 Required'\r\n          : Number(investmentAmount) > Number(usdtBalance)\r\n          ? 'Insufficient Balance'\r\n          : 'Confirm Investment'}\r\n      </button>\r\n    </>\r\n  ) : (\r\n    <div className=\"py-12 px-4 text-center\">\r\n      <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Coming Soon</h3>\r\n      <p className=\"text-sm text-gray-600 max-w-sm mx-auto\">\r\n        Thorough compliance checks are required to enable investments through your local currency.\r\n      </p>\r\n    </div>\r\n  )}\r\n</Modal>\r\n<BottomNavigation />\r\n      </div>\r\n\r\n      {/* Add Transaction Receipt */}\r\n      <TransactionReceipt\r\n        isOpen={showReceipt}\r\n        onClose={() => setShowReceipt(false)}\r\n        transaction={transactionDetails}\r\n        investment={{\r\n          title,\r\n          assetType: \"Real Estate\",\r\n          amount: investmentAmount,\r\n          floatingapy,\r\n          tenure: selectedTenure\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}"
        }
    ]
}